{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/api/api.module.ts","webpack:///./src/app/api/api/api.ts","webpack:///./src/app/api/api/audit.service.ts","webpack:///./src/app/api/api/cityConfig.service.ts","webpack:///./src/app/api/api/configuration.service.ts","webpack:///./src/app/api/api/data.service.ts","webpack:///./src/app/api/api/guild.service.ts","webpack:///./src/app/api/api/guildCards.service.ts","webpack:///./src/app/api/api/guildMember.service.ts","webpack:///./src/app/api/api/notification.service.ts","webpack:///./src/app/api/api/oauth.service.ts","webpack:///./src/app/api/api/park.service.ts","webpack:///./src/app/api/api/parking.service.ts","webpack:///./src/app/api/api/paymentGateway.service.ts","webpack:///./src/app/api/api/permission.service.ts","webpack:///./src/app/api/api/segments.service.ts","webpack:///./src/app/api/api/service.service.ts","webpack:///./src/app/api/api/terms.service.ts","webpack:///./src/app/api/api/tickets.service.ts","webpack:///./src/app/api/api/user.service.ts","webpack:///./src/app/api/api/userbo.service.ts","webpack:///./src/app/api/api/vehicle.service.ts","webpack:///./src/app/api/api/vehicleBus.service.ts","webpack:///./src/app/api/api/vehicles.service.ts","webpack:///./src/app/api/api/watcher.service.ts","webpack:///./src/app/api/configuration.ts","webpack:///./src/app/api/encoder.ts","webpack:///./src/app/api/index.ts","webpack:///./src/app/api/model/account.ts","webpack:///./src/app/api/model/models.ts","webpack:///./src/app/api/variables.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/app.routing.ts","webpack:///./src/app/components/navbar/navbar.component.css","webpack:///./src/app/components/navbar/navbar.component.html","webpack:///./src/app/components/navbar/navbar.component.ts","webpack:///./src/app/components/sidebar/sidebar.component.css","webpack:///./src/app/components/sidebar/sidebar.component.html","webpack:///./src/app/components/sidebar/sidebar.component.ts","webpack:///./src/app/dashboard/dashboard.component.css","webpack:///./src/app/dashboard/dashboard.component.html","webpack:///./src/app/dashboard/dashboard.component.ts","webpack:///./src/app/directives/numeric.ts","webpack:///./src/app/globalVariables/globalVariables.ts","webpack:///./src/app/login/login.component.html","webpack:///./src/app/login/login.component.scss","webpack:///./src/app/login/login.component.ts","webpack:///./src/app/services/authorization.service.ts","webpack:///./src/app/services/current-user.service.ts","webpack:///./src/app/services/customhttpinterceptor.service.ts","webpack:///./src/app/services/navigationEndInterceptor.service.ts","webpack:///./src/app/services/paginator.service.ts","webpack:///./src/app/services/toast.service.ts","webpack:///./src/config/config.ts","webpack:///./src/environments/environment.ts","webpack:///./src/environments/version.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { HttpModule } from '@angular/http';\nimport { Configuration } from './configuration';\n\nimport { AuditService } from './api/audit.service';\nimport { ConfigurationService } from './api/configuration.service';\nimport { NotificationService } from './api/notification.service';\nimport { ParkService } from './api/park.service';\nimport { ParkingService } from './api/parking.service';\nimport { PaymentGatewayService } from './api/paymentGateway.service';\n//import { ThirdUsersService } from './api/thirdUsers.service';\nimport { TicketsService } from './api/tickets.service';\nimport { UserService } from './api/user.service';\nimport { UserboService } from './api/userbo.service';\nimport { VehicleBusService } from './api/vehicleBus.service';\nimport { VehicleService } from './api/vehicle.service';\nimport { DataService } from './api/data.service';\nimport { TermsService } from './api/terms.service';\nimport { CityConfigService } from './api/cityConfig.service';\nimport { WatcherService } from './api/watcher.service';\nimport { OauthService } from './api/oauth.service';\nimport { ServiceService } from './api/service.service';\nimport { GuildService } from './api/guild.service';\nimport { GuildMemberService } from './api/guildMember.service';\nimport { GuildCardsService } from './api/guildCards.service';\nimport { SegmentsService } from './api/segments.service';\nimport { PermissionService } from './api/permission.service';\nimport { VehiclesService } from './api/vehicles.service';\n\n@NgModule({\n  imports:      [ CommonModule, HttpClientModule, HttpModule ],\n  declarations: [],\n  exports:      [],\n  providers: [\n    AuditService,\n    ConfigurationService,\n    NotificationService,\n    ParkService,\n    ParkingService,\n    PaymentGatewayService,\n    //ThirdUsersService,\n    TicketsService,\n    UserService,\n    UserboService,\n    VehicleService,\n    VehicleBusService,\n    DataService,\n    TermsService,\n    CityConfigService,\n    WatcherService,\n    OauthService,\n    ServiceService,\n    GuildService,\n    GuildMemberService,\n    GuildCardsService,\n    SegmentsService,\n    PermissionService,\n    VehiclesService\n ]\n})\nexport class ApiModule {\n    public static forRoot(configurationFactory: () => Configuration): ModuleWithProviders {\n        return {\n            ngModule: ApiModule,\n            providers: [ { provide: Configuration, useFactory: configurationFactory } ]\n        }\n    }\n\n    constructor( @Optional() @SkipSelf() parentModule: ApiModule) {\n        if (parentModule) {\n            throw new Error('ApiModule is already loaded. Import your base AppModule only.');\n        }\n    }\n}\n","export * from './audit.service';\nimport { AuditService } from './audit.service';\nexport * from './configuration.service';\nimport { ConfigurationService } from './configuration.service';\nexport * from './notification.service';\nimport { NotificationService } from './notification.service';\nexport * from './park.service';\nimport { ParkService } from './park.service';\nexport * from './parking.service';\nimport { ParkingService } from './parking.service';\nexport * from './paymentGateway.service';\nimport { PaymentGatewayService } from './paymentGateway.service';\n/*export * from './thirdUsers.service';\nimport { ThirdUsersService } from './thirdUsers.service';*/\nexport * from './tickets.service';\nimport { TicketsService } from './tickets.service';\nexport * from './user.service';\nimport { UserService } from './user.service';\nexport * from './userbo.service';\nimport { UserboService } from './userbo.service';\nexport * from './vehicle.service';\nimport { VehicleService } from './vehicle.service';\nexport * from './guildCards.service';\nimport { GuildCardsService } from './guildCards.service';\nexport * from './guild.service';\nimport { GuildService } from './guild.service';\nexport * from './guildMember.service';\nimport { GuildMemberService } from './guildMember.service';\nexport * from './permission.service';\nimport { PermissionService } from './permission.service';\nexport * from './vehicleBus.service'\nimport { VehicleBusService } from './vehicleBus.service';\n\nexport const APIS = [AuditService, ConfigurationService, NotificationService, ParkService, ParkingService, PaymentGatewayService, TicketsService, UserService, UserboService, VehicleService,GuildMemberService,GuildService,GuildCardsService,PermissionService,VehicleBusService];\n//export const APIS = [AuditService, ConfigurationService, NotificationService, ParkService, ParkingService, PaymentGatewayService, ThirdUsersService, TicketsService, UserService, UserboService, VehicleService];\n","/**\n * MAAS API\n * This is the Mobility as a Service API\n *\n * OpenAPI spec version: 1.0.0\n * Contact: avalls@nexusgeographics.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs/Observable';\n\nimport { AuditLog } from '../model/auditLog';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class AuditService {\n\n    protected basePath = 'http://maas.nexusgeografics.com/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Get audit logs depending of the paremeters\n     * \n     * @param authorization \n     * @param actionType \n     * @param userOwner \n     * @param actionDate \n     * @param actionDateRange \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public auditsGet(authorization: string, actionType?: string, userOwner?: string, actionDate?: string, actionDateRange?: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<AuditLog>;\n    public auditsGet(authorization: string, actionType?: string, userOwner?: string, actionDate?: string, actionDateRange?: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AuditLog>>;\n    public auditsGet(authorization: string, actionType?: string, userOwner?: string, actionDate?: string, actionDateRange?: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AuditLog>>;\n    public auditsGet(authorization: string, actionType?: string, userOwner?: string, actionDate?: string, actionDateRange?: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling auditsGet.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (actionType !== undefined) {\n            queryParameters = queryParameters.set('actionType', <any>actionType);\n        }\n        if (userOwner !== undefined) {\n            queryParameters = queryParameters.set('userOwner', <any>userOwner);\n        }\n        if (actionDate !== undefined) {\n            queryParameters = queryParameters.set('actionDate', <any>actionDate);\n        }\n        if (actionDateRange) {\n            actionDateRange.forEach((element) => {\n                queryParameters = queryParameters.append('actionDateRange', <any>element);\n            })\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<AuditLog>(`${this.basePath}/audits`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Smou API\n * This is the Mobility as a Service API\n *\n * OpenAPI spec version: 1.0.0\n * Contact: avalls@nexusgeographics.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs/Observable';\n\nimport { ConfigurationConf } from '../model/configurationConf';\nimport { ModifierConf } from '../model/modifierConf';\nimport { RateCityConf } from '../model/rateCityConf';\nimport { RestrictionConf } from '../model/restrictionConf';\nimport { ScheduleCityConf } from '../model/scheduleCityConf';\nimport { SegmentConf } from '../model/segmentConf';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class CityConfigService {\n\n    protected basePath = 'http://maas.nexusgeografics.com/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Get the configuration\n     * \n     * @param cityId \n     * @param configurationId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public configuration2(cityId: number, configurationId: number, observe?: 'body', reportProgress?: boolean): Observable<ConfigurationConf>;\n    public configuration2(cityId: number, configurationId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ConfigurationConf>>;\n    public configuration2(cityId: number, configurationId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ConfigurationConf>>;\n    public configuration2(cityId: number, configurationId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (cityId === null || cityId === undefined) {\n            throw new Error('Required parameter cityId was null or undefined when calling configuration.');\n        }\n        if (configurationId === null || configurationId === undefined) {\n            throw new Error('Required parameter configurationId was null or undefined when calling configuration.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<ConfigurationConf>(`${this.basePath}/cityConfig/${encodeURIComponent(String(cityId))}/configurations/${encodeURIComponent(String(configurationId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get all configurations\n     * \n     * @param cityId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public configurations(cityId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<ConfigurationConf>>;\n    public configurations(cityId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ConfigurationConf>>>;\n    public configurations(cityId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ConfigurationConf>>>;\n    public configurations(cityId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (cityId === null || cityId === undefined) {\n            throw new Error('Required parameter cityId was null or undefined when calling configurations.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<Array<ConfigurationConf>>(`${this.basePath}/cityConfig/${encodeURIComponent(String(cityId))}/configurations`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Create a new configuration\n     * \n     * @param cityId \n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createConfiguration(cityId: number, body: ConfigurationConf, observe?: 'body', reportProgress?: boolean): Observable<ConfigurationConf>;\n    public createConfiguration(cityId: number, body: ConfigurationConf, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ConfigurationConf>>;\n    public createConfiguration(cityId: number, body: ConfigurationConf, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ConfigurationConf>>;\n    public createConfiguration(cityId: number, body: ConfigurationConf, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (cityId === null || cityId === undefined) {\n            throw new Error('Required parameter cityId was null or undefined when calling createConfiguration.');\n        }\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling createConfiguration.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<ConfigurationConf>(`${this.basePath}/cityConfig/${encodeURIComponent(String(cityId))}/configurations`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Create a new restriction\n     * \n     * @param cityId \n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createRestriction(cityId: number, body: RestrictionConf, observe?: 'body', reportProgress?: boolean): Observable<RestrictionConf>;\n    public createRestriction(cityId: number, body: RestrictionConf, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RestrictionConf>>;\n    public createRestriction(cityId: number, body: RestrictionConf, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RestrictionConf>>;\n    public createRestriction(cityId: number, body: RestrictionConf, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (cityId === null || cityId === undefined) {\n            throw new Error('Required parameter cityId was null or undefined when calling createRestriction.');\n        }\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling createRestriction.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<RestrictionConf>(`${this.basePath}/cityConfig/${encodeURIComponent(String(cityId))}/restrictions`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Create a new schedule\n     * \n     * @param cityId \n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createSchedule(cityId: number, body: ScheduleCityConf, observe?: 'body', reportProgress?: boolean): Observable<ScheduleCityConf>;\n    public createSchedule(cityId: number, body: ScheduleCityConf, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ScheduleCityConf>>;\n    public createSchedule(cityId: number, body: ScheduleCityConf, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ScheduleCityConf>>;\n    public createSchedule(cityId: number, body: ScheduleCityConf, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (cityId === null || cityId === undefined) {\n            throw new Error('Required parameter cityId was null or undefined when calling createSchedule.');\n        }\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling createSchedule.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<ScheduleCityConf>(`${this.basePath}/cityConfig/${encodeURIComponent(String(cityId))}/schedules`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Create a new schedule\n     * \n     * @param cityId \n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createSegment(cityId: number, body: SegmentConf, observe?: 'body', reportProgress?: boolean): Observable<SegmentConf>;\n    public createSegment(cityId: number, body: SegmentConf, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SegmentConf>>;\n    public createSegment(cityId: number, body: SegmentConf, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SegmentConf>>;\n    public createSegment(cityId: number, body: SegmentConf, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (cityId === null || cityId === undefined) {\n            throw new Error('Required parameter cityId was null or undefined when calling createSegment.');\n        }\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling createSegment.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<SegmentConf>(`${this.basePath}/cityConfig/${encodeURIComponent(String(cityId))}/segments`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete a configuration\n     * \n     * @param cityId \n     * @param configurationId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteConfiguration(cityId: number, configurationId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteConfiguration(cityId: number, configurationId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteConfiguration(cityId: number, configurationId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteConfiguration(cityId: number, configurationId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (cityId === null || cityId === undefined) {\n            throw new Error('Required parameter cityId was null or undefined when calling deleteConfiguration.');\n        }\n        if (configurationId === null || configurationId === undefined) {\n            throw new Error('Required parameter configurationId was null or undefined when calling deleteConfiguration.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}/cityConfig/${encodeURIComponent(String(cityId))}/configurations/${encodeURIComponent(String(configurationId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n    * Create a new modifier\n    * \n    * @param cityId \n    * @param body \n    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n    * @param reportProgress flag to report request and response progress.\n    */\n   public createModifier(cityId: number, body: ModifierConf, observe?: 'body', reportProgress?: boolean): Observable<ModifierConf>;\n   public createModifier(cityId: number, body: ModifierConf, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ModifierConf>>;\n   public createModifier(cityId: number, body: ModifierConf, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ModifierConf>>;\n   public createModifier(cityId: number, body: ModifierConf, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n       if (cityId === null || cityId === undefined) {\n           throw new Error('Required parameter cityId was null or undefined when calling createModifier.');\n       }\n       if (body === null || body === undefined) {\n           throw new Error('Required parameter body was null or undefined when calling createModifier.');\n       }\n\n       let headers = this.defaultHeaders;\n\n       // authentication (MaaS Token) required\n       if (this.configuration.accessToken) {\n           let accessToken = typeof this.configuration.accessToken === 'function'\n               ? this.configuration.accessToken()\n               : this.configuration.accessToken;\n           headers = headers.set('Authorization', 'Bearer ' + accessToken);\n       }\n\n       // to determine the Accept header\n       let httpHeaderAccepts: string[] = [\n           'application/json'\n       ];\n       let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n       if (httpHeaderAcceptSelected != undefined) {\n           headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n       }\n\n       // to determine the Content-Type header\n       let consumes: string[] = [\n       ];\n       let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n       if (httpContentTypeSelected != undefined) {\n           headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n       }\n\n       return this.httpClient.post<ModifierConf>(`${this.basePath}/cityConfig/${encodeURIComponent(String(cityId))}/modifiers`,\n           body,\n           {\n               withCredentials: this.configuration.withCredentials,\n               headers: headers,\n               observe: observe,\n               reportProgress: reportProgress\n           }\n       );\n   }\n\n   /**\n    * Create a new rate\n    * \n    * @param cityId \n    * @param body \n    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n    * @param reportProgress flag to report request and response progress.\n    */\n   public createRate(cityId: number, body: RateCityConf, observe?: 'body', reportProgress?: boolean): Observable<RateCityConf>;\n   public createRate(cityId: number, body: RateCityConf, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RateCityConf>>;\n   public createRate(cityId: number, body: RateCityConf, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RateCityConf>>;\n   public createRate(cityId: number, body: RateCityConf, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n       if (cityId === null || cityId === undefined) {\n           throw new Error('Required parameter cityId was null or undefined when calling createRate.');\n       }\n       if (body === null || body === undefined) {\n           throw new Error('Required parameter body was null or undefined when calling createRate.');\n       }\n\n       let headers = this.defaultHeaders;\n\n       // authentication (MaaS Token) required\n       if (this.configuration.accessToken) {\n           let accessToken = typeof this.configuration.accessToken === 'function'\n               ? this.configuration.accessToken()\n               : this.configuration.accessToken;\n           headers = headers.set('Authorization', 'Bearer ' + accessToken);\n       }\n\n       // to determine the Accept header\n       let httpHeaderAccepts: string[] = [\n           'application/json'\n       ];\n       let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n       if (httpHeaderAcceptSelected != undefined) {\n           headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n       }\n\n       // to determine the Content-Type header\n       let consumes: string[] = [\n       ];\n       let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n       if (httpContentTypeSelected != undefined) {\n           headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n       }\n\n       return this.httpClient.post<RateCityConf>(`${this.basePath}/cityConfig/${encodeURIComponent(String(cityId))}/rates`,\n           body,\n           {\n               withCredentials: this.configuration.withCredentials,\n               headers: headers,\n               observe: observe,\n               reportProgress: reportProgress\n           }\n       );\n   }\n\n    /**\n     * Delete a modifier\n     * \n     * @param cityId \n     * @param modifierId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteModifier(cityId: number, modifierId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteModifier(cityId: number, modifierId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteModifier(cityId: number, modifierId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteModifier(cityId: number, modifierId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (cityId === null || cityId === undefined) {\n            throw new Error('Required parameter cityId was null or undefined when calling deleteModifier.');\n        }\n        if (modifierId === null || modifierId === undefined) {\n            throw new Error('Required parameter modifierId was null or undefined when calling deleteModifier.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}/cityConfig/${encodeURIComponent(String(cityId))}/modifiers/${encodeURIComponent(String(modifierId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete a rate\n     * \n     * @param cityId \n     * @param rateId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteRate(cityId: number, rateId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteRate(cityId: number, rateId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteRate(cityId: number, rateId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteRate(cityId: number, rateId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (cityId === null || cityId === undefined) {\n            throw new Error('Required parameter cityId was null or undefined when calling deleteRate.');\n        }\n        if (rateId === null || rateId === undefined) {\n            throw new Error('Required parameter rateId was null or undefined when calling deleteRate.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}/cityConfig/${encodeURIComponent(String(cityId))}/rates/${encodeURIComponent(String(rateId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete a restriction\n     * \n     * @param cityId \n     * @param restrictionId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteRestriction(cityId: number, restrictionId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteRestriction(cityId: number, restrictionId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteRestriction(cityId: number, restrictionId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteRestriction(cityId: number, restrictionId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (cityId === null || cityId === undefined) {\n            throw new Error('Required parameter cityId was null or undefined when calling deleteRestriction.');\n        }\n        if (restrictionId === null || restrictionId === undefined) {\n            throw new Error('Required parameter restrictionId was null or undefined when calling deleteRestriction.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}/cityConfig/${encodeURIComponent(String(cityId))}/restrictions/${encodeURIComponent(String(restrictionId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete a schedule\n     * \n     * @param cityId \n     * @param scheduleId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteSchedule(cityId: number, scheduleId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteSchedule(cityId: number, scheduleId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteSchedule(cityId: number, scheduleId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteSchedule(cityId: number, scheduleId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (cityId === null || cityId === undefined) {\n            throw new Error('Required parameter cityId was null or undefined when calling deleteSchedule.');\n        }\n        if (scheduleId === null || scheduleId === undefined) {\n            throw new Error('Required parameter scheduleId was null or undefined when calling deleteSchedule.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}/cityConfig/${encodeURIComponent(String(cityId))}/schedules/${encodeURIComponent(String(scheduleId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete a segment\n     * \n     * @param cityId \n     * @param segmentId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteSegment(cityId: number, segmentId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteSegment(cityId: number, segmentId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteSegment(cityId: number, segmentId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteSegment(cityId: number, segmentId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (cityId === null || cityId === undefined) {\n            throw new Error('Required parameter cityId was null or undefined when calling deleteSegment.');\n        }\n        if (segmentId === null || segmentId === undefined) {\n            throw new Error('Required parameter segmentId was null or undefined when calling deleteSegment.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}/cityConfig/${encodeURIComponent(String(cityId))}/segments/${encodeURIComponent(String(segmentId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Edit a configuration\n     * \n     * @param cityId \n     * @param configurationId \n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public editConfiguration(cityId: number, configurationId: number, body: ConfigurationConf, observe?: 'body', reportProgress?: boolean): Observable<ConfigurationConf>;\n    public editConfiguration(cityId: number, configurationId: number, body: ConfigurationConf, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ConfigurationConf>>;\n    public editConfiguration(cityId: number, configurationId: number, body: ConfigurationConf, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ConfigurationConf>>;\n    public editConfiguration(cityId: number, configurationId: number, body: ConfigurationConf, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (cityId === null || cityId === undefined) {\n            throw new Error('Required parameter cityId was null or undefined when calling editConfiguration.');\n        }\n        if (configurationId === null || configurationId === undefined) {\n            throw new Error('Required parameter configurationId was null or undefined when calling editConfiguration.');\n        }\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling editConfiguration.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<ConfigurationConf>(`${this.basePath}/cityConfig/${encodeURIComponent(String(cityId))}/configurations/${encodeURIComponent(String(configurationId))}`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Edit a modifier\n     * \n     * @param cityId \n     * @param modifierId \n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public editModifier(cityId: number, modifierId: number, body: ModifierConf, observe?: 'body', reportProgress?: boolean): Observable<ModifierConf>;\n    public editModifier(cityId: number, modifierId: number, body: ModifierConf, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ModifierConf>>;\n    public editModifier(cityId: number, modifierId: number, body: ModifierConf, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ModifierConf>>;\n    public editModifier(cityId: number, modifierId: number, body: ModifierConf, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (cityId === null || cityId === undefined) {\n            throw new Error('Required parameter cityId was null or undefined when calling editModifier.');\n        }\n        if (modifierId === null || modifierId === undefined) {\n            throw new Error('Required parameter modifierId was null or undefined when calling editModifier.');\n        }\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling editModifier.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<ModifierConf>(`${this.basePath}/cityConfig/${encodeURIComponent(String(cityId))}/modifiers/${encodeURIComponent(String(modifierId))}`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Edit a rate\n     * \n     * @param cityId \n     * @param rateId \n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public editRate(cityId: number, rateId: number, body: RateCityConf, observe?: 'body', reportProgress?: boolean): Observable<RateCityConf>;\n    public editRate(cityId: number, rateId: number, body: RateCityConf, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RateCityConf>>;\n    public editRate(cityId: number, rateId: number, body: RateCityConf, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RateCityConf>>;\n    public editRate(cityId: number, rateId: number, body: RateCityConf, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (cityId === null || cityId === undefined) {\n            throw new Error('Required parameter cityId was null or undefined when calling editRate.');\n        }\n        if (rateId === null || rateId === undefined) {\n            throw new Error('Required parameter rateId was null or undefined when calling editRate.');\n        }\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling editRate.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<RateCityConf>(`${this.basePath}/cityConfig/${encodeURIComponent(String(cityId))}/rates/${encodeURIComponent(String(rateId))}`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Edit a restriction\n     * \n     * @param cityId \n     * @param restrictionId \n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public editRestriction(cityId: number, restrictionId: number, body: RestrictionConf, observe?: 'body', reportProgress?: boolean): Observable<RestrictionConf>;\n    public editRestriction(cityId: number, restrictionId: number, body: RestrictionConf, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RestrictionConf>>;\n    public editRestriction(cityId: number, restrictionId: number, body: RestrictionConf, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RestrictionConf>>;\n    public editRestriction(cityId: number, restrictionId: number, body: RestrictionConf, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (cityId === null || cityId === undefined) {\n            throw new Error('Required parameter cityId was null or undefined when calling editRestriction.');\n        }\n        if (restrictionId === null || restrictionId === undefined) {\n            throw new Error('Required parameter restrictionId was null or undefined when calling editRestriction.');\n        }\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling editRestriction.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<RestrictionConf>(`${this.basePath}/cityConfig/${encodeURIComponent(String(cityId))}/restrictions/${encodeURIComponent(String(restrictionId))}`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Edit a schedule\n     * \n     * @param cityId \n     * @param scheduleId \n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public editSchedule(cityId: number, scheduleId: number, body: ScheduleCityConf, observe?: 'body', reportProgress?: boolean): Observable<ScheduleCityConf>;\n    public editSchedule(cityId: number, scheduleId: number, body: ScheduleCityConf, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ScheduleCityConf>>;\n    public editSchedule(cityId: number, scheduleId: number, body: ScheduleCityConf, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ScheduleCityConf>>;\n    public editSchedule(cityId: number, scheduleId: number, body: ScheduleCityConf, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (cityId === null || cityId === undefined) {\n            throw new Error('Required parameter cityId was null or undefined when calling editSchedule.');\n        }\n        if (scheduleId === null || scheduleId === undefined) {\n            throw new Error('Required parameter scheduleId was null or undefined when calling editSchedule.');\n        }\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling editSchedule.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<ScheduleCityConf>(`${this.basePath}/cityConfig/${encodeURIComponent(String(cityId))}/schedules/${encodeURIComponent(String(scheduleId))}`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Edit a segment\n     * \n     * @param cityId \n     * @param segmentId \n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public editSegment(cityId: number, segmentId: number, body: SegmentConf, observe?: 'body', reportProgress?: boolean): Observable<SegmentConf>;\n    public editSegment(cityId: number, segmentId: number, body: SegmentConf, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SegmentConf>>;\n    public editSegment(cityId: number, segmentId: number, body: SegmentConf, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SegmentConf>>;\n    public editSegment(cityId: number, segmentId: number, body: SegmentConf, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (cityId === null || cityId === undefined) {\n            throw new Error('Required parameter cityId was null or undefined when calling editSegment.');\n        }\n        if (segmentId === null || segmentId === undefined) {\n            throw new Error('Required parameter segmentId was null or undefined when calling editSegment.');\n        }\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling editSegment.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<SegmentConf>(`${this.basePath}/cityConfig/${encodeURIComponent(String(cityId))}/segments/${encodeURIComponent(String(segmentId))}`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get a modifier\n     * \n     * @param cityId \n     * @param modifierId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public modifier(cityId: number, modifierId: number, observe?: 'body', reportProgress?: boolean): Observable<ModifierConf>;\n    public modifier(cityId: number, modifierId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ModifierConf>>;\n    public modifier(cityId: number, modifierId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ModifierConf>>;\n    public modifier(cityId: number, modifierId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (cityId === null || cityId === undefined) {\n            throw new Error('Required parameter cityId was null or undefined when calling modifier.');\n        }\n        if (modifierId === null || modifierId === undefined) {\n            throw new Error('Required parameter modifierId was null or undefined when calling modifier.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<ModifierConf>(`${this.basePath}/cityConfig/${encodeURIComponent(String(cityId))}/modifiers/${encodeURIComponent(String(modifierId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get all the modifiers\n     * \n     * @param cityId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public modifiers(cityId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<ModifierConf>>;\n    public modifiers(cityId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ModifierConf>>>;\n    public modifiers(cityId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ModifierConf>>>;\n    public modifiers(cityId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (cityId === null || cityId === undefined) {\n            throw new Error('Required parameter cityId was null or undefined when calling modifiers.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<Array<ModifierConf>>(`${this.basePath}/cityConfig/${encodeURIComponent(String(cityId))}/modifiers`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get a rate\n     * \n     * @param cityId \n     * @param rateId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public rate(cityId: number, rateId: number, observe?: 'body', reportProgress?: boolean): Observable<RateCityConf>;\n    public rate(cityId: number, rateId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RateCityConf>>;\n    public rate(cityId: number, rateId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RateCityConf>>;\n    public rate(cityId: number, rateId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (cityId === null || cityId === undefined) {\n            throw new Error('Required parameter cityId was null or undefined when calling rate.');\n        }\n        if (rateId === null || rateId === undefined) {\n            throw new Error('Required parameter rateId was null or undefined when calling rate.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<RateCityConf>(`${this.basePath}/cityConfig/${encodeURIComponent(String(cityId))}/rates/${encodeURIComponent(String(rateId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get all rates\n     * \n     * @param cityId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public rates(cityId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<RateCityConf>>;\n    public rates(cityId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<RateCityConf>>>;\n    public rates(cityId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<RateCityConf>>>;\n    public rates(cityId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (cityId === null || cityId === undefined) {\n            throw new Error('Required parameter cityId was null or undefined when calling rates.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<Array<RateCityConf>>(`${this.basePath}/cityConfig/${encodeURIComponent(String(cityId))}/rates`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get a restriction\n     * \n     * @param cityId \n     * @param restrictionId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public restriction(cityId: number, restrictionId: number, observe?: 'body', reportProgress?: boolean): Observable<RestrictionConf>;\n    public restriction(cityId: number, restrictionId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RestrictionConf>>;\n    public restriction(cityId: number, restrictionId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RestrictionConf>>;\n    public restriction(cityId: number, restrictionId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (cityId === null || cityId === undefined) {\n            throw new Error('Required parameter cityId was null or undefined when calling restriction.');\n        }\n        if (restrictionId === null || restrictionId === undefined) {\n            throw new Error('Required parameter restrictionId was null or undefined when calling restriction.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<RestrictionConf>(`${this.basePath}/cityConfig/${encodeURIComponent(String(cityId))}/restrictions/${encodeURIComponent(String(restrictionId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get all the restrictions\n     * \n     * @param cityId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public restrictions(cityId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<RestrictionConf>>;\n    public restrictions(cityId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<RestrictionConf>>>;\n    public restrictions(cityId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<RestrictionConf>>>;\n    public restrictions(cityId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (cityId === null || cityId === undefined) {\n            throw new Error('Required parameter cityId was null or undefined when calling restrictions.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<Array<RestrictionConf>>(`${this.basePath}/cityConfig/${encodeURIComponent(String(cityId))}/restrictions`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get a schedule\n     * \n     * @param cityId \n     * @param scheduleId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public schedule(cityId: number, scheduleId: number, observe?: 'body', reportProgress?: boolean): Observable<ScheduleCityConf>;\n    public schedule(cityId: number, scheduleId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ScheduleCityConf>>;\n    public schedule(cityId: number, scheduleId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ScheduleCityConf>>;\n    public schedule(cityId: number, scheduleId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (cityId === null || cityId === undefined) {\n            throw new Error('Required parameter cityId was null or undefined when calling schedule.');\n        }\n        if (scheduleId === null || scheduleId === undefined) {\n            throw new Error('Required parameter scheduleId was null or undefined when calling schedule.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<ScheduleCityConf>(`${this.basePath}/cityConfig/${encodeURIComponent(String(cityId))}/schedules/${encodeURIComponent(String(scheduleId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get all schedules\n     * \n     * @param cityId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public schedules(cityId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<ScheduleCityConf>>;\n    public schedules(cityId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ScheduleCityConf>>>;\n    public schedules(cityId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ScheduleCityConf>>>;\n    public schedules(cityId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (cityId === null || cityId === undefined) {\n            throw new Error('Required parameter cityId was null or undefined when calling schedules.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<Array<ScheduleCityConf>>(`${this.basePath}/cityConfig/${encodeURIComponent(String(cityId))}/schedules`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get a segment\n     * \n     * @param cityId \n     * @param segmentId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public segment(cityId: number, segmentId: number, observe?: 'body', reportProgress?: boolean): Observable<SegmentConf>;\n    public segment(cityId: number, segmentId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SegmentConf>>;\n    public segment(cityId: number, segmentId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SegmentConf>>;\n    public segment(cityId: number, segmentId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (cityId === null || cityId === undefined) {\n            throw new Error('Required parameter cityId was null or undefined when calling segment.');\n        }\n        if (segmentId === null || segmentId === undefined) {\n            throw new Error('Required parameter segmentId was null or undefined when calling segment.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<SegmentConf>(`${this.basePath}/cityConfig/${encodeURIComponent(String(cityId))}/segments/${encodeURIComponent(String(segmentId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get all schedules\n     * \n     * @param cityId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public segments(cityId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<SegmentConf>>;\n    public segments(cityId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SegmentConf>>>;\n    public segments(cityId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SegmentConf>>>;\n    public segments(cityId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (cityId === null || cityId === undefined) {\n            throw new Error('Required parameter cityId was null or undefined when calling segments.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<Array<SegmentConf>>(`${this.basePath}/cityConfig/${encodeURIComponent(String(cityId))}/segments`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * MAAS API\n * This is the Mobility as a Service API\n *\n * OpenAPI spec version: 1.0.0\n * Contact: avalls@nexusgeographics.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs/Observable';\n\nimport { AppConfig } from '../model/appConfig';\nimport { IncidenceSubject } from '../model/incidenceSubject';\nimport { MaasConfiguration } from '../model/maasConfiguration';\nimport { Version } from '../model/version';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class ConfigurationService {\n\n    protected basePath = 'http://maas.nexusgeografics.com/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Add a subject\n     * \n     * @param authorization Token of authentication\n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public addSubject(authorization: string, body: IncidenceSubject, observe?: 'body', reportProgress?: boolean): Observable<IncidenceSubject>;\n    public addSubject(authorization: string, body: IncidenceSubject, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IncidenceSubject>>;\n    public addSubject(authorization: string, body: IncidenceSubject, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IncidenceSubject>>;\n    public addSubject(authorization: string, body: IncidenceSubject, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling addSubject.');\n        }\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling addSubject.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<IncidenceSubject>(`${this.basePath}/incidences`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get the configurationsfor the app\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public appInit(observe?: 'body', reportProgress?: boolean): Observable<AppConfig>;\n    public appInit(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AppConfig>>;\n    public appInit(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AppConfig>>;\n    public appInit(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<AppConfig>(`${this.basePath}/appInit`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get the configurations by city\n     * \n     * @param citiyId \n     * @param authorization Token of authentication\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public configurations(citiyId: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<Array<MaasConfiguration>>;\n    public configurations(citiyId: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<MaasConfiguration>>>;\n    public configurations(citiyId: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<MaasConfiguration>>>;\n    public configurations(citiyId: number, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (citiyId === null || citiyId === undefined) {\n            throw new Error('Required parameter citiyId was null or undefined when calling configurations.');\n        }\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling configurations.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<Array<MaasConfiguration>>\n        (`${this.basePath}/system/configurations/${encodeURIComponent(String(citiyId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete a incidence subject\n     * \n     * @param incidenceId \n     * @param authorization Token of authentication\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteSubject(incidenceId: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteSubject(incidenceId: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteSubject(incidenceId: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteSubject(incidenceId: number, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (incidenceId === null || incidenceId === undefined) {\n            throw new Error('Required parameter incidenceId was null or undefined when calling deleteSubject.');\n        }\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling deleteSubject.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}/incidences/${encodeURIComponent(String(incidenceId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get version details\n     * \n     * @param os \n     * @param version \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getVersionByOS(os: string, version: string, observe?: 'body', reportProgress?: boolean): Observable<Version>;\n    public getVersionByOS(os: string, version: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Version>>;\n    public getVersionByOS(os: string, version: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Version>>;\n    public getVersionByOS(os: string, version: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (os === null || os === undefined) {\n            throw new Error('Required parameter os was null or undefined when calling getVersionByOS.');\n        }\n        if (version === null || version === undefined) {\n            throw new Error('Required parameter version was null or undefined when calling getVersionByOS.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<Version>(`${this.basePath}/appVersions/${encodeURIComponent(String(os))}/${encodeURIComponent(String(version))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get OAM status. REVISAR\n     * \n     * @param authorization Token of authentication\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public status(authorization: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public status(authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public status(authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public status(authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling status.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/serviceStatus`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get a incidence subject\n     * \n     * @param incidenceId \n     * @param authorization Token of authentication\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public subject(incidenceId: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<IncidenceSubject>;\n    public subject(incidenceId: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IncidenceSubject>>;\n    public subject(incidenceId: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IncidenceSubject>>;\n    public subject(incidenceId: number, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (incidenceId === null || incidenceId === undefined) {\n            throw new Error('Required parameter incidenceId was null or undefined when calling subject.');\n        }\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling subject.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<IncidenceSubject>(`${this.basePath}/incidences/${encodeURIComponent(String(incidenceId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get all subjects\n     * \n     * @param authorization Token of authentication\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public subjects(authorization: string, observe?: 'body', reportProgress?: boolean): Observable<Array<IncidenceSubject>>;\n    public subjects(authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<IncidenceSubject>>>;\n    public subjects(authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<IncidenceSubject>>>;\n    public subjects(authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling subjects.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<Array<IncidenceSubject>>(`${this.basePath}/incidences`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Make a OAM test. REVISAR\n     * \n     * @param authorization Token of authentication\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public test(authorization: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public test(authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public test(authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public test(authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling test.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/testServices`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Udpate values\n     * \n     * @param citiyId \n     * @param authorization Token of authentication\n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateConfigurations(citiyId: number, authorization: string, body: MaasConfiguration, observe?: 'body', reportProgress?: boolean): Observable<MaasConfiguration>;\n    public updateConfigurations(citiyId: number, authorization: string, body: MaasConfiguration, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MaasConfiguration>>;\n    public updateConfigurations(citiyId: number, authorization: string, body: MaasConfiguration, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MaasConfiguration>>;\n    public updateConfigurations(citiyId: number, authorization: string, body: MaasConfiguration, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (citiyId === null || citiyId === undefined) {\n            throw new Error('Required parameter citiyId was null or undefined when calling updateConfigurations.');\n        }\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling updateConfigurations.');\n        }\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling updateConfigurations.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<MaasConfiguration>(`${this.basePath}/system/configurations/${encodeURIComponent(String(citiyId))}`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Edit incidence subject\n     * \n     * @param incidenceId \n     * @param authorization Token of authentication\n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateSubject(incidenceId: number, authorization: string, body: IncidenceSubject, observe?: 'body', reportProgress?: boolean): Observable<IncidenceSubject>;\n    public updateSubject(incidenceId: number, authorization: string, body: IncidenceSubject, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IncidenceSubject>>;\n    public updateSubject(incidenceId: number, authorization: string, body: IncidenceSubject, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IncidenceSubject>>;\n    public updateSubject(incidenceId: number, authorization: string, body: IncidenceSubject, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (incidenceId === null || incidenceId === undefined) {\n            throw new Error('Required parameter incidenceId was null or undefined when calling updateSubject.');\n        }\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling updateSubject.');\n        }\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling updateSubject.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<IncidenceSubject>(`${this.basePath}/incidences/${encodeURIComponent(String(incidenceId))}`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * MAAS API\n * This is the Mobility as a Service API\n *\n * OpenAPI spec version: 1.0.0\n * Contact: avalls@nexusgeographics.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional } from '@angular/core';\nimport {\n    HttpClient, HttpHeaders, HttpParams,\n    HttpResponse, HttpEvent\n} from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec } from '../encoder';\n\nimport { Observable } from 'rxjs/Observable';\n\nimport { CreditCardStatus } from '../model/creditCardStatus';\nimport { JuridicEntity } from '../model/juridicEntity';\nimport { ModifierOrigin } from '../model/modifierOrigin';\nimport { ModifierType } from '../model/modifierType';\nimport { NotificationType } from '../model/notificationType';\nimport { Statistics } from '../model/statistics';\n//import { ThirdUserStatus } from '../model/thirdUserStatus';\nimport { TicketStatus } from '../model/ticketStatus';\nimport { TicketType } from '../model/ticketType';\nimport { UserStatus } from '../model/userStatus';\nimport { ZoneType } from '../model/zoneType';\nimport { ActivityType } from '../model/activityType';\nimport { AgreementType } from '../model/agreementType';\nimport { PeriodicityType } from '../model/periodicityType';\n\n\n\n\nimport { BASE_PATH, COLLECTION_FORMATS } from '../variables';\nimport { Configuration } from '../configuration';\nimport { CurrentUserService } from 'app/services/current-user.service';\nimport { FUNCIONALITIES } from 'app/globalVariables/globalVariables';\n\n\n@Injectable()\nexport class DataService {\n\n    protected basePath = 'http://maas.nexusgeografics.com/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(\n        private curUser: CurrentUserService,\n        protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Creditcard Status\n     * \n     * @param authorization \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public creditcardStatus(authorization: string, observe?: 'body', reportProgress?: boolean): Observable<Array<CreditCardStatus>>;\n    public creditcardStatus(authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CreditCardStatus>>>;\n    public creditcardStatus(authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CreditCardStatus>>>;\n    public creditcardStatus(authorization: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling creditcardStatus.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<Array<CreditCardStatus>>(`${this.basePath}/creditcardStatus`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Return Activity Type\n     * \n     * @param locale Idioma\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public activityTypeGet(locale: string, observe?: 'body', reportProgress?: boolean): Observable<Array<ActivityType>>;\n    public activityTypeGet(locale: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ActivityType>>>;\n    public activityTypeGet(locale: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ActivityType>>>;\n    public activityTypeGet(locale: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n        if (locale === null || locale === undefined) {\n            throw new Error('Required parameter locale was null or undefined when calling activityTypeGet.');\n        }\n\n        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });\n        if (locale !== undefined && locale !== null) {\n            queryParameters = queryParameters.set('locale', <any>locale);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<Array<ActivityType>>(`${this.basePath}/activityType`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get all third user status\n     * \n     * @param authorization \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    /*public getAllThirdStatus(authorization: string, observe?: 'body', reportProgress?: boolean): Observable<ThirdUserStatus>;\n    public getAllThirdStatus(authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ThirdUserStatus>>;\n    public getAllThirdStatus(authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ThirdUserStatus>>;\n    public getAllThirdStatus(authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling getAllThirdStatus.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<ThirdUserStatus>(`${this.basePath}/thirdStatus`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }*/\n\n    /**\n     * Get all ticket status\n     * \n     * @param authorization \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getAllTicketStatus(authorization: string, observe?: 'body', reportProgress?: boolean): Observable<TicketStatus>;\n    public getAllTicketStatus(authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TicketStatus>>;\n    public getAllTicketStatus(authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TicketStatus>>;\n    public getAllTicketStatus(authorization: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling getAllTicketStatus.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<TicketStatus>(`${this.basePath}/ticketStatus`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get all ticket types\n     * \n     * @param authorization \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getAllTicketTypes(authorization: string, observe?: 'body', reportProgress?: boolean): Observable<Array<TicketType>>;\n    public getAllTicketTypes(authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TicketType>>;\n    public getAllTicketTypes(authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TicketType>>;\n    public getAllTicketTypes(authorization: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling getAllTicketTypes.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<TicketType>(`${this.basePath}/ticketTypes`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Returns all the zone types\n     * \n     * @param authorization \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getAllZoneTypes(authorization: string, observe?: 'body', reportProgress?: boolean): Observable<ZoneType[]>;\n    public getAllZoneTypes(authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ZoneType[]>>;\n    public getAllZoneTypes(authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ZoneType[]>>;\n    public getAllZoneTypes(authorization: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling getAllZoneTypes.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<ZoneType>(`${this.basePath}/zoneTypes`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get all cities\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getCities(filter: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<JuridicEntity>>;\n    public getCities(filter: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<JuridicEntity>>>;\n    public getCities(filter: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<JuridicEntity>>>;\n    public getCities(filter: boolean, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n        const observable = Observable.create((observer) => {\n            let headers = this.defaultHeaders;\n\n            // authentication (MaaS Token) required\n            if (this.configuration.accessToken) {\n                let accessToken = typeof this.configuration.accessToken === 'function'\n                    ? this.configuration.accessToken()\n                    : this.configuration.accessToken;\n                headers = headers.set('Authorization', 'Bearer ' + accessToken);\n            }\n    \n            // to determine the Accept header\n            let httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n            if (httpHeaderAcceptSelected != undefined) {\n                headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n            }\n    \n            // to determine the Content-Type header\n            let consumes: string[] = [\n                'application/json'\n            ];\n    \n            this.httpClient.get<JuridicEntity>(`${this.basePath}/cities`,\n                {\n                    withCredentials: this.configuration.withCredentials,\n                    headers: headers,\n                    observe: observe,\n                    reportProgress: reportProgress\n                }\n            ).subscribe((cities: any) => {\n                if (filter) {\n                    cities = cities.filter((city) => {\n                        const jurEntities = this.curUser.getUserMunicipis();\n                        if (jurEntities && jurEntities.length > 0) {\n                            let found = false;\n                            for (let i = 0; i < jurEntities.length && !found; i++) {\n                                found = jurEntities[i] === city.juridicId;\n                            }\n                            return found;\n                        } else {\n                            return true;\n                        }\n                    });\n                }\n\n                observer.next(cities);\n                observer.complete();\n            }, (err) => {\n                observer.error(err);\n            });\n        });\n\n        return observable;\n       \n    }\n\n    /**\n     * Get all the modifier origins\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public modifierOrigins(observe?: 'body', reportProgress?: boolean): Observable<Array<ModifierOrigin>>;\n    public modifierOrigins(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ModifierOrigin>>>;\n    public modifierOrigins(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ModifierOrigin>>>;\n    public modifierOrigins(observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<Array<ModifierOrigin>>(`${this.basePath}/modifierOrigins`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get all the modifiers types\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public modifierTypes(observe?: 'body', reportProgress?: boolean): Observable<Array<ModifierType>>;\n    public modifierTypes(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ModifierType>>>;\n    public modifierTypes(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ModifierType>>>;\n    public modifierTypes(observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<Array<ModifierType>>(`${this.basePath}/modifierTypes`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * /notificationTypes\n     * \n     * @param authorization \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public notificationTypes(authorization: string, observe?: 'body', reportProgress?: boolean): Observable<Array<NotificationType>>;\n    public notificationTypes(authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<NotificationType>>>;\n    public notificationTypes(authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<NotificationType>>>;\n    public notificationTypes(authorization: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling notificationTypes.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<Array<NotificationType>>(`${this.basePath}/notificationTypes`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Statistics data for the BO\n     * \n     * @param cityId Filter for the data. If not set the service returns all the data.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public statisticsData(cityId?: number, observe?: 'body', reportProgress?: boolean): Observable<Statistics>;\n    public statisticsData(cityId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Statistics>>;\n    public statisticsData(cityId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Statistics>>;\n    public statisticsData(cityId?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });\n        if (cityId !== undefined) {\n            queryParameters = queryParameters.set('cityId', <any>cityId);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<Statistics>(`${this.basePath}/statisticsStatus`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get user status\n     * \n     * @param authorization token\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public userStatus(authorization: string, observe?: 'body', reportProgress?: boolean): Observable<UserStatus>;\n    public userStatus(authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserStatus>>;\n    public userStatus(authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserStatus>>;\n    public userStatus(authorization: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling userStatus.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<UserStatus>(`${this.basePath}/userStatus`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n\n    /**\n   * Return all periodicites\n   * \n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n    public periodicity(observe?: 'body', reportProgress?: boolean): Observable<Array<PeriodicityType>>;\n    public periodicity(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<PeriodicityType>>>;\n    public periodicity(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<PeriodicityType>>>;\n    public periodicity(observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<Array<PeriodicityType>>(`${this.basePath}/periodicityTypes`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n\n    /**\n     * Return Activity Type\n     * \n     * @param locale Idioma\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public activityType(locale: string, observe?: 'body', reportProgress?: boolean): Observable<Array<ActivityType>>;\n    public activityType(locale: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ActivityType>>>;\n    public activityType(locale: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ActivityType>>>;\n    public activityType(locale: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n        if (locale === null || locale === undefined) {\n            throw new Error('Required parameter locale was null or undefined when calling activityType.');\n        }\n\n        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });\n        if (locale !== undefined && locale !== null) {\n            queryParameters = queryParameters.set('locale', <any>locale);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<Array<ActivityType>>(`${this.basePath}/activityType`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Agreements\n     * Return all Agreements\n     * @param locale Idioma\n     * @param authorization \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public agreements(locale: string, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<Array<AgreementType>>;\n    public agreements(locale: string, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<AgreementType>>>;\n    public agreements(locale: string, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<AgreementType>>>;\n    public agreements(locale: string, authorization: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n        if (locale === null || locale === undefined) {\n            throw new Error('Required parameter locale was null or undefined when calling agreements.');\n        }\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling agreements.');\n        }\n\n        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });\n        if (locale !== undefined && locale !== null) {\n            queryParameters = queryParameters.set('locale', <any>locale);\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<Array<AgreementType>>(`${this.basePath}/agreements`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n\n}\n","/**\n * Dum API\n * This is the DUM API\n *\n * OpenAPI spec version: 1.0.0\n * Contact: rbarbado@nexusgeographics.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs/Observable';\n\nimport { ApiError } from '../model/apiError';\nimport { Guild } from '../model/guild';\nimport { OAuthError } from '../model/oAuthError';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class GuildService {\n\n    protected basePath = 'http://dum.nexusgeografics.com/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n     /**\n     * Get gremis\n     * \n     * @param authorization \n     * @param dni \n     * @param cadConveni \n     * @param email \n     * @param nameContacte \n     * @param nameGremi \n     * @param permisDum \n     * @param permisParking \n     * @param telContact \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public guildGet(authorization: string, dni?: string, cadConveni?: string, email?: string, nameContacte?: string, idGremi?: number, permisDum?: boolean, permisParking?: boolean, telContact?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Guild>>;\n    public guildGet(authorization: string, dni?: string, cadConveni?: string, email?: string, nameContacte?: string, idGremi?: number, permisDum?: boolean, permisParking?: boolean, telContact?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Guild>>>;\n    public guildGet(authorization: string, dni?: string, cadConveni?: string, email?: string, nameContacte?: string, idGremi?: number, permisDum?: boolean, permisParking?: boolean, telContact?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Guild>>>;\n    public guildGet(authorization: string, dni?: string, cadConveni?: string, email?: string, nameContacte?: string, idGremi?: number, permisDum?: boolean, permisParking?: boolean, telContact?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling guildGet.');\n        }\n        \n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (dni !== undefined && dni !== null) {\n            queryParameters = queryParameters.set('dni', <any>dni);\n        }\n        if (cadConveni !== undefined && cadConveni !== null) {\n            queryParameters = queryParameters.set('cadConveni', <any>cadConveni);\n        }\n        if (email !== undefined && email !== null) {\n            queryParameters = queryParameters.set('email', <any>email);\n        }\n        if (nameContacte !== undefined && nameContacte !== null) {\n            queryParameters = queryParameters.set('nameContacte', <any>nameContacte);\n        }\n        if (idGremi !== undefined && idGremi !== null) {\n            queryParameters = queryParameters.set('idGremi', <any>idGremi);\n        }\n        if (permisDum !== undefined && permisDum !== null) {\n            queryParameters = queryParameters.set('permisDum', <any>permisDum);\n        }\n        if (permisParking !== undefined && permisParking !== null) {\n            queryParameters = queryParameters.set('permisParking', <any>permisParking);\n        }\n        if (telContact !== undefined && telContact !== null) {\n            queryParameters = queryParameters.set('telContact', <any>telContact);\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<Array<Guild>>(`${this.basePath}/guild`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete Guild\n     * Delete Guild\n     * @param guildId \n     * @param authorization Token of authentication\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public guildGuildIdDelete(guildId: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public guildGuildIdDelete(guildId: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public guildGuildIdDelete(guildId: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public guildGuildIdDelete(guildId: number, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (guildId === null || guildId === undefined) {\n            throw new Error('Required parameter guildId was null or undefined when calling guildGuildIdDelete.');\n        }\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling guildGuildIdDelete.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}/guild/${encodeURIComponent(String(guildId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Detailed Guild\n     * \n     * @param guildId \n     * @param authorization \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public guildGuildIdDetailedGet(guildId: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<Guild>;\n    public guildGuildIdDetailedGet(guildId: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Guild>>;\n    public guildGuildIdDetailedGet(guildId: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Guild>>;\n    public guildGuildIdDetailedGet(guildId: number, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (guildId === null || guildId === undefined) {\n            throw new Error('Required parameter guildId was null or undefined when calling guildGuildIdDetailedGet.');\n        }\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling guildGuildIdDetailedGet.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<Guild>(`${this.basePath}/guild/${encodeURIComponent(String(guildId))}/detailed`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update Guild\n     * Update Guild\n     * @param guildId \n     * @param authorization Token of authentication\n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public guildGuildIdPut(guildId: number, authorization: string, body: Guild, observe?: 'body', reportProgress?: boolean): Observable<Guild>;\n    public guildGuildIdPut(guildId: number, authorization: string, body: Guild, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Guild>>;\n    public guildGuildIdPut(guildId: number, authorization: string, body: Guild, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Guild>>;\n    public guildGuildIdPut(guildId: number, authorization: string, body: Guild, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (guildId === null || guildId === undefined) {\n            throw new Error('Required parameter guildId was null or undefined when calling guildGuildIdPut.');\n        }\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling guildGuildIdPut.');\n        }\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling guildGuildIdPut.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<Guild>(`${this.basePath}/guild/${encodeURIComponent(String(guildId))}`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Create Guild\n     * \n     * @param authorization \n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public guildPost(authorization: string, body: Guild, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public guildPost(authorization: string, body: Guild, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public guildPost(authorization: string, body: Guild, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public guildPost(authorization: string, body: Guild, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling guildPost.');\n        }\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling guildPost.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}/guild`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get gremis excel\n     * \n     * @param authorization \n     * @param dni NIF GREMI\n     * @param cadConveni Caducitat de conveni\n     * @param email Email gremi\n     * @param nameContacte Nom persona contacte\n     * @param nameGremi Nom gremi\n     * @param permisDUM \n     * @param permisParking \n     * @param telContact Telèfon persona contacte\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public guildXlsGet(authorization: string, dni?: string, cadConveni?: string, email?: string, nameContacte?: string, idGremi?: number, permisDUM?: boolean, permisParking?: boolean, telContact?: number, observe?: 'body', reportProgress?: boolean): Observable<Blob>;\n    public guildXlsGet(authorization: string, dni?: string, cadConveni?: string, email?: string, nameContacte?: string, idGremi?: number, permisDUM?: boolean, permisParking?: boolean, telContact?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;\n    public guildXlsGet(authorization: string, dni?: string, cadConveni?: string, email?: string, nameContacte?: string, idGremi?: number, permisDUM?: boolean, permisParking?: boolean, telContact?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;\n    public guildXlsGet(authorization: string, dni?: string, cadConveni?: string, email?: string, nameContacte?: string, idGremi?: number, permisDUM?: boolean, permisParking?: boolean, telContact?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling guildXlsGet.');\n        }\n\n\n\n\n\n\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (dni !== undefined && dni !== null) {\n            queryParameters = queryParameters.set('dni', <any>dni);\n        }\n        if (cadConveni !== undefined && cadConveni !== null) {\n            queryParameters = queryParameters.set('cadConveni', <any>cadConveni);\n        }\n        if (email !== undefined && email !== null) {\n            queryParameters = queryParameters.set('email', <any>email);\n        }\n        if (nameContacte !== undefined && nameContacte !== null) {\n            queryParameters = queryParameters.set('nameContacte', <any>nameContacte);\n        }\n        if (idGremi !== undefined && idGremi !== null) {\n            queryParameters = queryParameters.set('idGremi', <any>idGremi);\n        }\n        if (permisDUM !== undefined && permisDUM !== null) {\n            queryParameters = queryParameters.set('permisDUM', <any>permisDUM);\n        }\n        if (permisParking !== undefined && permisParking !== null) {\n            queryParameters = queryParameters.set('permisParking', <any>permisParking);\n        }\n        if (telContact !== undefined && telContact !== null) {\n            queryParameters = queryParameters.set('telContact', <any>telContact);\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<string>(`${this.basePath}/guild/xls`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress,\n                responseType : 'blob' as 'json'\n            }\n        );\n    }\n\n}\n","/**\n * Dum API\n * This is the DUM API\n *\n * OpenAPI spec version: 1.0.0\n * Contact: rbarbado@nexusgeographics.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional } from '@angular/core';\nimport {\n    HttpClient, HttpHeaders, HttpParams,\n    HttpResponse, HttpEvent\n} from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec } from '../encoder';\n\nimport { Observable } from 'rxjs/Observable';\n\nimport { GuildCard } from '../model/guildCard';\nimport { GuildCardCreate } from '../model/guildCardCreate';\nimport { GuildCardUpdate } from '../model/guildCardUpdate';\nimport { GuildCardStatus } from '../model/guildCardStatus';\nimport { GuildCardOperation } from '../model/guildCardOperation';\n\nimport { BASE_PATH, COLLECTION_FORMATS } from '../variables';\nimport { Configuration } from '../configuration';\n\n\n@Injectable()\nexport class GuildCardsService {\n\n    protected basePath = 'http://dum.nexusgeografics.com/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n    * Get All cards\n    * \n    * @param authorization \n    * @param guildId \n    * @param cardNumber \n    * @param cardNumberFrom \n    * @param cardNumberTo \n    * @param guildMember \n    * @param dniGuildMember \n    * @param dateCreatedFrom \n    * @param dateCreatedTo \n    * @param dateAssignGuildFrom \n    * @param dateAssignGuildTo \n    * @param dateAssignGuildMemberFrom \n    * @param dateAssignGuildMemberTo \n    * @param assignedGuild \n    * @param assignedGuildMember \n\t* @param guildCardStatus\n    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n    * @param reportProgress flag to report request and response progress.\n    */\n    public guildCardsGet(authorization: string, guildId?: number, cardNumber?: number, cardNumberFrom?: number, cardNumberTo?: number, guildMember?: string, dniGuildMember?: string, dateCreatedFrom?: Date, dateCreatedTo?: Date, dateAssignGuildFrom?: Date, dateAssignGuildTo?: Date, dateAssignGuildMemberFrom?: Date, dateAssignGuildMemberTo?: Date,  guildCardStatusId?: number, assignedGuild?: boolean, assignedGuildMember?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<GuildCard>>;\n    public guildCardsGet(authorization: string, guildId?: number, cardNumber?: number, cardNumberFrom?: number, cardNumberTo?: number, guildMember?: string, dniGuildMember?: string, dateCreatedFrom?: Date, dateCreatedTo?: Date, dateAssignGuildFrom?: Date, dateAssignGuildTo?: Date, dateAssignGuildMemberFrom?: Date, dateAssignGuildMemberTo?: Date,  guildCardStatusId?: number, assignedGuild?: boolean, assignedGuildMember?: boolean,  observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<GuildCard>>>;\n    public guildCardsGet(authorization: string, guildId?: number, cardNumber?: number, cardNumberFrom?: number, cardNumberTo?: number, guildMember?: string, dniGuildMember?: string, dateCreatedFrom?: Date, dateCreatedTo?: Date, dateAssignGuildFrom?: Date, dateAssignGuildTo?: Date, dateAssignGuildMemberFrom?: Date, dateAssignGuildMemberTo?: Date,  guildCardStatusId?: number, assignedGuild?: boolean, assignedGuildMember?: boolean,  observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<GuildCard>>>;\n    public guildCardsGet(authorization: string, guildId?: number, cardNumber?: number, cardNumberFrom?: number, cardNumberTo?: number, guildMember?: string, dniGuildMember?: string, dateCreatedFrom?: Date, dateCreatedTo?: Date, dateAssignGuildFrom?: Date, dateAssignGuildTo?: Date, dateAssignGuildMemberFrom?: Date, dateAssignGuildMemberTo?: Date,  guildCardStatusId?: number, assignedGuild?: boolean, assignedGuildMember?: boolean,  observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling guildCardsGet.');\n        }\n\n        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });\n        if (guildId !== undefined && guildId !== null) {\n            queryParameters = queryParameters.set('guildId', <any>guildId);\n        }\n        if (cardNumber !== undefined && cardNumber !== null) {\n            queryParameters = queryParameters.set('cardNumber', <any>cardNumber);\n        }\n        if (cardNumberFrom !== undefined && cardNumberFrom !== null) {\n            queryParameters = queryParameters.set('cardNumberFrom', <any>cardNumberFrom);\n        }\n        if (cardNumberTo !== undefined && cardNumberTo !== null) {\n            queryParameters = queryParameters.set('cardNumberTo', <any>cardNumberTo);\n        }\n        if (guildMember !== undefined && guildMember !== null) {\n            queryParameters = queryParameters.set('guildMember', <any>guildMember);\n        }\n        if (dniGuildMember !== undefined && dniGuildMember !== null) {\n            queryParameters = queryParameters.set('dniGuildMember', <any>dniGuildMember);\n        }\n        if (dateCreatedFrom !== undefined && dateCreatedFrom !== null) {\n            queryParameters = queryParameters.set('dateCreatedFrom', <any>dateCreatedFrom.toISOString());\n        }\n        if (dateCreatedTo !== undefined && dateCreatedTo !== null) {\n            queryParameters = queryParameters.set('dateCreatedTo', <any>dateCreatedTo.toISOString());\n        }\n        if (dateAssignGuildFrom !== undefined && dateAssignGuildFrom !== null) {\n            queryParameters = queryParameters.set('dateAssignGuildFrom', <any>dateAssignGuildFrom.toISOString());\n        }\n        if (dateAssignGuildTo !== undefined && dateAssignGuildTo !== null) {\n            queryParameters = queryParameters.set('dateAssignGuildTo', <any>dateAssignGuildTo.toISOString());\n        }\n        if (dateAssignGuildMemberFrom !== undefined && dateAssignGuildMemberFrom !== null) {\n            queryParameters = queryParameters.set('dateAssignGuildMemberFrom', <any>dateAssignGuildMemberFrom.toISOString());\n        }\n        if (dateAssignGuildMemberTo !== undefined && dateAssignGuildMemberTo !== null) {\n            queryParameters = queryParameters.set('dateAssignGuildMemberTo', <any>dateAssignGuildMemberTo.toISOString());\n        }\n        if (assignedGuild !== undefined && assignedGuild !== null) {\n            queryParameters = queryParameters.set('assignedGuild', <any>assignedGuild);\n        }\n        if (assignedGuildMember !== undefined && assignedGuildMember !== null) {\n            queryParameters = queryParameters.set('assignedGuildMember', <any>assignedGuildMember);\n        }\n\t\tif (guildCardStatusId !== undefined && guildCardStatusId !== null) {\n            queryParameters = queryParameters.set('guildCardStatusId', <any>guildCardStatusId);\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<Array<GuildCard>>(`${this.basePath}/guild-cards`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Remove Assign\n     * Remove Assign\n     * @param id \n     * @param authorization \n     * @param memberId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public guildCardsIdAssignDelete(id: number, authorization: string, memberId?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public guildCardsIdAssignDelete(id: number, authorization: string, memberId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public guildCardsIdAssignDelete(id: number, authorization: string, memberId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public guildCardsIdAssignDelete(id: number, authorization: string, memberId?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling guildCardsIdAssignDelete.');\n        }\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling guildCardsIdAssignDelete.');\n        }\n\n\n        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });\n        if (memberId !== undefined && memberId !== null) {\n            queryParameters = queryParameters.set('memberId', <any>memberId);\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}/guild-cards/${encodeURIComponent(String(id))}/assign`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Assign Card\n     * \n     * @param id \n     * @param authorization \n     * @param memberId \n     * @param guildId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public guildCardsIdAssignPut(id: number, authorization: string, memberId?: number, guildId?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public guildCardsIdAssignPut(id: number, authorization: string, memberId?: number, guildId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public guildCardsIdAssignPut(id: number, authorization: string, memberId?: number, guildId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public guildCardsIdAssignPut(id: number, authorization: string, memberId?: number, guildId?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling guildCardsIdAssignPut.');\n        }\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling guildCardsIdAssignPut.');\n        }\n\n\n\n        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });\n        if (memberId !== undefined && memberId !== null) {\n            queryParameters = queryParameters.set('memberId', <any>memberId);\n        }\n        if (guildId !== undefined && guildId !== null) {\n            queryParameters = queryParameters.set('guildId', <any>guildId);\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.put<any>(`${this.basePath}/guild-cards/${encodeURIComponent(String(id))}/assign`,\n            null,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n\n /**\n     * Assign Card\n     * \n     * @param id \n     * @param authorization \n     * @param memberId \n     * @param guildId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public guildCardsMassEditPut(id: number, authorization: string, memberId?: number, guildId?: number, statusId?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public guildCardsMassEditPut(id: number, authorization: string, memberId?: number, guildId?: number, statusId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public guildCardsMassEditPut(id: number, authorization: string, memberId?: number, guildId?: number, statusId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public guildCardsMassEditPut(id: number, authorization: string, memberId?: number, guildId?: number, statusId?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling guildCardsIdAssignPut.');\n        }\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling guildCardsIdAssignPut.');\n        }\n\n\n\n        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });\n        if (memberId !== undefined && memberId !== null) {\n            queryParameters = queryParameters.set('memberId', <any>memberId);\n        }\n        if (guildId !== undefined && guildId !== null) {\n            queryParameters = queryParameters.set('guildId', <any>guildId);\n        }\n\t\tif (statusId !== undefined && statusId !== null) {\n            queryParameters = queryParameters.set('statusId', <any>statusId);\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.put<any>(`${this.basePath}/guild-cards/${encodeURIComponent(String(id))}/massEdit`,\n            null,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n\n    /**\n     * Delete card\n     * \n     * @param id \n     * @param authorization \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public guildCardsIdDelete(id: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public guildCardsIdDelete(id: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public guildCardsIdDelete(id: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public guildCardsIdDelete(id: number, authorization: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling guildCardsIdDelete.');\n        }\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling guildCardsIdDelete.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}/guild-cards/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Detailed card\n     * \n     * @param id \n     * @param authorization \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public guildCardsIdDetailedGet(id: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<GuildCard>;\n    public guildCardsIdDetailedGet(id: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GuildCard>>;\n    public guildCardsIdDetailedGet(id: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GuildCard>>;\n    public guildCardsIdDetailedGet(id: number, authorization: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling guildCardsIdDetailedGet.');\n        }\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling guildCardsIdDetailedGet.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<GuildCard>(`${this.basePath}/guild-cards/${encodeURIComponent(String(id))}/detailed`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update card\n     * \n     * @param id \n     * @param authorization \n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public guildCardsIdPut(id: number, authorization: string, body: GuildCardUpdate, observe?: 'body', reportProgress?: boolean): Observable<GuildCard>;\n    public guildCardsIdPut(id: number, authorization: string, body: GuildCardUpdate, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GuildCard>>;\n    public guildCardsIdPut(id: number, authorization: string, body: GuildCardUpdate, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GuildCard>>;\n    public guildCardsIdPut(id: number, authorization: string, body: GuildCardUpdate, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling guildCardsIdPut.');\n        }\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling guildCardsIdPut.');\n        }\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling guildCardsIdPut.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<GuildCard>(`${this.basePath}/guild-cards/${encodeURIComponent(String(id))}`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Create card\n     * \n     * @param authorization \n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public guildCardsPost(authorization: string, body: GuildCardCreate, observe?: 'body', reportProgress?: boolean): Observable<Array<GuildCard>>;\n    public guildCardsPost(authorization: string, body: GuildCardCreate, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<GuildCard>>>;\n    public guildCardsPost(authorization: string, body: GuildCardCreate, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<GuildCard>>>;\n    public guildCardsPost(authorization: string, body: GuildCardCreate, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling guildCardsPost.');\n        }\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling guildCardsPost.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<Array<GuildCard>>(`${this.basePath}/guild-cards`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n    * Get All cards\n    * Get excel cards. Accessible only from BO and ZU. \n    * @param authorization \n    * @param guildId \n    * @param cardNumber \n    * @param cardNumberFrom \n    * @param cardNumberTo \n    * @param guildMember Name of the guild member\n    * @param dniGuildMember \n    * @param dateCreatedFrom \n    * @param dateCreatedTo \n    * @param dateAssignGuildFrom \n    * @param dateAssignGuildTo \n    * @param dateAssignGuildMemberFrom \n    * @param dateAssignGuildMemberTo \n    * @param assignedGuild Pot haver-hi 3 opcions: Si (true), No (false), Tots (null)\n    * @param assignedMember Pot haver-hi 3 opcions: Si (true), No (false), Tots (null)\n    * @param locale Locale used to translate headers and i18n data\n    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n    * @param reportProgress flag to report request and response progress.\n\t* @param guildCardStatus\n    */\n    public guildCardsXlsGet(authorization: string, guildId?: number, cardNumber?: number, cardNumberFrom?: number, cardNumberTo?: number, guildMember?: string, dniGuildMember?: string, dateCreatedFrom?: Date, dateCreatedTo?: Date, dateAssignGuildFrom?: Date, dateAssignGuildTo?: Date, dateAssignGuildMemberFrom?: Date, dateAssignGuildMemberTo?: Date, assignedGuild?: boolean, assignedMember?: boolean, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<Blob>;\n    public guildCardsXlsGet(authorization: string, guildId?: number, cardNumber?: number, cardNumberFrom?: number, cardNumberTo?: number, guildMember?: string, dniGuildMember?: string, dateCreatedFrom?: Date, dateCreatedTo?: Date, dateAssignGuildFrom?: Date, dateAssignGuildTo?: Date, dateAssignGuildMemberFrom?: Date, dateAssignGuildMemberTo?: Date, assignedGuild?: boolean, assignedMember?: boolean, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;\n    public guildCardsXlsGet(authorization: string, guildId?: number, cardNumber?: number, cardNumberFrom?: number, cardNumberTo?: number, guildMember?: string, dniGuildMember?: string, dateCreatedFrom?: Date, dateCreatedTo?: Date, dateAssignGuildFrom?: Date, dateAssignGuildTo?: Date, dateAssignGuildMemberFrom?: Date, dateAssignGuildMemberTo?: Date, assignedGuild?: boolean, assignedMember?: boolean, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;\n    public guildCardsXlsGet(authorization: string, guildId?: number, cardNumber?: number, cardNumberFrom?: number, cardNumberTo?: number, guildMember?: string, dniGuildMember?: string, dateCreatedFrom?: Date, dateCreatedTo?: Date, dateAssignGuildFrom?: Date, dateAssignGuildTo?: Date, dateAssignGuildMemberFrom?: Date, dateAssignGuildMemberTo?: Date, assignedGuild?: boolean, assignedMember?: boolean, locale?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling guildCardsXlsGet.');\n        }\n\n        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });\n        if (guildId !== undefined && guildId !== null) {\n            queryParameters = queryParameters.set('guildId', <any>guildId);\n        }\n        if (cardNumber !== undefined && cardNumber !== null) {\n            queryParameters = queryParameters.set('cardNumber', <any>cardNumber);\n        }\n        if (cardNumberFrom !== undefined && cardNumberFrom !== null) {\n            queryParameters = queryParameters.set('cardNumberFrom', <any>cardNumberFrom);\n        }\n        if (cardNumberTo !== undefined && cardNumberTo !== null) {\n            queryParameters = queryParameters.set('cardNumberTo', <any>cardNumberTo);\n        }\n        if (guildMember !== undefined && guildMember !== null) {\n            queryParameters = queryParameters.set('guildMember', <any>guildMember);\n        }\n        if (dniGuildMember !== undefined && dniGuildMember !== null) {\n            queryParameters = queryParameters.set('dniGuildMember', <any>dniGuildMember);\n        }\n        if (dateCreatedFrom !== undefined && dateCreatedFrom !== null) {\n            queryParameters = queryParameters.set('dateCreatedFrom', <any>dateCreatedFrom.toISOString());\n        }\n        if (dateCreatedTo !== undefined && dateCreatedTo !== null) {\n            queryParameters = queryParameters.set('dateCreatedTo', <any>dateCreatedTo.toISOString());\n        }\n        if (dateAssignGuildFrom !== undefined && dateAssignGuildFrom !== null) {\n            queryParameters = queryParameters.set('dateAssignGuildFrom', <any>dateAssignGuildFrom.toISOString());\n        }\n        if (dateAssignGuildTo !== undefined && dateAssignGuildTo !== null) {\n            queryParameters = queryParameters.set('dateAssignGuildTo', <any>dateAssignGuildTo.toISOString());\n        }\n        if (dateAssignGuildMemberFrom !== undefined && dateAssignGuildMemberFrom !== null) {\n            queryParameters = queryParameters.set('dateAssignGuildMemberFrom', <any>dateAssignGuildMemberFrom.toISOString());\n        }\n        if (dateAssignGuildMemberTo !== undefined && dateAssignGuildMemberTo !== null) {\n            queryParameters = queryParameters.set('dateAssignGuildMemberTo', <any>dateAssignGuildMemberTo.toISOString());\n        }\n        if (assignedGuild !== undefined && assignedGuild !== null) {\n            queryParameters = queryParameters.set('assignedGuild', <any>assignedGuild);\n        }\n        if (assignedMember !== undefined && assignedMember !== null) {\n            queryParameters = queryParameters.set('assignedMember', <any>assignedMember);\n        }\n        if (locale !== undefined && locale !== null) {\n            queryParameters = queryParameters.set('locale', <any>locale);\n        }\n\n\t\t\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        return this.httpClient.get<Array<GuildCard>>(`${this.basePath}/guild-cards/xls`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress,\n                responseType: 'blob' as 'json'\n            }\n        );\n    }\n\n\tpublic guildCardStatusGet(authorization: string, locale: string, observe?: 'body', reportProgress?: boolean): Observable<Array<GuildCardStatus>>;\n    public guildCardStatusGet(authorization: string, locale: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<GuildCardStatus>>>;\n    public guildCardStatusGet(authorization: string, locale: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<GuildCardStatus>>>;\n    public guildCardStatusGet(authorization: string, locale: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling guildCardStatus.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (locale !== undefined && locale !== null) {\n            queryParameters = queryParameters.set('locale', <any>locale);\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<Array<GuildCardStatus>>(`${this.basePath}/guild-cards/status`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n\n/**\n     * guildCardUpdate\n     * update d&#39;una GuildCard\n     * @param authorization \n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public guildCardUpdate(authorization: string, id: number, status: number, observe?: 'body', reportProgress?: boolean): Observable<boolean>;\n    public guildCardUpdate(authorization: string, id: number, status: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;\n    public guildCardUpdate(authorization: string, id: number, status: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;\n    public guildCardUpdate(authorization: string, id: number, status: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling guildCardUpdate.');\n        }\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling guildCardUpdate.');\n        }\n\n\t\tif (status === null || status === undefined) {\n            throw new Error('Required parameter status was null or undefined when calling guildCardUpdate.');\n        }\t\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (id !== undefined && id !== null) {\n            queryParameters = queryParameters.set('id', <any>id);\n        }\n\t\tif (status !== undefined && id!== null) {\n\t\t\tqueryParameters = queryParameters.set('status',<any>status);\n\t\t}\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.put<boolean>(`${this.basePath}/guild-cards/update`,\n            null,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n\n\t}\n\t\n\t\n\t /**\n     * operationsList\n     * \n     * @param locale \n     * @param authorization \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public operationsList(authorization: string, guildId?: number, cardId?: number, cardNumber?: number, dateCreated?: Date, type?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<GuildCardOperation>>;\n    public operationsList(authorization: string, guildId?: number, cardId?: number, cardNumber?: number, dateCreated?: Date, type?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<GuildCardOperation>>>;\n    public operationsList(authorization: string, guildId?: number, cardId?: number, cardNumber?: number, dateCreated?: Date, type?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<GuildCardOperation>>>;\n    public operationsList(authorization: string, guildId?: number, cardId?: number, cardNumber?: number, dateCreated?: Date, type?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n       /* if (locale === null || locale === undefined) {\n            throw new Error('Required parameter locale was null or undefined when calling operationsList.');\n        }*/\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling operationsList.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n\t\tif (guildId !== undefined && guildId !== null) {\n            queryParameters = queryParameters.set('guildId', <any>guildId);\n        }\n\t\tif (cardId !== undefined && cardId !== null) {\n            queryParameters = queryParameters.set('cardId', <any>cardId);\n        }\n        if (cardNumber !== undefined && cardNumber !== null) {\n            queryParameters = queryParameters.set('cardNumber', <any>cardNumber);\n        }\n        if (dateCreated !== undefined && dateCreated !== null) {\n            queryParameters = queryParameters.set('dateCreated', <any>dateCreated);\n        }\n        if (type !== undefined && type !== null) {\n            queryParameters = queryParameters.set('type', <any>type);\n\t\t}\n\t\t\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<Array<GuildCardOperation>>(`${this.basePath}/guild-cards/list-operations`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n\n/**\n    * Get All cards\n    * Get excel cards. Accessible only from BO and ZU. \n    * @param authorization \n    * @param guildId \n\t* @param cardId\n    * @param cardNumber \n    * @param dateCreated\n    * @param parkingCode\n    * @param locale Locale used to translate headers and i18n data\n    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n    * @param reportProgress flag to report request and response progress.\n\t* @param guildCardStatus\n    */\n    public guildCardsOperationsXlsGet(authorization: string, guildId?: number, cardId?: number, cardNumber?: number, dateCreated?: Date, type?: string, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<Blob>;\n    public guildCardsOperationsXlsGet(authorization: string, guildId?: number, cardId?: number, cardNumber?: number, dateCreated?: Date, type?: string, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;\n    public guildCardsOperationsXlsGet(authorization: string, guildId?: number, cardId?: number, cardNumber?: number, dateCreated?: Date, type?: string, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;\n    public guildCardsOperationsXlsGet(authorization: string, guildId?: number, cardId?: number, cardNumber?: number, dateCreated?: Date, type?: string, locale?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling guildCardsXlsGet.');\n        }\n\n        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });\n        if (guildId !== undefined && guildId !== null) {\n            queryParameters = queryParameters.set('guildId', <any>guildId);\n        }\n        if (cardNumber !== undefined && cardNumber !== null) {\n            queryParameters = queryParameters.set('cardNumber', <any>cardNumber);\n        }\n        if (cardId !== undefined && cardId !== null) {\n            queryParameters = queryParameters.set('cardId', <any>cardId);\n        }\n  \n        if (dateCreated !== undefined && dateCreated !== null) {\n            queryParameters = queryParameters.set('dateCreated', <any>dateCreated.toISOString());\n        }\n        \n        if (type !== undefined && type !== null) {\n            queryParameters = queryParameters.set('type', <any>type);\n        }\n        if (locale !== undefined && locale !== null) {\n            queryParameters = queryParameters.set('locale', <any>locale);\n        }\n\n\t\t\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        return this.httpClient.get<Array<GuildCard>>(`${this.basePath}/guild-cards/operationsXls`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress,\n                responseType: 'blob' as 'json'\n            }\n        );\n    }\n\t\n}\n","/**\n * Dum API\n * This is the DUM API\n *\n * OpenAPI spec version: 1.0.0\n * Contact: kfiertek@nexusgeographics.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs/Observable';\n\nimport { ApiError } from '../model/apiError';\nimport { DocumentGuildMember } from '../model/documentGuildMember';\nimport { GuildMember } from '../model/guildMember';\nimport { OAuthError } from '../model/oAuthError';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\nimport { GuildMemberType } from '../model/guildMemberType';\n\n\n@Injectable()\nexport class GuildMemberService {\n\n    protected basePath = 'http://dum.nexusgeografics.com/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Create Member\n     * \n     * @param authorization Bearer 9fa949a2-209f-4b57-8691-3bae5c6bc9cb\n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createGuildMember(authorization: string, body: GuildMember, observe?: 'body', reportProgress?: boolean): Observable<GuildMember>;\n    public createGuildMember(authorization: string, body: GuildMember, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GuildMember>>;\n    public createGuildMember(authorization: string, body: GuildMember, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GuildMember>>;\n    public createGuildMember(authorization: string, body: GuildMember, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling createGuildMember.');\n        }\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling createGuildMember.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<GuildMember>(`${this.basePath}/guild-member`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Post Document Member\n     * \n     * @param memberId \n     * @param authorization \n     * @param file \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createGuildMemberDoc(memberId: number, authorization: string, file: Blob, observe?: 'body', reportProgress?: boolean): Observable<DocumentGuildMember>;\n    public createGuildMemberDoc(memberId: number, authorization: string, file: Blob, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DocumentGuildMember>>;\n    public createGuildMemberDoc(memberId: number, authorization: string, file: Blob, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DocumentGuildMember>>;\n    public createGuildMemberDoc(memberId: number, authorization: string, file: Blob, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (memberId === null || memberId === undefined) {\n            throw new Error('Required parameter memberId was null or undefined when calling createGuildMemberDoc.');\n        }\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling createGuildMemberDoc.');\n        }\n\n        if (file === null || file === undefined) {\n            throw new Error('Required parameter file was null or undefined when calling createGuildMemberDoc.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/x-www-form-urlencoded'\n        ];\n\n        const canConsumeForm = this.canConsumeForm(consumes);\n\n        let formParams: { append(param: string, value: any): void; };\n        let useForm = false;\n        let convertFormParamsToString = false;\n        // use FormData to transmit files using content-type \"multipart/form-data\"\n        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data\n        useForm = canConsumeForm;\n        if (useForm) {\n            formParams = new FormData();\n        } else {\n            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        }\n\n        if (file !== undefined) {\n            formParams = formParams.append('file', <any>file) || formParams;\n        }\n\n        return this.httpClient.post<DocumentGuildMember>(`${this.basePath}/guild-member/${encodeURIComponent(String(memberId))}/document`,\n            convertFormParamsToString ? formParams.toString() : formParams,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Member detailed\n     * \n     * @param memberId \n     * @param authorization Bearer 9fa949a2-209f-4b57-8691-3bae5c6bc9cb\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteGuildMember(memberId: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteGuildMember(memberId: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteGuildMember(memberId: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteGuildMember(memberId: number, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (memberId === null || memberId === undefined) {\n            throw new Error('Required parameter memberId was null or undefined when calling deleteGuildMember.');\n        }\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling deleteGuildMember.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}/guild-member/${encodeURIComponent(String(memberId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete Document Member\n     * \n     * @param memberId \n     * @param authorization \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteGuildMemberDoc(memberId: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteGuildMemberDoc(memberId: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteGuildMemberDoc(memberId: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteGuildMemberDoc(memberId: number, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (memberId === null || memberId === undefined) {\n            throw new Error('Required parameter memberId was null or undefined when calling deleteGuildMemberDoc.');\n        }\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling deleteGuildMemberDoc.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}/guild-member/${encodeURIComponent(String(memberId))}/document`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n   /**\n     * Get all Member\n     * \n     * @param authorization \n     * @param name \n     * @param email \n     * @param nif \n     * @param guildId If is a guild member is required\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public guildMember(authorization: string, name?: string, email?: string, nif?: string, guildId?: number, idMember?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<GuildMember>>;\n    public guildMember(authorization: string, name?: string, email?: string, nif?: string, guildId?: number, idMember?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<GuildMember>>>;\n    public guildMember(authorization: string, name?: string, email?: string, nif?: string, guildId?: number, idMember?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<GuildMember>>>;\n    public guildMember(authorization: string, name?: string, email?: string, nif?: string, guildId?: number, idMember?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling guildMember.');\n        }\n\n\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (name !== undefined && name !== null && name !== '') {\n            queryParameters = queryParameters.set('name', <any>name);\n        }\n        if (email !== undefined && email !== null && email !== '') {\n            queryParameters = queryParameters.set('email', <any>email);\n        }\n        if (nif !== undefined && nif !== null && nif !== '') {\n            queryParameters = queryParameters.set('nif', <any>nif);\n        }\n        if (guildId !== undefined && guildId !== null) {\n            queryParameters = queryParameters.set('guildId', <any>guildId);\n        }\n        if (idMember !== undefined && idMember !== null) {\n            queryParameters = queryParameters.set('idMember', <any>idMember);\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<Array<GuildMember>>(`${this.basePath}/guild-member`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n\n    /**\n     * Get all members\n     * Get all members with Guild Id \n     * @param guildId \n     * @param authorization \n     * @param name Name the member\n     * @param email Email the member\n     * @param nif DNI o NIE the member\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public guildMemberAllByGuild(guildId: number, authorization: string, name?: string, email?: string, nif?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<GuildMember>>;\n    public guildMemberAllByGuild(guildId: number, authorization: string, name?: string, email?: string, nif?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<GuildMember>>>;\n    public guildMemberAllByGuild(guildId: number, authorization: string, name?: string, email?: string, nif?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<GuildMember>>>;\n    public guildMemberAllByGuild(guildId: number, authorization: string, name?: string, email?: string, nif?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (guildId === null || guildId === undefined) {\n            throw new Error('Required parameter guildId was null or undefined when calling guildMemberAllByGuild.');\n        }\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling guildMemberAllByGuild.');\n        }\n\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (name !== undefined && name !== null) {\n            queryParameters = queryParameters.set('name', <any>name);\n        }\n        if (email !== undefined && email !== null) {\n            queryParameters = queryParameters.set('email', <any>email);\n        }\n        if (nif !== undefined && nif !== null) {\n            queryParameters = queryParameters.set('nif', <any>nif);\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<Array<GuildMember>>(`${this.basePath}/guild-member?guildId=${encodeURIComponent(String(guildId))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n\n    /**\n     * guildMembersByGuild\n     * \n     * @param guildId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public guildMembersByGuild(guildId: number, authorization: string,  observe?: 'body', reportProgress?: boolean): Observable<Array<GuildMember>>;\n    public guildMembersByGuild(guildId: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<GuildMember>>>;\n    public guildMembersByGuild(guildId: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<GuildMember>>>;\n    public guildMembersByGuild(guildId: number, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (guildId === null || guildId === undefined) {\n            throw new Error('Required parameter guildId was null or undefined when calling guildMembersByGuild.');\n        }\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling guildMember.');\n        }\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (guildId !== undefined && guildId !== null) {\n            queryParameters = queryParameters.set('guildId', <any>guildId);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<Array<string>>(`${this.basePath}/guild-member/members/`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Member detailed\n     * \n     * @param memberId \n     * @param authorization \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public guildMemberDetailed(memberId: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<GuildMember>;\n    public guildMemberDetailed(memberId: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GuildMember>>;\n    public guildMemberDetailed(memberId: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GuildMember>>;\n    public guildMemberDetailed(memberId: number, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (memberId === null || memberId === undefined) {\n            throw new Error('Required parameter memberId was null or undefined when calling guildMemberDetailed.');\n        }\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling guildMemberDetailed.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<GuildMember>(`${this.basePath}/guild-member/${encodeURIComponent(String(memberId))}/detailed`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get Document Member\n     * \n     * @param memberId \n     * @param authorization \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public guildMemberDoc(memberId: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<DocumentGuildMember>;\n    public guildMemberDoc(memberId: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DocumentGuildMember>>;\n    public guildMemberDoc(memberId: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DocumentGuildMember>>;\n    public guildMemberDoc(memberId: number, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (memberId === null || memberId === undefined) {\n            throw new Error('Required parameter memberId was null or undefined when calling guildMemberDoc.');\n        }\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling guildMemberDoc.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<DocumentGuildMember>(`${this.basePath}/guild-member/${encodeURIComponent(String(memberId))}/document`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get Member not have card\n     * \n     * @param guildId \n     * @param authorization \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public guildMemberNotCard(guildId: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<Array<GuildMember>>;\n    public guildMemberNotCard(guildId: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<GuildMember>>>;\n    public guildMemberNotCard(guildId: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<GuildMember>>>;\n    public guildMemberNotCard(guildId: number, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (guildId === null || guildId === undefined) {\n            throw new Error('Required parameter guildId was null or undefined when calling guildMemberNotCard.');\n        }\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling guildMemberNotCard.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<Array<GuildMember>>(`${this.basePath}/guild-member/${encodeURIComponent(String(guildId))}/notCard`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n     /**\n     * Get Type member\n     * Return all type member\n     * @param locale Idioma\n     * @param authorization \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public guildMemberType(locale: string, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<Array<GuildMemberType>>;\n    public guildMemberType(locale: string, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<GuildMemberType>>>;\n    public guildMemberType(locale: string, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<GuildMemberType>>>;\n    public guildMemberType(locale: string, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (locale === null || locale === undefined) {\n            throw new Error('Required parameter locale was null or undefined when calling guildMemberType.');\n        }\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling guildMemberType.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (locale !== undefined && locale !== null) {\n            queryParameters = queryParameters.set('locale', <any>locale);\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<Array<GuildMemberType>>(`${this.basePath}/guild-member/type`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n\n /**\n     * Get all members\n     * Get all members with Guild Id \n     * @param authorization \n     * @param name Name the member\n     * @param email Email the member\n     * @param nif DNI o NIE the member\n     * @param guildId In case of guild searching\n     * @param juridicName \n     * @param locale Locale used to translate headers and i18n data.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public guildMemberXls(authorization: string, name?: string, email?: string, nif?: string, guildId?: number, idMember?: number, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<Blob>;\n    public guildMemberXls(authorization: string, name?: string, email?: string, nif?: string, guildId?: number, idMember?: number, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;\n    public guildMemberXls(authorization: string, name?: string, email?: string, nif?: string, guildId?: number, idMember?: number, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;\n    public guildMemberXls(authorization: string, name?: string, email?: string, nif?: string, guildId?: number, idMember?: number, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling guildMemberXls.');\n        }\n\n\n\n\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (name !== undefined && name !== null) {\n            queryParameters = queryParameters.set('name', <any>name);\n        }\n        if (email !== undefined && email !== null) {\n            queryParameters = queryParameters.set('email', <any>email);\n        }\n        if (nif !== undefined && nif !== null) {\n            queryParameters = queryParameters.set('nif', <any>nif);\n        }\n        if (guildId !== undefined && guildId !== null) {\n            queryParameters = queryParameters.set('guildId', <any>guildId);\n        }\n        if (idMember !== undefined && idMember !== null) {\n            queryParameters = queryParameters.set('idMember', <any>idMember);\n        }\n        if (locale !== undefined && locale !== null) {\n            queryParameters = queryParameters.set('locale', <any>locale);\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json',\n            'application/vnd.ms-excel'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<string>(`${this.basePath}/guild-member/xls`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress,\n                responseType : 'blob' as 'json'\n            }\n        );\n    }\n    /**\n     * Member Put\n     * \n     * @param memberId \n     * @param authorization \n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateGuildMember(memberId: number, authorization: string, body: GuildMember, observe?: 'body', reportProgress?: boolean): Observable<GuildMember>;\n    public updateGuildMember(memberId: number, authorization: string, body: GuildMember, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GuildMember>>;\n    public updateGuildMember(memberId: number, authorization: string, body: GuildMember, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GuildMember>>;\n    public updateGuildMember(memberId: number, authorization: string, body: GuildMember, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (memberId === null || memberId === undefined) {\n            throw new Error('Required parameter memberId was null or undefined when calling updateGuildMember.');\n        }\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling updateGuildMember.');\n        }\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling updateGuildMember.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<GuildMember>(`${this.basePath}/guild-member/${encodeURIComponent(String(memberId))}`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * MAAS API\n * This is the Mobility as a Service API\n *\n * OpenAPI spec version: 1.0.0\n * Contact: avalls@nexusgeographics.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs/Observable';\n\nimport { ApiError } from '../model/apiError';\nimport { ByDevicesRequest } from '../model/byDevicesRequest';\nimport { ByTopicRequest } from '../model/byTopicRequest';\nimport { Notification } from '../model/notification';\nimport { NotificationBO } from '../model/notificationBO';\nimport { NotificationData } from '../model/notificationData';\nimport { NotificationMarkAsRead } from '../model/notificationMarkAsRead';\nimport { OAuthError } from '../model/oAuthError';\nimport { RegisterPushTokenRequest } from '../model/registerPushTokenRequest';\nimport { Topic } from '../model/topic';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class NotificationService {\n\n    protected basePath = 'http://maas.nexusgeografics.com/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Add a new notification\n     * \n     * @param authorization Token of authentication\n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public addNotification(authorization: string, body: NotificationData, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public addNotification(authorization: string, body: NotificationData, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public addNotification(authorization: string, body: NotificationData, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public addNotification(authorization: string, body: NotificationData, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling addNotification.');\n        }\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling addNotification.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}/notifications`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete notification\n     * \n     * @param notificationId \n     * @param authorization Token of authentication\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteNotification(notificationId: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteNotification(notificationId: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteNotification(notificationId: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteNotification(notificationId: number, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (notificationId === null || notificationId === undefined) {\n            throw new Error('Required parameter notificationId was null or undefined when calling deleteNotification.');\n        }\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling deleteNotification.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}/notifications/${encodeURIComponent(String(notificationId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Discard notification for user\n     * \n     * @param notificationId \n     * @param userId \n     * @param authorization Token of authentication\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public discardNotification(notificationId: number, userId: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public discardNotification(notificationId: number, userId: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public discardNotification(notificationId: number, userId: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public discardNotification(notificationId: number, userId: number, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (notificationId === null || notificationId === undefined) {\n            throw new Error('Required parameter notificationId was null or undefined when calling discardNotification.');\n        }\n        if (userId === null || userId === undefined) {\n            throw new Error('Required parameter userId was null or undefined when calling discardNotification.');\n        }\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling discardNotification.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}/notifications/${encodeURIComponent(String(notificationId))}/user/${encodeURIComponent(String(userId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get Notification BO for EDIT\n     * \n     * @param notificationId \n     * @param authorization Maas Token\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getNotification(notificationId: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<NotificationData>;\n    public getNotification(notificationId: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<NotificationData>>;\n    public getNotification(notificationId: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<NotificationData>>;\n    public getNotification(notificationId: number, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (notificationId === null || notificationId === undefined) {\n            throw new Error('Required parameter notificationId was null or undefined when calling getNotification.');\n        }\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling getNotification.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<NotificationData>(`${this.basePath}/notifications/${encodeURIComponent(String(notificationId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Mark as read\n     * \n     * @param notificationId \n     * @param userId \n     * @param authorization Token of authentication\n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public markAsRead(notificationId: number, userId: number, authorization: string, body: NotificationMarkAsRead, observe?: 'body', reportProgress?: boolean): Observable<Notification>;\n    public markAsRead(notificationId: number, userId: number, authorization: string, body: NotificationMarkAsRead, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Notification>>;\n    public markAsRead(notificationId: number, userId: number, authorization: string, body: NotificationMarkAsRead, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Notification>>;\n    public markAsRead(notificationId: number, userId: number, authorization: string, body: NotificationMarkAsRead, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (notificationId === null || notificationId === undefined) {\n            throw new Error('Required parameter notificationId was null or undefined when calling markAsRead.');\n        }\n        if (userId === null || userId === undefined) {\n            throw new Error('Required parameter userId was null or undefined when calling markAsRead.');\n        }\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling markAsRead.');\n        }\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling markAsRead.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<Notification>(`${this.basePath}/notifications/${encodeURIComponent(String(notificationId))}/user/${encodeURIComponent(String(userId))}`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get Notification\n     * \n     * @param notificationId \n     * @param userId \n     * @param authorization Token of authentication\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public notification(notificationId: number, userId: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<Notification>;\n    public notification(notificationId: number, userId: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Notification>>;\n    public notification(notificationId: number, userId: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Notification>>;\n    public notification(notificationId: number, userId: number, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (notificationId === null || notificationId === undefined) {\n            throw new Error('Required parameter notificationId was null or undefined when calling notification.');\n        }\n        if (userId === null || userId === undefined) {\n            throw new Error('Required parameter userId was null or undefined when calling notification.');\n        }\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling notification.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<Notification>(`${this.basePath}/notifications/${encodeURIComponent(String(notificationId))}/user/${encodeURIComponent(String(userId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get notifications\n     * For users: Returns its notifications.\n     * @param authorization Token of authentication\n     * @param userId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public notifications(authorization: string, userId?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Notification>>;\n    public notifications(authorization: string, userId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Notification>>>;\n    public notifications(authorization: string, userId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Notification>>>;\n    public notifications(authorization: string, userId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling notifications.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (userId !== undefined) {\n            queryParameters = queryParameters.set('userId', <any>userId);\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<Array<Notification>>(`${this.basePath}/notifications`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get notifications\n     * Returns all the notifications in database.\n     * @param authorization Token of authentication\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public notificationsBO(authorization: string, observe?: 'body', reportProgress?: boolean): Observable<Array<NotificationBO>>;\n    public notificationsBO(authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<NotificationBO>>>;\n    public notificationsBO(authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<NotificationBO>>>;\n    public notificationsBO(authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling notificationsBO.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<Array<NotificationBO>>(`${this.basePath}/notifications/bo`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Register new push token\n     * \n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public registerPush(body: RegisterPushTokenRequest, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public registerPush(body: RegisterPushTokenRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public registerPush(body: RegisterPushTokenRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public registerPush(body: RegisterPushTokenRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling registerPush.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}/notificationSender/register`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Notification sender by device ids\n     * send push notification to list of devices\n     * @param authorization Token of authentication\n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public senderById(authorization: string, body: ByDevicesRequest, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public senderById(authorization: string, body: ByDevicesRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public senderById(authorization: string, body: ByDevicesRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public senderById(authorization: string, body: ByDevicesRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling senderById.');\n        }\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling senderById.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<any>(`${this.basePath}/notificationSender/byDevices`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Notification sender by topic\n     * Topics can be obtained using notificationSenser/topics\n     * @param authorization Token of authentication\n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public senderByTopic(authorization: string, body: ByTopicRequest, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public senderByTopic(authorization: string, body: ByTopicRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public senderByTopic(authorization: string, body: ByTopicRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public senderByTopic(authorization: string, body: ByTopicRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling senderByTopic.');\n        }\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling senderByTopic.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<any>(`${this.basePath}/notificationSender/byTopic`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get list of default topics\n     * Returns a list of topics that can be used to send notifications to a group of users. For example: - ios users - android users - webapp users - ios users with version &lt; 10.1 - others...\n     * @param authorization Token of authentication\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public topics(authorization: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Topic>>;\n    public topics(authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Topic>>>;\n    public topics(authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Topic>>>;\n    public topics(authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling topics.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<Array<Topic>>(`${this.basePath}/notificationSender/topics`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update notification data\n     * \n     * @param notificationId \n     * @param authorization Token of authentication\n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateNotification(notificationId: number, authorization: string, body: NotificationData, observe?: 'body', reportProgress?: boolean): Observable<Notification>;\n    public updateNotification(notificationId: number, authorization: string, body: NotificationData, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Notification>>;\n    public updateNotification(notificationId: number, authorization: string, body: NotificationData, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Notification>>;\n    public updateNotification(notificationId: number, authorization: string, body: NotificationData, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (notificationId === null || notificationId === undefined) {\n            throw new Error('Required parameter notificationId was null or undefined when calling updateNotification.');\n        }\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling updateNotification.');\n        }\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling updateNotification.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<Notification>(`${this.basePath}/notifications/${encodeURIComponent(String(notificationId))}`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Smou API\n * This is the Mobility as a Service API\n *\n * OpenAPI spec version: 1.0.0\n * Contact: avalls@nexusgeographics.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs/Observable';\n\nimport { ApiError } from '../model/apiError';\nimport { ChangeUserPasswordRequest } from '../model/changeUserPasswordRequest';\nimport { OAuthDetails } from '../model/oAuthDetails';\nimport { OAuthError } from '../model/oAuthError';\nimport { OAuthParkingmeter } from '../model/oAuthParkingmeter';\nimport { OAuthSSOInfo } from '../model/oAuthSSOInfo';\nimport { ResetUserPasswordRequest } from '../model/resetUserPasswordRequest';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class OauthService {\n\n    protected basePath = 'http://maas.nexusgeografics.com/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Change user pwd\n     * \n     * @param authorization Maas Token\n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public changePassword(authorization: string, body: ChangeUserPasswordRequest, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public changePassword(authorization: string, body: ChangeUserPasswordRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public changePassword(authorization: string, body: ChangeUserPasswordRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public changePassword(authorization: string, body: ChangeUserPasswordRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling changePassword.');\n        }\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling changePassword.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}/oauth/password`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Logs in user\n     * Logs in user\n     * @param authorization Basic authorization should include client_id as username and client_secret as password.  String encoding &#x3D; Base64Encoder.encode (\\&quot;client_id:client_secret\\&quot;);  HttpPost httppost &#x3D; new HttpPost(\\&quot;http://host:post/oauth/token\\&quot;);  httppost.setHeader(\\&quot;Authorization\\&quot;, \\&quot;Basic \\&quot; + encoding);\n     * @param clientId Client id\n     * @param grantType Should be password or refresh_token. In case of obtaining new access token use password,\n     * @param refreshToken Required in case of refreshing token\n     * @param username LDAP username or MAAS username depends on client specified. Required in case of obtaining new access token\n     * @param password Password of specified user. Required in case of obtaining new access token\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public loginUser(authorization: string, clientId: string, grantType: string, refreshToken?: string, username?: string, password?: string, observe?: 'body', reportProgress?: boolean): Observable<OAuthDetails>;\n    public loginUser(authorization: string, clientId: string, grantType: string, refreshToken?: string, username?: string, password?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OAuthDetails>>;\n    public loginUser(authorization: string, clientId: string, grantType: string, refreshToken?: string, username?: string, password?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OAuthDetails>>;\n    public loginUser(authorization: string, clientId: string, grantType: string, refreshToken?: string, username?: string, password?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling loginUser.');\n        }\n\n        if (clientId === null || clientId === undefined) {\n            throw new Error('Required parameter clientId was null or undefined when calling loginUser.');\n        }\n\n        if (grantType === null || grantType === undefined) {\n            throw new Error('Required parameter grantType was null or undefined when calling loginUser.');\n        }\n\n\n\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (Basic authentication) required\n        if (this.configuration.username || this.configuration.password) {\n            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/x-www-form-urlencoded'\n        ];\n\n        const canConsumeForm = this.canConsumeForm(consumes);\n\n        let formParams: { append(param: string, value: any): void; };\n        let useForm = false;\n        let convertFormParamsToString = false;\n        if (useForm) {\n            formParams = new FormData();\n        } else {\n            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        }\n\n        if (clientId !== undefined) {\n            formParams = formParams.append('client_id', <any>clientId) || formParams;\n        }\n        if (grantType !== undefined) {\n            formParams = formParams.append('grant_type', <any>grantType) || formParams;\n        }\n        if (refreshToken !== undefined) {\n            formParams = formParams.append('refresh_token', <any>refreshToken) || formParams;\n        }\n        if (username !== undefined) {\n            formParams = formParams.append('username', <any>username) || formParams;\n        }\n        if (password !== undefined) {\n            formParams = formParams.append('password', <any>password) || formParams;\n        }\n\n        return this.httpClient.post<OAuthDetails>(`${this.basePath}/oauth/token`,\n            convertFormParamsToString ? formParams.toString() : formParams,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * User login from parking meter\n     * User login from parking meter\n     * @param authorization Basic authorization should include client_id as username and client_secret as password.  String encoding &#x3D; Base64Encoder.encode (\\&quot;client_id:client_secret\\&quot;);  HttpPost httppost &#x3D; new HttpPost(\\&quot;http://host:post/oauth/token\\&quot;);  httppost.setHeader(\\&quot;Authorization\\&quot;, \\&quot;Basic \\&quot; + encoding);\n     * @param clientId Client id\n     * @param grantType Should be password or refresh_token. In case of obtaining new access token use password,\n     * @param username LDAP username or MAAS username depends on client specified. Required in case of obtaining new access token\n     * @param password Password of specified user. Required in case of obtaining new access token\n     * @param parkingmeterId Parking meter code\n     * @param requestDate \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public loginUser_1(authorization: string, clientId: string, grantType: string, username: string, password: string, parkingmeterId: number, requestDate: string, observe?: 'body', reportProgress?: boolean): Observable<OAuthParkingmeter>;\n    public loginUser_1(authorization: string, clientId: string, grantType: string, username: string, password: string, parkingmeterId: number, requestDate: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OAuthParkingmeter>>;\n    public loginUser_1(authorization: string, clientId: string, grantType: string, username: string, password: string, parkingmeterId: number, requestDate: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OAuthParkingmeter>>;\n    public loginUser_1(authorization: string, clientId: string, grantType: string, username: string, password: string, parkingmeterId: number, requestDate: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling loginUser_1.');\n        }\n\n        if (clientId === null || clientId === undefined) {\n            throw new Error('Required parameter clientId was null or undefined when calling loginUser_1.');\n        }\n\n        if (grantType === null || grantType === undefined) {\n            throw new Error('Required parameter grantType was null or undefined when calling loginUser_1.');\n        }\n\n        if (username === null || username === undefined) {\n            throw new Error('Required parameter username was null or undefined when calling loginUser_1.');\n        }\n\n        if (password === null || password === undefined) {\n            throw new Error('Required parameter password was null or undefined when calling loginUser_1.');\n        }\n\n        if (parkingmeterId === null || parkingmeterId === undefined) {\n            throw new Error('Required parameter parkingmeterId was null or undefined when calling loginUser_1.');\n        }\n\n        if (requestDate === null || requestDate === undefined) {\n            throw new Error('Required parameter requestDate was null or undefined when calling loginUser_1.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (Basic authentication) required\n        if (this.configuration.username || this.configuration.password) {\n            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/x-www-form-urlencoded'\n        ];\n\n        const canConsumeForm = this.canConsumeForm(consumes);\n\n        let formParams: { append(param: string, value: any): void; };\n        let useForm = false;\n        let convertFormParamsToString = false;\n        if (useForm) {\n            formParams = new FormData();\n        } else {\n            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        }\n\n        if (clientId !== undefined) {\n            formParams = formParams.append('client_id', <any>clientId) || formParams;\n        }\n        if (grantType !== undefined) {\n            formParams = formParams.append('grant_type', <any>grantType) || formParams;\n        }\n        if (username !== undefined) {\n            formParams = formParams.append('username', <any>username) || formParams;\n        }\n        if (password !== undefined) {\n            formParams = formParams.append('password', <any>password) || formParams;\n        }\n        if (parkingmeterId !== undefined) {\n            formParams = formParams.append('parkingmeterId', <any>parkingmeterId) || formParams;\n        }\n        if (requestDate !== undefined) {\n            formParams = formParams.append('requestDate', <any>requestDate) || formParams;\n        }\n\n        return this.httpClient.post<OAuthParkingmeter>(`${this.basePath}/oauth/token?client_id=parkingmeter`,\n            convertFormParamsToString ? formParams.toString() : formParams,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Logs out user - NOT IMPLEMENTED\n     * User logout - Not implemented and should not be called.\n     * @param authorization Token of authentication\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public logout(authorization: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public logout(authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public logout(authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public logout(authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling logout.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/oauth/logout`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Request single sign on\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public oauthSsoGet(observe?: 'body', reportProgress?: boolean): Observable<OAuthSSOInfo>;\n    public oauthSsoGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OAuthSSOInfo>>;\n    public oauthSsoGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OAuthSSOInfo>>;\n    public oauthSsoGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        return this.httpClient.get<OAuthSSOInfo>(`${this.basePath}/oauth/sso`,\n            {\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Resets user&#39;s password\n     * Resets user password\n     * @param authorization Token of authentication\n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public resetPassword(authorization: string, body: ResetUserPasswordRequest, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public resetPassword(authorization: string, body: ResetUserPasswordRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public resetPassword(authorization: string, body: ResetUserPasswordRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public resetPassword(authorization: string, body: ResetUserPasswordRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling resetPassword.');\n        }\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling resetPassword.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}/oauth/resetPwd`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Request password reset\n     * Request mail for password reset\n     * @param email Email of user\n     * @param clientId Application\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public resetPasswordInfo(email: string, clientId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public resetPasswordInfo(email: string, clientId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public resetPasswordInfo(email: string, clientId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public resetPasswordInfo(email: string, clientId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (email === null || email === undefined) {\n            throw new Error('Required parameter email was null or undefined when calling resetPasswordInfo.');\n        }\n\n        if (clientId === null || clientId === undefined) {\n            throw new Error('Required parameter clientId was null or undefined when calling resetPasswordInfo.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (email !== undefined && email !== null) {\n            queryParameters = queryParameters.set('email', <any>email);\n        }\n        if (clientId !== undefined && clientId !== null) {\n            queryParameters = queryParameters.set('client_id', <any>clientId);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/oauth/resetPwd`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Validate password reset\n     * Validate mail for password reset\n     * @param authorizationCode Token to validate\n     * @param clientId Application\n     * @param email \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public resetPasswordValidate(authorizationCode: string, clientId: string, email: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public resetPasswordValidate(authorizationCode: string, clientId: string, email: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public resetPasswordValidate(authorizationCode: string, clientId: string, email: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public resetPasswordValidate(authorizationCode: string, clientId: string, email: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (authorizationCode === null || authorizationCode === undefined) {\n            throw new Error('Required parameter authorizationCode was null or undefined when calling resetPasswordValidate.');\n        }\n\n        if (clientId === null || clientId === undefined) {\n            throw new Error('Required parameter clientId was null or undefined when calling resetPasswordValidate.');\n        }\n\n        if (email === null || email === undefined) {\n            throw new Error('Required parameter email was null or undefined when calling resetPasswordValidate.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (authorizationCode !== undefined && authorizationCode !== null) {\n            queryParameters = queryParameters.set('authorizationCode', <any>authorizationCode);\n        }\n        if (clientId !== undefined && clientId !== null) {\n            queryParameters = queryParameters.set('client_id', <any>clientId);\n        }\n        if (email !== undefined && email !== null) {\n            queryParameters = queryParameters.set('email', <any>email);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/oauth/resetPwd/validate`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * MAAS API\n * This is the Mobility as a Service API\n *\n * OpenAPI spec version: 1.0.0\n * Contact: avalls@nexusgeographics.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs/Observable';\n\nimport { Coupon } from '../model/coupon';\nimport { ErrorGeneric } from '../model/errorGeneric';\nimport { InlineResponse200 } from '../model/inlineResponse200';\nimport { NearConfigs } from '../model/nearConfigs';\nimport { Price } from '../model/price';\nimport { StartOffData } from '../model/startOffData';\nimport { StartOnData } from '../model/startOnData';\nimport { StartThirdData } from '../model/startThirdData';\nimport { StopOffData } from '../model/stopOffData';\nimport { StopOnData } from '../model/stopOnData';\nimport { Ticket } from '../model/ticket';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class ParkService {\n\n    protected basePath = 'http://maas.nexusgeografics.com/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Cancel a start\n     * \n     * @param authorization Token of authentication\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public cancelOffStart(authorization: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public cancelOffStart(authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public cancelOffStart(authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public cancelOffStart(authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling cancelOffStart.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}/off/start/`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Add coupons by scaning\n     * \n     * @param authorization Token of authentication\n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public couponsPost(authorization: string, body: number, observe?: 'body', reportProgress?: boolean): Observable<Coupon>;\n    public couponsPost(authorization: string, body: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Coupon>>;\n    public couponsPost(authorization: string, body: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Coupon>>;\n    public couponsPost(authorization: string, body: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling couponsPost.');\n        }\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling couponsPost.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<Coupon>(`${this.basePath}/coupons`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Car&#39;s exit call\n     * \n     * @param ticketID \n     * @param authorization Token of authentication\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public exitCar(ticketID: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public exitCar(ticketID: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public exitCar(ticketID: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public exitCar(ticketID: number, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (ticketID === null || ticketID === undefined) {\n            throw new Error('Required parameter ticketID was null or undefined when calling exitCar.');\n        }\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling exitCar.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (ticketID !== undefined) {\n            queryParameters = queryParameters.set('ticketID', <any>ticketID);\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/off/exit`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get all\n     * \n     * @param authorization Token of authentication\n     * @param order Order to apply\n     * @param userID User filter\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getAllBonus(authorization: string, order?: string, userID?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Coupon>>;\n    public getAllBonus(authorization: string, order?: string, userID?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Coupon>>>;\n    public getAllBonus(authorization: string, order?: string, userID?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Coupon>>>;\n    public getAllBonus(authorization: string, order?: string, userID?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling getAllBonus.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (order !== undefined) {\n            queryParameters = queryParameters.set('order', <any>order);\n        }\n        if (userID !== undefined) {\n            queryParameters = queryParameters.set('userID', <any>userID);\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<Array<Coupon>>(`${this.basePath}/coupons`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Has automatic entry\n     * This method is called by SIC to know if the vehicle has the automatic entry activated.\n     * @param plateNumber \n     * @param authorization Token of authentication\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public hasAutomaticEntry(plateNumber: string, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<number>;\n    public hasAutomaticEntry(plateNumber: string, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<number>>;\n    public hasAutomaticEntry(plateNumber: string, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<number>>;\n    public hasAutomaticEntry(plateNumber: string, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (plateNumber === null || plateNumber === undefined) {\n            throw new Error('Required parameter plateNumber was null or undefined when calling hasAutomaticEntry.');\n        }\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling hasAutomaticEntry.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (plateNumber !== undefined) {\n            queryParameters = queryParameters.set('plateNumber', <any>plateNumber);\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<number>(`${this.basePath}/off/hasAutomaticEntry`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * NearConfigurations\n     * Returns the availability for all the cities around one point if the user hasn&#39;t an active ticket or the time or position of last ticket pass the chain restricitions.\n     * @param lng Longitude value\n     * @param lat Latitude value\n     * @param authorization Token of authentication\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public nearConfigurations(lng: number, lat: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<Array<NearConfigs>>;\n    public nearConfigurations(lng: number, lat: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<NearConfigs>>>;\n    public nearConfigurations(lng: number, lat: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<NearConfigs>>>;\n    public nearConfigurations(lng: number, lat: number, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (lng === null || lng === undefined) {\n            throw new Error('Required parameter lng was null or undefined when calling nearConfigurations.');\n        }\n        if (lat === null || lat === undefined) {\n            throw new Error('Required parameter lat was null or undefined when calling nearConfigurations.');\n        }\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling nearConfigurations.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (lng !== undefined) {\n            queryParameters = queryParameters.set('lng', <any>lng);\n        }\n        if (lat !== undefined) {\n            queryParameters = queryParameters.set('lat', <any>lat);\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<Array<NearConfigs>>(`${this.basePath}/on/nearConfigurations`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Stop ticket\n     * \n     * @param authorization Token of authentication\n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public offStopPost(authorization: string, body: StopOffData, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public offStopPost(authorization: string, body: StopOffData, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public offStopPost(authorization: string, body: StopOffData, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public offStopPost(authorization: string, body: StopOffData, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling offStopPost.');\n        }\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling offStopPost.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}/off/stop/`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get offStreet ticket\n     * \n     * @param ticketUcaID \n     * @param authorization Token of authentication\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public offTicketGet(ticketUcaID: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<StartOffData>;\n    public offTicketGet(ticketUcaID: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<StartOffData>>;\n    public offTicketGet(ticketUcaID: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<StartOffData>>;\n    public offTicketGet(ticketUcaID: number, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (ticketUcaID === null || ticketUcaID === undefined) {\n            throw new Error('Required parameter ticketUcaID was null or undefined when calling offTicketGet.');\n        }\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling offTicketGet.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (ticketUcaID !== undefined) {\n            queryParameters = queryParameters.set('ticketUcaID', <any>ticketUcaID);\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<StartOffData>(`${this.basePath}/off/ticket`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get the predictions\n     * \n     * @param lon \n     * @param lat \n     * @param types Section type\n     * @param authorization Token of authentication\n     * @param dateTime If not set → now\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public predictionGet(lon: number, lat: number, types: Array<string>, authorization: string, dateTime?: Date, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse200>;\n    public predictionGet(lon: number, lat: number, types: Array<string>, authorization: string, dateTime?: Date, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse200>>;\n    public predictionGet(lon: number, lat: number, types: Array<string>, authorization: string, dateTime?: Date, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse200>>;\n    public predictionGet(lon: number, lat: number, types: Array<string>, authorization: string, dateTime?: Date, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (lon === null || lon === undefined) {\n            throw new Error('Required parameter lon was null or undefined when calling predictionGet.');\n        }\n        if (lat === null || lat === undefined) {\n            throw new Error('Required parameter lat was null or undefined when calling predictionGet.');\n        }\n        if (types === null || types === undefined) {\n            throw new Error('Required parameter types was null or undefined when calling predictionGet.');\n        }\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling predictionGet.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (lon !== undefined) {\n            queryParameters = queryParameters.set('lon', <any>lon);\n        }\n        if (lat !== undefined) {\n            queryParameters = queryParameters.set('lat', <any>lat);\n        }\n        if (types) {\n            types.forEach((element) => {\n                queryParameters = queryParameters.append('types', <any>element);\n            })\n        }\n        if (dateTime !== undefined) {\n            queryParameters = queryParameters.set('dateTime', <any>dateTime.toISOString());\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<InlineResponse200>(`${this.basePath}/prediction`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get the price\n     * Get the price of one configuration and plateNumber\n     * @param plateNumber \n     * @param configuration \n     * @param zoneTypeId \n     * @param city \n     * @param authorization Token of authentication\n     * @param endTime \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public price(plateNumber: string, configuration: number, zoneTypeId: number, city: number, authorization: string, endTime?: Date, observe?: 'body', reportProgress?: boolean): Observable<number>;\n    public price(plateNumber: string, configuration: number, zoneTypeId: number, city: number, authorization: string, endTime?: Date, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<number>>;\n    public price(plateNumber: string, configuration: number, zoneTypeId: number, city: number, authorization: string, endTime?: Date, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<number>>;\n    public price(plateNumber: string, configuration: number, zoneTypeId: number, city: number, authorization: string, endTime?: Date, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (plateNumber === null || plateNumber === undefined) {\n            throw new Error('Required parameter plateNumber was null or undefined when calling price.');\n        }\n        if (configuration === null || configuration === undefined) {\n            throw new Error('Required parameter configuration was null or undefined when calling price.');\n        }\n        if (zoneTypeId === null || zoneTypeId === undefined) {\n            throw new Error('Required parameter zoneTypeId was null or undefined when calling price.');\n        }\n        if (city === null || city === undefined) {\n            throw new Error('Required parameter city was null or undefined when calling price.');\n        }\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling price.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (plateNumber !== undefined) {\n            queryParameters = queryParameters.set('plateNumber', <any>plateNumber);\n        }\n        if (configuration !== undefined) {\n            queryParameters = queryParameters.set('configuration', <any>configuration);\n        }\n        if (zoneTypeId !== undefined) {\n            queryParameters = queryParameters.set('zoneTypeId', <any>zoneTypeId);\n        }\n        if (city !== undefined) {\n            queryParameters = queryParameters.set('city', <any>city);\n        }\n        if (endTime !== undefined) {\n            queryParameters = queryParameters.set('endTime', <any>endTime.toISOString());\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<number>(`${this.basePath}/on/price`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Register ticket\n     * \n     * @param authorization Token of authentication\n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public registerTicket(authorization: string, body: StartOffData, observe?: 'body', reportProgress?: boolean): Observable<Ticket>;\n    public registerTicket(authorization: string, body: StartOffData, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Ticket>>;\n    public registerTicket(authorization: string, body: StartOffData, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Ticket>>;\n    public registerTicket(authorization: string, body: StartOffData, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling registerTicket.');\n        }\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling registerTicket.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<Ticket>(`${this.basePath}/off/start/`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Start\n     * Parking start    \n     * @param authorization Token of authentication\n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public start(authorization: string, body: StartOnData, observe?: 'body', reportProgress?: boolean): Observable<Ticket>;\n    public start(authorization: string, body: StartOnData, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Ticket>>;\n    public start(authorization: string, body: StartOnData, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Ticket>>;\n    public start(authorization: string, body: StartOnData, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling start.');\n        }\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling start.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<Ticket>(`${this.basePath}/on/start`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Stop\n     * Stop\n     * @param authorization Token of authentication\n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public stop(authorization: string, body: StopOnData, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public stop(authorization: string, body: StopOnData, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public stop(authorization: string, body: StopOnData, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public stop(authorization: string, body: StopOnData, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling stop.');\n        }\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling stop.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}/on/stop`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * NearConfigurations\n     * Returns the availability for all the cities around one point if the user hasn&#39;t an active ticket or the time or position of last ticket pass the chain restricitions.\n     * @param lng Longitude value\n     * @param lat Latitude value\n     * @param locale \n     * @param authorization Token of authentication\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public thirdNearConfigurations(lng: number, lat: number, locale: string, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<Array<NearConfigs>>;\n    public thirdNearConfigurations(lng: number, lat: number, locale: string, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<NearConfigs>>>;\n    public thirdNearConfigurations(lng: number, lat: number, locale: string, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<NearConfigs>>>;\n    public thirdNearConfigurations(lng: number, lat: number, locale: string, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (lng === null || lng === undefined) {\n            throw new Error('Required parameter lng was null or undefined when calling thirdNearConfigurations.');\n        }\n        if (lat === null || lat === undefined) {\n            throw new Error('Required parameter lat was null or undefined when calling thirdNearConfigurations.');\n        }\n        if (locale === null || locale === undefined) {\n            throw new Error('Required parameter locale was null or undefined when calling thirdNearConfigurations.');\n        }\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling thirdNearConfigurations.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (lng !== undefined) {\n            queryParameters = queryParameters.set('lng', <any>lng);\n        }\n        if (lat !== undefined) {\n            queryParameters = queryParameters.set('lat', <any>lat);\n        }\n        if (locale !== undefined) {\n            queryParameters = queryParameters.set('locale', <any>locale);\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<Array<NearConfigs>>(`${this.basePath}/thirdparty/nearConfigurations`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get the price\n     * Get the price via (madatory one group of params) : * one configuration, city and plateNumber * ticketID\n     * @param startTime \n     * @param authorization Token of authentication\n     * @param plateNumber \n     * @param cityID \n     * @param configurationID \n     * @param ticketID \n     * @param endTIme If not set, the method calculates the maximum import.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public thirdPrice(startTime: Date, authorization: string, plateNumber?: string, cityID?: number, configurationID?: number, ticketID?: number, endTIme?: Date, observe?: 'body', reportProgress?: boolean): Observable<Price>;\n    public thirdPrice(startTime: Date, authorization: string, plateNumber?: string, cityID?: number, configurationID?: number, ticketID?: number, endTIme?: Date, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Price>>;\n    public thirdPrice(startTime: Date, authorization: string, plateNumber?: string, cityID?: number, configurationID?: number, ticketID?: number, endTIme?: Date, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Price>>;\n    public thirdPrice(startTime: Date, authorization: string, plateNumber?: string, cityID?: number, configurationID?: number, ticketID?: number, endTIme?: Date, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (startTime === null || startTime === undefined) {\n            throw new Error('Required parameter startTime was null or undefined when calling thirdPrice.');\n        }\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling thirdPrice.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (plateNumber !== undefined) {\n            queryParameters = queryParameters.set('plateNumber', <any>plateNumber);\n        }\n        if (cityID !== undefined) {\n            queryParameters = queryParameters.set('cityID', <any>cityID);\n        }\n        if (configurationID !== undefined) {\n            queryParameters = queryParameters.set('configurationID', <any>configurationID);\n        }\n        if (ticketID !== undefined) {\n            queryParameters = queryParameters.set('ticketID', <any>ticketID);\n        }\n        if (startTime !== undefined) {\n            queryParameters = queryParameters.set('startTime', <any>startTime.toISOString());\n        }\n        if (endTIme !== undefined) {\n            queryParameters = queryParameters.set('endTIme', <any>endTIme.toISOString());\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<Price>(`${this.basePath}/thirdparty/price`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Start\n     * Start a park.  * If the price is up to 0 and no credit card is configured → error.\n     * @param authorization Token of authentication\n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public thirdStart(authorization: string, body: StartThirdData, observe?: 'body', reportProgress?: boolean): Observable<Ticket>;\n    public thirdStart(authorization: string, body: StartThirdData, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Ticket>>;\n    public thirdStart(authorization: string, body: StartThirdData, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Ticket>>;\n    public thirdStart(authorization: string, body: StartThirdData, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling thirdStart.');\n        }\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling thirdStart.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<Ticket>(`${this.basePath}/thirdparty/start`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Stop\n     * Stop\n     * @param authorization Token of authentication\n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public thirdStop(authorization: string, body: StopOnData, observe?: 'body', reportProgress?: boolean): Observable<Ticket>;\n    public thirdStop(authorization: string, body: StopOnData, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Ticket>>;\n    public thirdStop(authorization: string, body: StopOnData, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Ticket>>;\n    public thirdStop(authorization: string, body: StopOnData, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling thirdStop.');\n        }\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling thirdStop.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<Ticket>(`${this.basePath}/thirdparty/stop`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Use a bonus\n     * Use a bonus in an anctive ticket\n     * @param couponId \n     * @param authorization Token of authentication\n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public useBonus(couponId: string, authorization: string, body: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public useBonus(couponId: string, authorization: string, body: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public useBonus(couponId: string, authorization: string, body: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public useBonus(couponId: string, authorization: string, body: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (couponId === null || couponId === undefined) {\n            throw new Error('Required parameter couponId was null or undefined when calling useBonus.');\n        }\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling useBonus.');\n        }\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling useBonus.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}/coupons/${encodeURIComponent(String(couponId))}`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * MAAS API\n * This is the Mobility as a Service API\n *\n * OpenAPI spec version: 1.0.0\n * Contact: avalls@nexusgeographics.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs/Observable';\n\nimport { Body1 } from '../model/body1';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class ParkingService {\n\n    protected basePath = 'http://maas.nexusgeografics.com/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Get Parking\n     * \n     * @param parkingID \n     * @param authorization Token of authentication\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public parking(parkingID: string, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public parking(parkingID: string, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public parking(parkingID: string, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public parking(parkingID: string, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (parkingID === null || parkingID === undefined) {\n            throw new Error('Required parameter parkingID was null or undefined when calling parking.');\n        }\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling parking.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/parkings/${encodeURIComponent(String(parkingID))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Mark or dismark as favorite\n     * \n     * @param parkingID \n     * @param authorization Token of authentication\n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public parkingFavorite(parkingID: string, authorization: string, body: Body1, observe?: 'body', reportProgress?: boolean): Observable<boolean>;\n    public parkingFavorite(parkingID: string, authorization: string, body: Body1, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;\n    public parkingFavorite(parkingID: string, authorization: string, body: Body1, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;\n    public parkingFavorite(parkingID: string, authorization: string, body: Body1, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (parkingID === null || parkingID === undefined) {\n            throw new Error('Required parameter parkingID was null or undefined when calling parkingFavorite.');\n        }\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling parkingFavorite.');\n        }\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling parkingFavorite.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<boolean>(`${this.basePath}/parkings/${encodeURIComponent(String(parkingID))}`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get Parkings\n     * \n     * @param authorization Token of authentication\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public parkings(authorization: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public parkings(authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public parkings(authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public parkings(authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling parkings.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/parkings`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * MAAS API\n * This is the Mobility as a Service API\n *\n * OpenAPI spec version: 1.0.0\n * Contact: avalls@nexusgeographics.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs/Observable';\n\nimport { PaymentGatewayPutRequest } from '../model/paymentGatewayPutRequest';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class PaymentGatewayService {\n\n    protected basePath = 'http://maas.nexusgeografics.com/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Get the status of the gateway\n     * \n     * @param authorization Token of authentication\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public paymentGateway(authorization: string, observe?: 'body', reportProgress?: boolean): Observable<PaymentGatewayPutRequest>;\n    public paymentGateway(authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PaymentGatewayPutRequest>>;\n    public paymentGateway(authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PaymentGatewayPutRequest>>;\n    public paymentGateway(authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling paymentGateway.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<PaymentGatewayPutRequest>(`${this.basePath}/paymentGateway`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Set the status of the gateway\n     * \n     * @param authorization Token of authentication\n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public setPaymentGateway(authorization: string, body: PaymentGatewayPutRequest, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public setPaymentGateway(authorization: string, body: PaymentGatewayPutRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public setPaymentGateway(authorization: string, body: PaymentGatewayPutRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public setPaymentGateway(authorization: string, body: PaymentGatewayPutRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling setPaymentGateway.');\n        }\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling setPaymentGateway.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<any>(`${this.basePath}/paymentGateway`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Dum API\n * This is the DUM API\n *\n * OpenAPI spec version: 1.0.0\n * Contact: kfiertek@nexusgeographics.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs/Observable';\n\nimport { ApiError } from '../model/apiError';\nimport { OAuthError } from '../model/oAuthError';\nimport { Permission } from '../model/permission';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class PermissionService {\n\n    protected basePath = 'http://dum.nexusgeografics.com/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Create permission\n     * \n     * @param authorization \n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createPermission(authorization: string, body: Permission, observe?: 'body', reportProgress?: boolean): Observable<Permission>;\n    public createPermission(authorization: string, body: Permission, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Permission>>;\n    public createPermission(authorization: string, body: Permission, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Permission>>;\n    public createPermission(authorization: string, body: Permission, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling createPermission.');\n        }\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling createPermission.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<Permission>(`${this.basePath}/permission`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete permissionis\n     * Delete permission by Id\n     * @param id \n     * @param authorization \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deletePermission(id: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deletePermission(id: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deletePermission(id: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deletePermission(id: number, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling deletePermission.');\n        }\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling deletePermission.');\n        }\n\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}/permission/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get Permission\n     * Get Permission by id\n     * @param id \n     * @param authorization \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPermission(id: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<Permission>;\n    public getPermission(id: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Permission>>;\n    public getPermission(id: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Permission>>;\n    public getPermission(id: number, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling getPermission.');\n        }\n\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<Permission>(`${this.basePath}/permission/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get all permission\n     * \n     * @param authorization \n     * @param agreementTypeId \n     * @param periodicityTypeId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public permission(authorization: string, namePermission?: string, periodicityTypeId?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Permission>>;\n    public permission(authorization: string, namePermission?: string, periodicityTypeId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Permission>>>;\n    public permission(authorization: string, namePermission?: string, periodicityTypeId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Permission>>>;\n    public permission(authorization: string, namePermission?: string, periodicityTypeId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling permission.');\n        }\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (namePermission !== undefined && namePermission !== null) {\n            queryParameters = queryParameters.set('namePermission', <any>namePermission);\n        }\n        if (periodicityTypeId !== undefined && periodicityTypeId !== null) {\n            queryParameters = queryParameters.set('periodicityTypeId', <any>periodicityTypeId);\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<Array<Permission>>(`${this.basePath}/permission`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Put permission\n     * Update Permission\n     * @param id \n     * @param authorization \n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public savePermission(id: number, authorization: string, body: Permission, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public savePermission(id: number, authorization: string, body: Permission, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public savePermission(id: number, authorization: string, body: Permission, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public savePermission(id: number, authorization: string, body: Permission, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling savePermission.');\n        }\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling savePermission.');\n        }\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling savePermission.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<any>(`${this.basePath}/permission/${encodeURIComponent(String(id))}`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Dum API\n * This is the DUM API\n *\n * OpenAPI spec version: 1.0.0\n * Contact: rbarbado@nexusgeographics.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs/Observable';\n\nimport { Segment } from '../model/segment';\nimport { SegmentAll } from '../model/segmentAll';\nimport { SegmentConf } from '../model/segmentConf';\nimport { SegmentEdit } from '../model/segmentEdit';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class SegmentsService {\n\n    protected basePath = 'http://dum.nexusgeografics.com/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Create Segment\n     * Create a new segment for the user (token)\n     * @param authorization Token of authentication\n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createSegments(authorization: string, body: SegmentConf, observe?: 'body', reportProgress?: boolean): Observable<SegmentConf>;\n    public createSegments(authorization: string, body: SegmentConf, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SegmentConf>>;\n    public createSegments(authorization: string, body: SegmentConf, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SegmentConf>>;\n    public createSegments(authorization: string, body: SegmentConf, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling createSegments.');\n        }\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling createSegments.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<SegmentConf>(`${this.basePath}/segments`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete segment\n     * Logic delete of a segment\n     * @param segmentId \n     * @param authorization Token of authentication\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteSegments(segmentId: string, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteSegments(segmentId: string, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteSegments(segmentId: string, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteSegments(segmentId: string, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (segmentId === null || segmentId === undefined) {\n            throw new Error('Required parameter segmentId was null or undefined when calling deleteSegments.');\n        }\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling deleteSegments.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}/segments/${encodeURIComponent(String(segmentId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get Segment details\n     * Get all the segments\n     * @param segmentId \n     * @param authorization Token of authentication\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getSegmentDetail(segmentId: string, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<SegmentAll>;\n    public getSegmentDetail(segmentId: string, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SegmentAll>>;\n    public getSegmentDetail(segmentId: string, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SegmentAll>>;\n    public getSegmentDetail(segmentId: string, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (segmentId === null || segmentId === undefined) {\n            throw new Error('Required parameter segmentId was null or undefined when calling getSegmentDetail.');\n        }\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling getSegmentDetail.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<SegmentAll>(`${this.basePath}/segments/${encodeURIComponent(String(segmentId))}/detailed`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get Segments\n     * \n     * @param authorization Get the information of an specífic segment\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getSegments(authorization: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Segment>>;\n    public getSegments(authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Segment>>>;\n    public getSegments(authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Segment>>>;\n    public getSegments(authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling getSegments.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<Array<Segment>>(`${this.basePath}/segments`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get segments by contains\n     * Get all the segments in a square\n     * @param coordinates The coordinates of the square\n     * @param authorization Authorization token\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getSegmentsContains(coordinates: string, authorization?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Segment>>;\n    public getSegmentsContains(coordinates: string, authorization?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Segment>>>;\n    public getSegmentsContains(coordinates: string, authorization?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Segment>>>;\n    public getSegmentsContains(coordinates: string, authorization?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (coordinates === null || coordinates === undefined) {\n            throw new Error('Required parameter coordinates was null or undefined when calling getSegmentsContains.');\n        }\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (coordinates !== undefined && coordinates !== null) {\n            queryParameters = queryParameters.set('coordinates', <any>coordinates);\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<Array<Segment>>(`${this.basePath}/segments/contains`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update Segments\n     * \n     * @param segmentId \n     * @param authorization Token of authentication\n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateSegments(segmentId: string, authorization: string, body: SegmentEdit, observe?: 'body', reportProgress?: boolean): Observable<SegmentEdit>;\n    public updateSegments(segmentId: string, authorization: string, body: SegmentEdit, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SegmentEdit>>;\n    public updateSegments(segmentId: string, authorization: string, body: SegmentEdit, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SegmentEdit>>;\n    public updateSegments(segmentId: string, authorization: string, body: SegmentEdit, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (segmentId === null || segmentId === undefined) {\n            throw new Error('Required parameter segmentId was null or undefined when calling updateSegments.');\n        }\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling updateSegments.');\n        }\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling updateSegments.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<SegmentEdit>(`${this.basePath}/segments/${encodeURIComponent(String(segmentId))}`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Smou API\n * This is the Mobility as a Service API\n *\n * OpenAPI spec version: 1.0.0\n * Contact: avalls@nexusgeographics.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs/Observable';\n\nimport { Service } from '../model/service';\nimport { ServiceStatus } from '../model/serviceStatus';\nimport { ServicesStatus } from '../model/servicesStatus';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class ServiceService {\n\n    protected basePath = 'http://maas.nexusgeografics.com/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Disable service to user\n     * \n     * @param userId \n     * @param serviceId \n     * @param authorization Token of authentication\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteUserService(userId: number, serviceId: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteUserService(userId: number, serviceId: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteUserService(userId: number, serviceId: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteUserService(userId: number, serviceId: number, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (userId === null || userId === undefined) {\n            throw new Error('Required parameter userId was null or undefined when calling deleteUserService.');\n        }\n\n        if (serviceId === null || serviceId === undefined) {\n            throw new Error('Required parameter serviceId was null or undefined when calling deleteUserService.');\n        }\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling deleteUserService.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}/users/${encodeURIComponent(String(userId))}/services/${encodeURIComponent(String(serviceId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Return the status of the all services for the requested user\n     * Return the status of the service for the autenticated user.  If userId param is set: * In unipersonal accounts only returns the service for the same user (authenticated). * In fleet accounts returns the service for the user only if it&#39;s in the same account.  For BO is mandatory.\n     * @param authorization Token of authentication\n     * @param userId UserId to check. Only for admin fletts i BO users\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getAllStatus(authorization: string, userId?: number, observe?: 'body', reportProgress?: boolean): Observable<ServicesStatus>;\n    public getAllStatus(authorization: string, userId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ServicesStatus>>;\n    public getAllStatus(authorization: string, userId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ServicesStatus>>;\n    public getAllStatus(authorization: string, userId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling getAllStatus.');\n        }\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (userId !== undefined && userId !== null) {\n            queryParameters = queryParameters.set('userId', <any>userId);\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<ServicesStatus>(`${this.basePath}/services/all/status`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Return the status of the service for the requested user\n     * \n     * @param authorization Token of authentication\n     * @param userId UserId to check. Only for admin fletts i BO users\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getAparcamentsbsmStatus(authorization: string, userId?: number, observe?: 'body', reportProgress?: boolean): Observable<ServiceStatus>;\n    public getAparcamentsbsmStatus(authorization: string, userId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ServiceStatus>>;\n    public getAparcamentsbsmStatus(authorization: string, userId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ServiceStatus>>;\n    public getAparcamentsbsmStatus(authorization: string, userId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling getAparcamentsbsmStatus.');\n        }\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (userId !== undefined && userId !== null) {\n            queryParameters = queryParameters.set('userId', <any>userId);\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<ServiceStatus>(`${this.basePath}/services/agilPark/status`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Return the status of the service for the requested user\n     * Return the status of the service for the autenticated user.  If userId param is set: * In unipersonal accounts only returns the service for the same user (authenticated). * In fleet accounts returns the service for the user only if it&#39;s in the same account.  For BO is mandatory.\n     * @param authorization Token of authentication\n     * @param userId UserId to check. Only for admin fletts i BO users\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getApparkbStatus(authorization: string, userId?: number, observe?: 'body', reportProgress?: boolean): Observable<ServiceStatus>;\n    public getApparkbStatus(authorization: string, userId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ServiceStatus>>;\n    public getApparkbStatus(authorization: string, userId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ServiceStatus>>;\n    public getApparkbStatus(authorization: string, userId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling getApparkbStatus.');\n        }\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (userId !== undefined && userId !== null) {\n            queryParameters = queryParameters.set('userId', <any>userId);\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<ServiceStatus>(`${this.basePath}/services/apparkb/status`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Return the status of the service for the requested user\n     * \n     * @param authorization Token of authentication\n     * @param userId UserId to check. Only for admin fletts i BO users\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getEndollaStatus(authorization: string, userId?: number, observe?: 'body', reportProgress?: boolean): Observable<ServiceStatus>;\n    public getEndollaStatus(authorization: string, userId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ServiceStatus>>;\n    public getEndollaStatus(authorization: string, userId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ServiceStatus>>;\n    public getEndollaStatus(authorization: string, userId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling getEndollaStatus.');\n        }\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (userId !== undefined && userId !== null) {\n            queryParameters = queryParameters.set('userId', <any>userId);\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<ServiceStatus>(`${this.basePath}/services/endolla/status`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Return available services\n     * \n     * @param locale \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getServices(locale?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Service>>;\n    public getServices(locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Service>>>;\n    public getServices(locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Service>>>;\n    public getServices(locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (locale !== undefined && locale !== null) {\n            queryParameters = queryParameters.set('locale', <any>locale);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<Array<Service>>(`${this.basePath}/services`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Return user&#39;s active services\n     * \n     * @param userId \n     * @param authorization Token of authentication\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getUserServices(userId: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Service>>;\n    public getUserServices(userId: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Service>>>;\n    public getUserServices(userId: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Service>>>;\n    public getUserServices(userId: number, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (userId === null || userId === undefined) {\n            throw new Error('Required parameter userId was null or undefined when calling getUserServices.');\n        }\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling getUserServices.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<Array<Service>>(`${this.basePath}/users/${encodeURIComponent(String(userId))}/services`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Activate service to the user\n     * \n     * @param userId \n     * @param serviceId \n     * @param authorization Token of authentication\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public setUserService(userId: number, serviceId: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public setUserService(userId: number, serviceId: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public setUserService(userId: number, serviceId: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public setUserService(userId: number, serviceId: number, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (userId === null || userId === undefined) {\n            throw new Error('Required parameter userId was null or undefined when calling setUserService.');\n        }\n\n        if (serviceId === null || serviceId === undefined) {\n            throw new Error('Required parameter serviceId was null or undefined when calling setUserService.');\n        }\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling setUserService.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.post<any>(`${this.basePath}/users/${encodeURIComponent(String(userId))}/services/${encodeURIComponent(String(serviceId))}`,\n            null,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * MAAS API\n * This is the Mobility as a Service API\n *\n * OpenAPI spec version: 1.0.0\n * Contact: avalls@nexusgeographics.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs/Observable';\n\nimport { PrivacyPolicy } from '../model/privacyPolicy';\nimport { ServiceCondition } from '../model/serviceCondition';\nimport { Terms } from '../model/terms';\nimport { TermsRequest } from '../model/termsRequest';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class TermsService {\n\n    protected basePath = 'http://maas.nexusgeografics.com/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * User accepts a privacy policy\n     * \n     * @param userId \n     * @param privatePolicyId \n     * @param authorization \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public acceptPrivacyPolicy(userId: number, privatePolicyId: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public acceptPrivacyPolicy(userId: number, privatePolicyId: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public acceptPrivacyPolicy(userId: number, privatePolicyId: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public acceptPrivacyPolicy(userId: number, privatePolicyId: number, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (userId === null || userId === undefined) {\n            throw new Error('Required parameter userId was null or undefined when calling acceptPrivacyPolicy.');\n        }\n        if (privatePolicyId === null || privatePolicyId === undefined) {\n            throw new Error('Required parameter privatePolicyId was null or undefined when calling acceptPrivacyPolicy.');\n        }\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling acceptPrivacyPolicy.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.post<any>(`${this.basePath}/users/${encodeURIComponent(String(userId))}/privacyPolicies/${encodeURIComponent(String(privatePolicyId))}`,\n            null,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * User accepts service conditions\n     * \n     * @param userId \n     * @param serviceConditionId \n     * @param authorization \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public acceptServiceCondition(userId: number, serviceConditionId: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public acceptServiceCondition(userId: number, serviceConditionId: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public acceptServiceCondition(userId: number, serviceConditionId: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public acceptServiceCondition(userId: number, serviceConditionId: number, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (userId === null || userId === undefined) {\n            throw new Error('Required parameter userId was null or undefined when calling acceptServiceCondition.');\n        }\n        if (serviceConditionId === null || serviceConditionId === undefined) {\n            throw new Error('Required parameter serviceConditionId was null or undefined when calling acceptServiceCondition.');\n        }\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling acceptServiceCondition.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.post<any>(`${this.basePath}/users/${encodeURIComponent(String(userId))}/serviceConditions/${encodeURIComponent(String(serviceConditionId))}`,\n            null,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Create a new privacy policy\n     * \n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createPrivacyPolicy(body: any, observe?: 'body', reportProgress?: boolean): Observable<PrivacyPolicy>;\n    public createPrivacyPolicy(body: any, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PrivacyPolicy>>;\n    public createPrivacyPolicy(body: any, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PrivacyPolicy>>;\n    public createPrivacyPolicy(body: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling createPrivacyPolicy.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<PrivacyPolicy>(`${this.basePath}/privacyPolicies`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Create a new service condition\n     * \n     * @param authorization \n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createServiceCondition(authorization: string, body: any, observe?: 'body', reportProgress?: boolean): Observable<ServiceCondition>;\n    public createServiceCondition(authorization: string, body: any, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ServiceCondition>>;\n    public createServiceCondition(authorization: string, body: any, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ServiceCondition>>;\n    public createServiceCondition(authorization: string, body: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling createServiceCondition.');\n        }\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling createServiceCondition.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<ServiceCondition>(`${this.basePath}/serviceConditions`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * User declines a privacy policy\n     * \n     * @param userId \n     * @param privatePolicyId \n     * @param authorization \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public declinePrivacyPolicy(userId: number, privatePolicyId: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public declinePrivacyPolicy(userId: number, privatePolicyId: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public declinePrivacyPolicy(userId: number, privatePolicyId: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public declinePrivacyPolicy(userId: number, privatePolicyId: number, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (userId === null || userId === undefined) {\n            throw new Error('Required parameter userId was null or undefined when calling declinePrivacyPolicy.');\n        }\n        if (privatePolicyId === null || privatePolicyId === undefined) {\n            throw new Error('Required parameter privatePolicyId was null or undefined when calling declinePrivacyPolicy.');\n        }\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling declinePrivacyPolicy.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}/users/${encodeURIComponent(String(userId))}/privacyPolicies/${encodeURIComponent(String(privatePolicyId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * User declines service conditions\n     * \n     * @param userId \n     * @param serviceConditionId \n     * @param authorization \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public declineServiceCondition(userId: number, serviceConditionId: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public declineServiceCondition(userId: number, serviceConditionId: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public declineServiceCondition(userId: number, serviceConditionId: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public declineServiceCondition(userId: number, serviceConditionId: number, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (userId === null || userId === undefined) {\n            throw new Error('Required parameter userId was null or undefined when calling declineServiceCondition.');\n        }\n        if (serviceConditionId === null || serviceConditionId === undefined) {\n            throw new Error('Required parameter serviceConditionId was null or undefined when calling declineServiceCondition.');\n        }\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling declineServiceCondition.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}/users/${encodeURIComponent(String(userId))}/serviceConditions/${encodeURIComponent(String(serviceConditionId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete privacy policy\n     * \n     * @param privacyPolicyId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deletePrivacyPolicy(privacyPolicyId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deletePrivacyPolicy(privacyPolicyId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deletePrivacyPolicy(privacyPolicyId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deletePrivacyPolicy(privacyPolicyId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (privacyPolicyId === null || privacyPolicyId === undefined) {\n            throw new Error('Required parameter privacyPolicyId was null or undefined when calling deletePrivacyPolicy.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}/privacyPolicies/${encodeURIComponent(String(privacyPolicyId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete service condition\n     * \n     * @param serviceConditionId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteServiceCondition(serviceConditionId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteServiceCondition(serviceConditionId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteServiceCondition(serviceConditionId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteServiceCondition(serviceConditionId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (serviceConditionId === null || serviceConditionId === undefined) {\n            throw new Error('Required parameter serviceConditionId was null or undefined when calling deleteServiceCondition.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}/serviceConditions/${encodeURIComponent(String(serviceConditionId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Edit privacy policy\n     * \n     * @param privacyPolicyId \n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public editPrivacyPolicy(privacyPolicyId: number, body: any, observe?: 'body', reportProgress?: boolean): Observable<PrivacyPolicy>;\n    public editPrivacyPolicy(privacyPolicyId: number, body: any, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PrivacyPolicy>>;\n    public editPrivacyPolicy(privacyPolicyId: number, body: any, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PrivacyPolicy>>;\n    public editPrivacyPolicy(privacyPolicyId: number, body: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (privacyPolicyId === null || privacyPolicyId === undefined) {\n            throw new Error('Required parameter privacyPolicyId was null or undefined when calling editPrivacyPolicy.');\n        }\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling editPrivacyPolicy.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<PrivacyPolicy>(`${this.basePath}/privacyPolicies/${encodeURIComponent(String(privacyPolicyId))}`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Edit service condition\n     * \n     * @param serviceConditionId \n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public editServiceCondition(serviceConditionId: number, body: any, observe?: 'body', reportProgress?: boolean): Observable<ServiceCondition>;\n    public editServiceCondition(serviceConditionId: number, body: any, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ServiceCondition>>;\n    public editServiceCondition(serviceConditionId: number, body: any, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ServiceCondition>>;\n    public editServiceCondition(serviceConditionId: number, body: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (serviceConditionId === null || serviceConditionId === undefined) {\n            throw new Error('Required parameter serviceConditionId was null or undefined when calling editServiceCondition.');\n        }\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling editServiceCondition.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<ServiceCondition>(`${this.basePath}/serviceConditions/${encodeURIComponent(String(serviceConditionId))}`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get all list\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getAllPrivacyPolices(observe?: 'body', reportProgress?: boolean): Observable<Array<PrivacyPolicy>>;\n    public getAllPrivacyPolices(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<PrivacyPolicy>>>;\n    public getAllPrivacyPolices(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<PrivacyPolicy>>>;\n    public getAllPrivacyPolices(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<Array<PrivacyPolicy>>(`${this.basePath}/privacyPolicies`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get all list\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getAllServiceConditions(observe?: 'body', reportProgress?: boolean): Observable<Array<ServiceCondition>>;\n    public getAllServiceConditions(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ServiceCondition>>>;\n    public getAllServiceConditions(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ServiceCondition>>>;\n    public getAllServiceConditions(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<Array<ServiceCondition>>(`${this.basePath}/serviceConditions`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get a privacy policy\n     * \n     * @param privacyPolicyId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPrivacyPolicyById(privacyPolicyId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public getPrivacyPolicyById(privacyPolicyId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public getPrivacyPolicyById(privacyPolicyId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public getPrivacyPolicyById(privacyPolicyId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (privacyPolicyId === null || privacyPolicyId === undefined) {\n            throw new Error('Required parameter privacyPolicyId was null or undefined when calling getPrivacyPolicyById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<PrivacyPolicy>(`${this.basePath}/privacyPolicies/${encodeURIComponent(String(privacyPolicyId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get a service condition\n     * \n     * @param serviceConditionId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getServiceConditionById(serviceConditionId: number, observe?: 'body', reportProgress?: boolean): Observable<ServiceCondition>;\n    public getServiceConditionById(serviceConditionId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ServiceCondition>>;\n    public getServiceConditionById(serviceConditionId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ServiceCondition>>;\n    public getServiceConditionById(serviceConditionId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (serviceConditionId === null || serviceConditionId === undefined) {\n            throw new Error('Required parameter serviceConditionId was null or undefined when calling getServiceConditionById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<ServiceCondition>(`${this.basePath}/serviceConditions/${encodeURIComponent(String(serviceConditionId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get the current user accepted terms and conditions\n     * \n     * @param userId \n     * @param authorization \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getTerms(userId: number, authorization: string, type?: string, observe?: 'body', reportProgress?: boolean): Observable<Terms>;\n    public getTerms(userId: number, authorization: string, type?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Terms>>;\n    public getTerms(userId: number, authorization: string, type?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Terms>>;\n    public getTerms(userId: number, authorization: string, type?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (userId === null || userId === undefined) {\n            throw new Error('Required parameter userId was null or undefined when calling getTerms.');\n        }\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling getTerms.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (type !== undefined && type !== null) {\n            queryParameters = queryParameters.set('type', <any>type);\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<Terms>(`${this.basePath}/users/${encodeURIComponent(String(userId))}/terms`,\n            {\n                params : queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Save the terms\n     * \n     * @param userId \n     * @param authorization \n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public saveTerms(userId: number, authorization: string, body: TermsRequest, observe?: 'body', reportProgress?: boolean): Observable<Terms>;\n    public saveTerms(userId: number, authorization: string, body: TermsRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Terms>>;\n    public saveTerms(userId: number, authorization: string, body: TermsRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Terms>>;\n    public saveTerms(userId: number, authorization: string, body: TermsRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (userId === null || userId === undefined) {\n            throw new Error('Required parameter userId was null or undefined when calling saveTerms.');\n        }\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling saveTerms.');\n        }\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling saveTerms.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<Terms>(`${this.basePath}/users/${encodeURIComponent(String(userId))}/terms`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * MAAS API\n * This is the Mobility as a Service API\n *\n * OpenAPI spec version: 1.0.0\n * Contact: avalls@nexusgeographics.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional } from '@angular/core';\nimport {\n    HttpClient, HttpHeaders, HttpParams,\n    HttpResponse, HttpEvent\n} from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec } from '../encoder';\n\nimport { Observable } from 'rxjs/Observable';\n\nimport { Annulation } from '../model/annulation';\nimport { RefundData } from '../model/refundData';\nimport { Ticket } from '../model/ticket';\nimport { Transaction } from '../model/transaction';\n\nimport { BASE_PATH, COLLECTION_FORMATS } from '../variables';\nimport { Configuration } from '../configuration';\nimport { PagedTransactions } from '../model/pagedTransactions';\nimport { query } from '@angular/animations';\nimport { config } from 'config/config';\nimport { TicketDetailed } from '../model/ticketDetailed';\n\n\n@Injectable()\nexport class TicketsService {\n\n    protected basePath = 'http://maas.nexusgeografics.com/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Get annulation details\n     * Returns annulation details, included if the complaint is annullable.\n     * @param annulationId \n     * @param authorization Token of authentication\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public annulation(annulationId: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<Annulation>;\n    public annulation(annulationId: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Annulation>>;\n    public annulation(annulationId: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Annulation>>;\n    public annulation(annulationId: number, authorization: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n        if (annulationId === null || annulationId === undefined) {\n            throw new Error('Required parameter annulationId was null or undefined when calling annulation.');\n        }\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling annulation.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<Annulation>(`${this.basePath}/fines/annulation/${encodeURIComponent(String(annulationId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n\n    /**\n     * Get tickets by filters\n     * \n     * @param startDate \n     * @param authorization Token of authentication\n     * @param max Maximun number of tickets to return. Returns all the tickets if not set or 0\n     * @param sort Sorting method applied to the list of tickets. Applied before the \\&quot;max\\&quot;. Dates are ordered descending.\n     * @param endDate \n     * @param startDateMin Start date minimum range in unix time.\n     * @param startDateMax Start date maximum range in unix time.\n     * @param endDateMin End date minimum range in unix time.\n     * @param endDateMax End date maximum range in unix time.\n     * @param tickets List of ticket ids to search for.\n     * @param plateNumbers Plate number to search for. Filter compatible with other params.\n     * @param users List of userIds to search for. Not  required for unipersonal users, as the search will be done with the userId from the bearer token and this param will be skipped. Only available to fleet admin users.  Not compatible with the thirduserId parameter.\n     * @param services Service filter\n     * @param cities CityId filter\n     * @param zoneTypes List of zoneTypeId\n     * @param ticketTypes \n     * @param email ONLY BO: By user email or gremi email\n     * @param userStateId ONLY BO: By user state id\n     * @param nif ONLY BO: By user nif or gremi nif\n     * @param phoneNumber ONLY BO: By user phone number or gremi phone number.\n     * @param guildId ONLY BO: By gremi id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getAllTickets(startDate: Date, authorization: string, max?: number, sort?: string, endDate?: Date, startDateMin?: Date, startDateMax?: Date, endDateMin?: Date, endDateMax?: Date, tickets?: Array<number>, plateNumbers?: Array<string>, users?: Array<string>, services?: Array<number>, cities?: Array<number>, zoneTypes?: Array<string>, ticketTypes?: Array<number>, email?: string, userStateId?: string, nif?: string, phoneNumber?: string, guildId?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Ticket>>;\n    public getAllTickets(startDate: Date, authorization: string, max?: number, sort?: string, endDate?: Date, startDateMin?: Date, startDateMax?: Date, endDateMin?: Date, endDateMax?: Date, tickets?: Array<number>, plateNumbers?: Array<string>, users?: Array<string>, services?: Array<number>, cities?: Array<number>, zoneTypes?: Array<string>, ticketTypes?: Array<number>, email?: string, userStateId?: string, nif?: string, phoneNumber?: string, guildId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Ticket>>>;\n    public getAllTickets(startDate: Date, authorization: string, max?: number, sort?: string, endDate?: Date, startDateMin?: Date, startDateMax?: Date, endDateMin?: Date, endDateMax?: Date, tickets?: Array<number>, plateNumbers?: Array<string>, users?: Array<string>, services?: Array<number>, cities?: Array<number>, zoneTypes?: Array<string>, ticketTypes?: Array<number>, email?: string, userStateId?: string, nif?: string, phoneNumber?: string, guildId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Ticket>>>;\n    public getAllTickets(startDate: Date, authorization: string, max?: number, sort?: string, endDate?: Date, startDateMin?: Date, startDateMax?: Date, endDateMin?: Date, endDateMax?: Date, tickets?: Array<number>, plateNumbers?: Array<string>, users?: Array<string>, services?: Array<number>, cities?: Array<number>, zoneTypes?: Array<string>, ticketTypes?: Array<number>, email?: string, userStateId?: string, nif?: string, phoneNumber?: string, guildId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling getAllTickets.');\n        }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (max !== undefined && max !== null) {\n            queryParameters = queryParameters.set('max', <any>max);\n        }\n        if (sort !== undefined && sort !== null) {\n            queryParameters = queryParameters.set('sort', <any>sort);\n        }\n        if (startDate !== undefined && startDate !== null) {\n            queryParameters = queryParameters.set('startDate', <any>startDate.toISOString());\n        }\n        if (endDate !== undefined && endDate !== null) {\n            queryParameters = queryParameters.set('endDate', <any>endDate.toISOString());\n        }\n        if (startDateMin !== undefined && startDateMin !== null) {\n            queryParameters = queryParameters.set('startDateMin', <any>startDateMin.toISOString());\n        }\n        if (startDateMax !== undefined && startDateMax !== null) {\n            queryParameters = queryParameters.set('startDateMax', <any>startDateMax.toISOString());\n        }\n        if (endDateMin !== undefined && endDateMin !== null) {\n            queryParameters = queryParameters.set('endDateMin', <any>endDateMin.toISOString());\n        }\n        if (endDateMax !== undefined && endDateMax !== null) {\n            queryParameters = queryParameters.set('endDateMax', <any>endDateMax.toISOString());\n        }\n        if (tickets) {\n            tickets.forEach((element) => {\n                queryParameters = queryParameters.append('tickets', <any>element);\n            })\n        }\n        if (plateNumbers) {\n            plateNumbers.forEach((element) => {\n                queryParameters = queryParameters.append('plateNumbers', <any>element);\n            })\n        }\n        if (users) {\n            users.forEach((element) => {\n                queryParameters = queryParameters.append('users', <any>element);\n            })\n        }\n        if (services) {\n            services.forEach((element) => {\n                queryParameters = queryParameters.append('services', <any>element);\n            })\n        }\n        if (cities) {\n            cities.forEach((element) => {\n                queryParameters = queryParameters.append('cities', <any>element);\n            })\n        }\n        if (zoneTypes) {\n            zoneTypes.forEach((element) => {\n                queryParameters = queryParameters.append('zoneTypes', <any>element);\n            })\n        }\n        if (ticketTypes) {\n            ticketTypes.forEach((element) => {\n                queryParameters = queryParameters.append('ticketTypes', <any>element);\n            })\n        }\n        if (email !== undefined && email !== null) {\n            queryParameters = queryParameters.set('email', <any>email);\n        }\n        if (userStateId !== undefined && userStateId !== null) {\n            queryParameters = queryParameters.set('userStateId', <any>userStateId);\n        }\n        if (nif !== undefined && nif !== null) {\n            queryParameters = queryParameters.set('nif', <any>nif);\n        }\n        if (phoneNumber !== undefined && phoneNumber !== null) {\n            queryParameters = queryParameters.set('phoneNumber', <any>phoneNumber);\n        }\n        if (guildId !== undefined && guildId !== null) {\n            queryParameters = queryParameters.set('guildId', <any>guildId);\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<Array<Ticket>>(`${this.basePath}/tickets`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n\n    /**\n     * Get monthly receipt for users\n     * Monthly receipt for users, that includes the balance and usage for the user and it&#39;s fleet.\n     * @param year \n     * @param month \n     * @param authorization Token of authentication\n     * @param accountId To be uses in the BO MAAS\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public monthlyExtract(year: string, month: number, authorization: string, accountId?: number, observe?: 'body', reportProgress?: boolean): Observable<Blob>;\n    public monthlyExtract(year: string, month: number, authorization: string, accountId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;\n    public monthlyExtract(year: string, month: number, authorization: string, accountId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;\n    public monthlyExtract(year: string, month: number, authorization: string, accountId?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n        if (year === null || year === undefined) {\n            throw new Error('Required parameter year was null or undefined when calling monthlyExtract.');\n        }\n        if (month === null || month === undefined) {\n            throw new Error('Required parameter month was null or undefined when calling monthlyExtract.');\n        }\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling monthlyExtract.');\n        }\n\n        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });\n        if (accountId !== undefined) {\n            queryParameters = queryParameters.set('accountId', <any>accountId);\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json, text/plain, */*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        headers = headers.set('Content-Type', 'application/pdf');\n\n        return this.httpClient.get<any>(`${this.basePath}/monthlyExtracts/${encodeURIComponent(String(year))}/${encodeURIComponent(String(month))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress,\n                responseType: 'blob' as 'json'\n            }\n        );\n    }\n\n    /**\n     * Get monthly receipt by city.\n     * Monthly receipt by city\n     * @param cityId \n     * @param year \n     * @param month \n     * @param authorization Token of authentication\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public monthlyExtractByCity(cityId: number, year: number, month: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public monthlyExtractByCity(cityId: number, year: number, month: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public monthlyExtractByCity(cityId: number, year: number, month: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public monthlyExtractByCity(cityId: number, year: number, month: number, authorization: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n        if (cityId === null || cityId === undefined) {\n            throw new Error('Required parameter cityId was null or undefined when calling monthlyExtractByCity.');\n        }\n        if (year === null || year === undefined) {\n            throw new Error('Required parameter year was null or undefined when calling monthlyExtractByCity.');\n        }\n        if (month === null || month === undefined) {\n            throw new Error('Required parameter month was null or undefined when calling monthlyExtractByCity.');\n        }\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling monthlyExtractByCity.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json, text/plain, */*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        headers = headers.set('Content-Type', 'application/pdf');\n\n        return this.httpClient.get<any>(`${this.basePath}/monthlyExtracts/${encodeURIComponent(String(cityId))}/${encodeURIComponent(String(year))}/${encodeURIComponent(String(month))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress,\n                responseType: 'blob' as 'json'\n            }\n        );\n    }\n\n    /**\n     * Pay annulation\n     * \n     * @param annulationId \n     * @param authorization Token of authentication\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public payAnnulation(annulationId: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<Ticket>;\n    public payAnnulation(annulationId: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Ticket>>;\n    public payAnnulation(annulationId: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Ticket>>;\n    public payAnnulation(annulationId: number, authorization: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n        if (annulationId === null || annulationId === undefined) {\n            throw new Error('Required parameter annulationId was null or undefined when calling payAnnulation.');\n        }\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling payAnnulation.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.put<Ticket>(`${this.basePath}/fines/annulation/${encodeURIComponent(String(annulationId))}`,\n            null,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Refund all or part of a ticket\n     * \n     * @param authorization Token of authentication\n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public refundTicket(authorization: string, body: RefundData, observe?: 'body', reportProgress?: boolean): Observable<Ticket>;\n    public refundTicket(authorization: string, body: RefundData, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Ticket>>;\n    public refundTicket(authorization: string, body: RefundData, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Ticket>>;\n    public refundTicket(authorization: string, body: RefundData, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling refundTicket.');\n        }\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling refundTicket.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n        let httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<Ticket>(`${this.basePath}/refunds`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get annulation details\n     * Returns annulation details, included if the complaint is annullable.\n     * @param annulationId \n     * @param locale Default &#39;es&#39;\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public thirdAnnulation(annulationId: number, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<Annulation>;\n    public thirdAnnulation(annulationId: number, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Annulation>>;\n    public thirdAnnulation(annulationId: number, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Annulation>>;\n    public thirdAnnulation(annulationId: number, locale?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n        if (annulationId === null || annulationId === undefined) {\n            throw new Error('Required parameter annulationId was null or undefined when calling thirdAnnulation.');\n        }\n\n        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });\n        if (locale !== undefined) {\n            queryParameters = queryParameters.set('locale', <any>locale);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<Annulation>(`${this.basePath}/thirdparty/fines/annulation/${encodeURIComponent(String(annulationId))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Pay annulation\n     * \n     * @param annulationId \n     * @param locale Default &#39;es&#39;\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public thirdPayAnnulation(annulationId: number, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<Ticket>;\n    public thirdPayAnnulation(annulationId: number, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Ticket>>;\n    public thirdPayAnnulation(annulationId: number, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Ticket>>;\n    public thirdPayAnnulation(annulationId: number, locale?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n        if (annulationId === null || annulationId === undefined) {\n            throw new Error('Required parameter annulationId was null or undefined when calling thirdPayAnnulation.');\n        }\n\n        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });\n        if (locale !== undefined) {\n            queryParameters = queryParameters.set('locale', <any>locale);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.put<Ticket>(`${this.basePath}/thirdparty/fines/annulation/${encodeURIComponent(String(annulationId))}`,\n            null,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get monthly receipt for third user\n     * Monthly receipt for third user, that includes the balance and usage\n     * @param year Year with four digits\n     * @param month 1..12\n     * @param authorization Token of authentication\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public thirdUsersMonthlyExtract(year: string, month: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public thirdUsersMonthlyExtract(year: string, month: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public thirdUsersMonthlyExtract(year: string, month: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public thirdUsersMonthlyExtract(year: string, month: number, authorization: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n        if (year === null || year === undefined) {\n            throw new Error('Required parameter year was null or undefined when calling thirdUsersMonthlyExtract.');\n        }\n        if (month === null || month === undefined) {\n            throw new Error('Required parameter month was null or undefined when calling thirdUsersMonthlyExtract.');\n        }\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling thirdUsersMonthlyExtract.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/pdf'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/thirdusers/monthlyExtracts/${encodeURIComponent(String(year))}/${encodeURIComponent(String(month))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get a ticket\n     * Content-Type: * application/pdf * application/json\n     * @param movementId \n     * @param authorization Token of authentication\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public ticket(movementId: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<Blob>;\n    public ticket(movementId: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;\n    public ticket(movementId: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;\n    public ticket(movementId: number, authorization: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n        if (movementId === null || movementId === undefined) {\n            throw new Error('Required parameter movementId was null or undefined when calling ticket.');\n        }\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling ticket.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        // to determine the Content-Type header\n        headers = headers.set('Content-Type', 'application/pdf');\n\n        return this.httpClient.get<Ticket>(`${this.basePath}/tickets/${encodeURIComponent(String(movementId))}/pdf`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress,\n                responseType: 'blob' as 'json'\n            }\n        );\n    }\n\n    /**\n     * Get tickets by filters\n     * \n     * @param authorization Token of authentication\n     * @param startDate DateTime in unix format\n     * @param endDate DateTime in unix format\n     * @param zoneTypeId \n     * @param plateNumber \n     * @param userId This param is for the admin fleet.\n     * @param ticketType \n     * @param max Maximun number of tickets to return. Returns all the tickets if not set or 0\n     * @param ticketsId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public tickets(authorization: string, startDate?: Date, endDate?: Date, zoneTypeId?: Array<string>, plateNumber?: Array<string>, userId?: Array<string>, ticketType?: Array<number>, max?: number, ticketsId?: Array<string>, thirdUserId?: number, cityId?: Array<number>, startDateMin?: Date, startDateMax?: Date, endDateMin?: Date, endDateMax?: Date,\n        email?: string, userStateId?: string, nif?: string, telefon?: string, gremi?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Ticket>>;\n    public tickets(authorization: string, startDate?: Date, endDate?: Date, zoneTypeId?: Array<string>, plateNumber?: Array<string>, userId?: Array<string>, ticketType?: Array<number>, max?: number, ticketsId?: Array<string>, thirdUserId?: number, cityId?: Array<number>, startDateMin?: Date, startDateMax?: Date, endDateMin?: Date, endDateMax?: Date,\n        email?: string, userStateId?: string, nif?: string, telefon?: string, gremi?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Ticket>>>;\n    public tickets(authorization: string, startDate?: Date, endDate?: Date, zoneTypeId?: Array<string>, plateNumber?: Array<string>, userId?: Array<string>, ticketType?: Array<number>, max?: number, ticketsId?: Array<string>, thirdUserId?: number, cityId?: Array<number>, startDateMin?: Date, startDateMax?: Date, endDateMin?: Date, endDateMax?: Date,\n        email?: string, userStateId?: string, nif?: string, telefon?: string, gremi?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Ticket>>>;\n    public tickets(authorization: string, startDate?: Date, endDate?: Date, zoneTypeId?: Array<string>, plateNumber?: Array<string>, userId?: Array<string>, ticketType?: Array<number>, max?: number, ticketsId?: Array<string>, thirdUserId?: number, cityId?: Array<number>, startDateMin?: Date, startDateMax?: Date, endDateMin?: Date, endDateMax?: Date,\n        email?: string, userStateId?: string, nif?: string, telefon?: string, gremi?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n        max = config.MAX_TICKETS;\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling tickets.');\n        }\n\n        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });\n        if (startDate !== undefined) {\n            queryParameters = queryParameters.set('startDate', <any>startDate.toISOString());\n        }\n        if (endDate !== undefined) {\n            queryParameters = queryParameters.set('endDate', <any>endDate.toISOString());\n        }\n        if (startDateMin !== undefined) {\n            queryParameters = queryParameters.set('startDateMin', <any>startDateMin.toISOString());\n        }\n        if (startDateMax !== undefined) {\n            queryParameters = queryParameters.set('startDateMax', <any>startDateMax.toISOString());\n        }\n        if (endDateMin !== undefined) {\n            queryParameters = queryParameters.set('endDateMin', <any>endDateMin.toISOString());\n        }\n        if (endDateMax !== undefined) {\n            queryParameters = queryParameters.set('endDateMax', <any>endDateMax.toISOString());\n        }\n        if (zoneTypeId) {\n            zoneTypeId.forEach((element) => {\n                queryParameters = queryParameters.append('zoneTypeId', <any>element);\n            })\n        }\n        if (cityId) {\n            cityId.forEach((element) => {\n                queryParameters = queryParameters.append('cityId', <any>element);\n            })\n        }\n        if (plateNumber) {\n            plateNumber.forEach((element) => {\n                queryParameters = queryParameters.append('plateNumber', <any>element);\n            })\n        }\n        if (userId) {\n            userId.forEach((element) => {\n                queryParameters = queryParameters.append('userId', <any>element);\n            })\n        }\n        if (ticketType) {\n            ticketType.forEach((element) => {\n                queryParameters = queryParameters.append('ticketType', <any>element);\n            })\n        }\n        if (max !== undefined) {\n            queryParameters = queryParameters.set('max', <any>max);\n        }\n\n        if (thirdUserId !== undefined) {\n            queryParameters = queryParameters.set('thirduserId', <any>thirdUserId);\n        }\n\n        if (ticketsId) {\n            ticketsId.forEach((element) => {\n                queryParameters = queryParameters.append('ticketsId', <any>element);\n            })\n        }\n\n        if (email !== undefined) {\n            queryParameters = queryParameters.set('email', <any>email);\n        }\n\n        if (userStateId !== undefined) {\n            queryParameters = queryParameters.set('userStateId', <any>userStateId);\n        }\n\n        if (nif !== undefined) {\n            queryParameters = queryParameters.set('nif', <any>nif);\n        }\n\n        if (telefon !== undefined) {\n            queryParameters = queryParameters.set('phoneNumber', <any>telefon);\n        }\n\n        if (gremi !== undefined) {\n            queryParameters = queryParameters.set('guildId', <any>gremi);\n        }\n\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<Array<Ticket>>(`${this.basePath}/movements`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n    * Get tickets by filters\n    * \n    * @param authorization Token of authentication\n    * @param startDate DateTime in unix format\n    * @param endDate DateTime in unix format\n    * @param zoneTypeId \n    * @param plateNumber \n    * @param userId This param is for the admin fleet.\n    * @param ticketType \n    * @param max Maximun number of tickets to return. Returns all the tickets if not set or 0\n    * @param ticketsId \n    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n    * @param reportProgress flag to report request and response progress.\n    */\n    public ticketsExcel(authorization: string, startDate?: Date, endDate?: Date, zoneTypeId?: Array<string>, plateNumber?: Array<string>, userId?: Array<string>, ticketType?: Array<number>, max?: number, ticketsId?: Array<string>, thirdUserId?: number, cityId?: Array<number>, startDateMin?: Date, startDateMax?: Date, endDateMin?: Date, endDateMax?: Date,\n        email?: string, userStateId?: string, nif?: string, telefon?: string, gremi?: string, observe?: 'body', reportProgress?: boolean): Observable<Blob>;\n    public ticketsExcel(authorization: string, startDate?: Date, endDate?: Date, zoneTypeId?: Array<string>, plateNumber?: Array<string>, userId?: Array<string>, ticketType?: Array<number>, max?: number, ticketsId?: Array<string>, thirdUserId?: number, cityId?: Array<number>, startDateMin?: Date, startDateMax?: Date, endDateMin?: Date, endDateMax?: Date,\n        email?: string, userStateId?: string, nif?: string, telefon?: string, gremi?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;\n    public ticketsExcel(authorization: string, startDate?: Date, endDate?: Date, zoneTypeId?: Array<string>, plateNumber?: Array<string>, userId?: Array<string>, ticketType?: Array<number>, max?: number, ticketsId?: Array<string>, thirdUserId?: number, cityId?: Array<number>, startDateMin?: Date, startDateMax?: Date, endDateMin?: Date, endDateMax?: Date,\n        email?: string, userStateId?: string, nif?: string, telefon?: string, gremi?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;\n    public ticketsExcel(authorization: string, startDate?: Date, endDate?: Date, zoneTypeId?: Array<string>, plateNumber?: Array<string>, userId?: Array<string>, ticketType?: Array<number>, max?: number, ticketsId?: Array<string>, thirdUserId?: number, cityId?: Array<number>, startDateMin?: Date, startDateMax?: Date, endDateMin?: Date, endDateMax?: Date,\n        email?: string, userStateId?: string, nif?: string, telefon?: string, gremi?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n        max = config.MAX_TICKETS_EXPORT;\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling tickets.');\n        }\n\n        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });\n        if (startDate !== undefined) {\n            queryParameters = queryParameters.set('startDate', <any>startDate.toISOString());\n        }\n        if (endDate !== undefined) {\n            queryParameters = queryParameters.set('endDate', <any>endDate.toISOString());\n        }\n        if (startDateMin !== undefined) {\n            queryParameters = queryParameters.set('startDateMin', <any>startDateMin.toISOString());\n        }\n        if (startDateMax !== undefined) {\n            queryParameters = queryParameters.set('startDateMax', <any>startDateMax.toISOString());\n        }\n        if (endDateMin !== undefined) {\n            queryParameters = queryParameters.set('endDateMin', <any>endDateMin.toISOString());\n        }\n        if (endDateMax !== undefined) {\n            queryParameters = queryParameters.set('endDateMax', <any>endDateMax.toISOString());\n        }\n        if (zoneTypeId) {\n            zoneTypeId.forEach((element) => {\n                queryParameters = queryParameters.append('zoneTypes', <any>element);\n            })\n        }\n        if (cityId) {\n            cityId.forEach((element) => {\n                queryParameters = queryParameters.append('cities', <any>element);\n            })\n        }\n        if (plateNumber) {\n            plateNumber.forEach((element) => {\n                queryParameters = queryParameters.append('plateNumbers', <any>element);\n            })\n        }\n        if (userId) {\n            userId.forEach((element) => {\n                queryParameters = queryParameters.append('users', <any>element);\n            })\n        }\n        if (ticketType) {\n            ticketType.forEach((element) => {\n                queryParameters = queryParameters.append('ticketTypes', <any>element);\n            })\n        }\n        if (max !== undefined) {\n            queryParameters = queryParameters.set('max', <any>max);\n        }\n\n        if (ticketsId) {\n            ticketsId.forEach((element) => {\n                queryParameters = queryParameters.append('tickets', <any>element);\n            })\n        }\n\n        if (email !== undefined) {\n            queryParameters = queryParameters.set('email', <any>email);\n        }\n\n        if (userStateId !== undefined) {\n            queryParameters = queryParameters.set('userStateId', <any>userStateId);\n        }\n\n        if (nif !== undefined) {\n            queryParameters = queryParameters.set('nif', <any>nif);\n        }\n\n        if (telefon !== undefined) {\n            queryParameters = queryParameters.set('telefon', <any>telefon);\n        }\n\n        if (gremi !== undefined) {\n            queryParameters = queryParameters.set('gremi', <any>gremi);\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        /*\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n        */\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        headers = headers.set('Content-Type', 'application/vnd.ms-excel');\n\n        return this.httpClient.get<Array<Ticket>>(`${this.basePath}/tickets/xls`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress,\n                responseType: 'blob' as 'json'\n            }\n        );\n    }\n\n    /**\n   * Get tickets by filters\n   * \n   * @param authorization Token of authentication\n   * @param startDate DateTime in unix format\n   * @param endDate DateTime in unix format\n   * @param zoneTypeId \n   * @param plateNumber \n   * @param userId This param is for the admin fleet.\n   * @param ticketType \n   * @param max Maximun number of tickets to return. Returns all the tickets if not set or 0\n   * @param ticketsId \n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n    public ticketsPdf(authorization: string, startDate?: Date, endDate?: Date, zoneTypeId?: Array<string>, plateNumber?: Array<string>, userId?: Array<string>, ticketType?: Array<number>, max?: number, ticketsId?: Array<string>, thirdUserId?: number, cityId?: Array<number>, startDateMin?: Date, startDateMax?: Date, endDateMin?: Date, endDateMax?: Date,\n        email?: string, userStateId?: string, nif?: string, telefon?: string, gremi?: string, observe?: 'body', reportProgress?: boolean): Observable<Blob>;\n    public ticketsPdf(authorization: string, startDate?: Date, endDate?: Date, zoneTypeId?: Array<string>, plateNumber?: Array<string>, userId?: Array<string>, ticketType?: Array<number>, max?: number, ticketsId?: Array<string>, thirdUserId?: number, cityId?: Array<number>, startDateMin?: Date, startDateMax?: Date, endDateMin?: Date, endDateMax?: Date,\n        email?: string, userStateId?: string, nif?: string, telefon?: string, gremi?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;\n    public ticketsPdf(authorization: string, startDate?: Date, endDate?: Date, zoneTypeId?: Array<string>, plateNumber?: Array<string>, userId?: Array<string>, ticketType?: Array<number>, max?: number, ticketsId?: Array<string>, thirdUserId?: number, cityId?: Array<number>, startDateMin?: Date, startDateMax?: Date, endDateMin?: Date, endDateMax?: Date,\n        email?: string, userStateId?: string, nif?: string, telefon?: string, gremi?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;\n    public ticketsPdf(authorization: string, startDate?: Date, endDate?: Date, zoneTypeId?: Array<string>, plateNumber?: Array<string>, userId?: Array<string>, ticketType?: Array<number>, max?: number, ticketsId?: Array<string>, thirdUserId?: number, cityId?: Array<number>, startDateMin?: Date, startDateMax?: Date, endDateMin?: Date, endDateMax?: Date,\n        email?: string, userStateId?: string, nif?: string, telefon?: string, gremi?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n        max = config.MAX_TICKETS_EXPORT;\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling tickets.');\n        }\n\n        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });\n        if (startDate !== undefined) {\n            queryParameters = queryParameters.set('startDate', <any>startDate.toISOString());\n        }\n        if (endDate !== undefined) {\n            queryParameters = queryParameters.set('endDate', <any>endDate.toISOString());\n        }\n        if (startDateMin !== undefined) {\n            queryParameters = queryParameters.set('startDateMin', <any>startDateMin.toISOString());\n        }\n        if (startDateMax !== undefined) {\n            queryParameters = queryParameters.set('startDateMax', <any>startDateMax.toISOString());\n        }\n        if (endDateMin !== undefined) {\n            queryParameters = queryParameters.set('endDateMin', <any>endDateMin.toISOString());\n        }\n        if (endDateMax !== undefined) {\n            queryParameters = queryParameters.set('endDateMax', <any>endDateMax.toISOString());\n        }\n        if (zoneTypeId) {\n            zoneTypeId.forEach((element) => {\n                queryParameters = queryParameters.append('zoneTypes', <any>element);\n            })\n        }\n        if (cityId) {\n            cityId.forEach((element) => {\n                queryParameters = queryParameters.append('cities', <any>element);\n            })\n        }\n        if (plateNumber) {\n            plateNumber.forEach((element) => {\n                queryParameters = queryParameters.append('plateNumbers', <any>element);\n            })\n        }\n        if (userId) {\n            userId.forEach((element) => {\n                queryParameters = queryParameters.append('users', <any>element);\n            })\n        }\n        if (ticketType) {\n            ticketType.forEach((element) => {\n                queryParameters = queryParameters.append('ticketTypes', <any>element);\n            })\n        }\n        if (max !== undefined) {\n            queryParameters = queryParameters.set('max', <any>max);\n        }\n\n        if (ticketsId) {\n            ticketsId.forEach((element) => {\n                queryParameters = queryParameters.append('tickets', <any>element);\n            })\n        }\n\n        if (email !== undefined) {\n            queryParameters = queryParameters.set('email', <any>email);\n        }\n\n        if (userStateId !== undefined) {\n            queryParameters = queryParameters.set('userStateId', <any>userStateId);\n        }\n\n        if (nif !== undefined) {\n            queryParameters = queryParameters.set('nif', <any>nif);\n        }\n\n        if (telefon !== undefined) {\n            queryParameters = queryParameters.set('telefon', <any>telefon);\n        }\n\n        if (gremi !== undefined) {\n            queryParameters = queryParameters.set('gremi', <any>gremi);\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n        /*\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n        */\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        headers = headers.set('Content-Type', 'application/pdf');\n\n        return this.httpClient.get<Array<Ticket>>(`${this.basePath}/tickets/pdf`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress,\n                responseType: 'blob' as 'json'\n            }\n        );\n    }\n\n\n    /**\n     * Get tickets by filters\n     * \n     * @param ticketsId \n     * @param authorization Token of authentication\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public ticketsMailer(ticketsId: Array<number>, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public ticketsMailer(ticketsId: Array<number>, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public ticketsMailer(ticketsId: Array<number>, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public ticketsMailer(ticketsId: Array<number>, authorization: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n        if (ticketsId === null || ticketsId === undefined) {\n            throw new Error('Required parameter ticketsId was null or undefined when calling ticketsMailer.');\n        }\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling ticketsMailer.');\n        }\n\n        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });\n        if (ticketsId) {\n            ticketsId.forEach((element) => {\n                queryParameters = queryParameters.append('ticketsId', <any>element);\n            })\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/movements/mail`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n    * Get a detailed ticket\n    * This method returns a detailed ticket with all the configuration.  It&#39;s slower than the non detailed because extra queries must be done to get configurations. Only use it if configuration is a must.\n    * @param movementId \n    * @param authorization Token of authentication\n    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n    * @param reportProgress flag to report request and response progress.\n    */\n    public ticketDetailed(movementId: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<TicketDetailed>;\n    public ticketDetailed(movementId: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TicketDetailed>>;\n    public ticketDetailed(movementId: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TicketDetailed>>;\n    public ticketDetailed(movementId: number, authorization: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n        if (movementId === null || movementId === undefined) {\n            throw new Error('Required parameter movementId was null or undefined when calling ticketDetailed.');\n        }\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling ticketDetailed.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<TicketDetailed>(`${this.basePath}/movements/${encodeURIComponent(String(movementId))}/detailed`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n\n    /**\n     * Get a transaction\n     * \n     * @param transactionId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public transaction(transactionId: number, observe?: 'body', reportProgress?: boolean): Observable<Transaction>;\n    public transaction(transactionId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Transaction>>;\n    public transaction(transactionId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Transaction>>;\n    public transaction(transactionId: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n        if (transactionId === null || transactionId === undefined) {\n            throw new Error('Required parameter transactionId was null or undefined when calling transaction.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<Transaction>(`${this.basePath}/transactions/${encodeURIComponent(String(transactionId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n\n    /**\n     * Get bank transactions\n     * One of the filters are mandatory\n     * @param page Page number. For pagination purposes\n     * @param size Number of elements for page .For pagination purposes\n     * @param authorization Token of authentication\n     * @param userId \n     * @param startDate Show transactions from specific date.\n     * @param endDate Show transactions to specific date\n     * @param transTypeIds \n     * @param transStatusIds \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public transactions(page: number, size: number, authorization: string, userId?: number, startDate?: Date, endDate?: Date, transTypeIds?: Array<number>, transStatusIds?: Array<number>, ticketIds?: Array<number>, observe?: 'body', reportProgress?: boolean): Observable<PagedTransactions>;\n    public transactions(page: number, size: number, authorization: string, userId?: number, startDate?: Date, endDate?: Date, transTypeIds?: Array<number>, transStatusIds?: Array<number>, ticketIds?: Array<number>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedTransactions>>;\n    public transactions(page: number, size: number, authorization: string, userId?: number, startDate?: Date, endDate?: Date, transTypeIds?: Array<number>, transStatusIds?: Array<number>, ticketIds?: Array<number>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedTransactions>>;\n    public transactions(page: number, size: number, authorization: string, userId?: number, startDate?: Date, endDate?: Date, transTypeIds?: Array<number>, transStatusIds?: Array<number>, ticketIds?: Array<number>, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n\n        if (page === null || page === undefined) {\n            throw new Error('Required parameter page was null or undefined when calling transactions.');\n        }\n\n        if (size === null || size === undefined) {\n            throw new Error('Required parameter size was null or undefined when calling transactions.');\n        }\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling transactions.');\n        }\n\n\n\n\n\n\n        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });\n        if (userId !== undefined && userId !== null) {\n            queryParameters = queryParameters.set('userId', <any>userId);\n        }\n        if (page !== undefined && page !== null) {\n            queryParameters = queryParameters.set('page', <any>page);\n        }\n        if (size !== undefined && size !== null) {\n            queryParameters = queryParameters.set('size', <any>size);\n        }\n        if (startDate !== undefined && startDate !== null) {\n            queryParameters = queryParameters.set('startDate', <any>startDate.toISOString());\n        }\n        if (endDate !== undefined && endDate !== null) {\n            queryParameters = queryParameters.set('endDate', <any>endDate.toISOString());\n        }\n        if (transTypeIds) {\n            transTypeIds.forEach((element) => {\n                queryParameters = queryParameters.append('transTypeIds', <any>element);\n            })\n        }\n        if (transStatusIds) {\n            transStatusIds.forEach((element) => {\n                queryParameters = queryParameters.append('transStatusIds', <any>element);\n            })\n        }\n        if (ticketIds) {\n            ticketIds.forEach((element) => {\n                queryParameters = queryParameters.append('ticketIds', <any>element);\n            })\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<PagedTransactions>(`${this.basePath}/transactions`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get a single ticket with more info\n     * \n     * @param ticketId \n     * @param authorization Token of authentication\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public payTicket(ticketId: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public payTicket(ticketId: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public payTicket(ticketId: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public payTicket(ticketId: number, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (ticketId === null || ticketId === undefined) {\n            throw new Error('Required parameter ticketId was null or undefined when calling getTicket.');\n        }\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling getTicket.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.post<any>(`${this.basePath}/tickets/${encodeURIComponent(String(ticketId))}/pay`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n\n}\n","/**\n * MAAS API\n * This is the Mobility as a Service API\n *\n * OpenAPI spec version: 1.0.0\n * Contact: avalls@nexusgeographics.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional } from '@angular/core';\nimport {\n    HttpClient, HttpHeaders, HttpParams,\n    HttpResponse, HttpEvent\n} from '@angular/common/http';\nimport { Http, RequestOptions, Headers, URLSearchParams } from '@angular/http';\nimport { CustomHttpUrlEncodingCodec } from '../encoder';\n\nimport { Observable } from 'rxjs/Observable';\n\nimport { AccountRequest } from '../model/accountRequest';\nimport { ApiError } from '../model/apiError';\nimport { BlockCreditcardRequest } from '../model/blockCreditcardRequest';\nimport { BlockUserRequest } from '../model/blockUserRequest';\nimport { CreateAccountResponse } from '../model/createAccountResponse';\nimport { CreditCard } from '../model/creditCard';\nimport { OAuthDetails } from '../model/oAuthDetails';\nimport { OAuthError } from '../model/oAuthError';\nimport { ResetUserPasswordRequest } from '../model/resetUserPasswordRequest';\nimport { SupportRequest } from '../model/supportRequest';\nimport { User } from '../model/user';\nimport { UserUpdateRequest } from '../model/userUpdateRequest';\n\nimport { BASE_PATH, COLLECTION_FORMATS } from '../variables';\nimport { Configuration } from '../configuration';\nimport { query } from '@angular/animations';\nimport { Service } from '../model/models';\nimport { SproUserStatus } from '../model/sproUserStatus';\n\n\n@Injectable()\nexport class UserService {\n\n    protected basePath = 'http://maas.nexusgeografics.com/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected http: Http, protected httpClient: HttpClient,\n        @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Activate a user\n     * Activate a user with activationCode are required. If the user is already activated returns an error. \n     * @param activationCode The activation can be done with the activationCode\n     * @param authorization Token of authentication\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public activeUser(activationCode: string, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public activeUser(activationCode: string, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public activeUser(activationCode: string, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public activeUser(activationCode: string, authorization: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n        if (activationCode === null || activationCode === undefined) {\n            throw new Error('Required parameter activationCode was null or undefined when calling activeUser.');\n        }\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling activeUser.');\n        }\n\n        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });\n        if (activationCode !== undefined) {\n            queryParameters = queryParameters.set('activationCode', <any>activationCode);\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/users/activate`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Block CreditCard\n     * \n     * @param accountID \n     * @param authorization Token of authentication\n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public blockCreditcard(accountID: string, authorization: string, body: BlockCreditcardRequest, observe?: 'body', reportProgress?: boolean): Observable<CreditCard>;\n    public blockCreditcard(accountID: string, authorization: string, body: BlockCreditcardRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CreditCard>>;\n    public blockCreditcard(accountID: string, authorization: string, body: BlockCreditcardRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CreditCard>>;\n    public blockCreditcard(accountID: string, authorization: string, body: BlockCreditcardRequest, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n        if (accountID === null || accountID === undefined) {\n            throw new Error('Required parameter accountID was null or undefined when calling blockCreditcard.');\n        }\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling blockCreditcard.');\n        }\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling blockCreditcard.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n        let httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<CreditCard>(`${this.basePath}/accounts/${encodeURIComponent(String(accountID))}/blockCreditcard`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Block or Unblock an user\n     * \n     * @param userID \n     * @param authorization Token of authentication\n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public blockUser(userID: string, authorization: string, body: BlockUserRequest, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public blockUser(userID: string, authorization: string, body: BlockUserRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public blockUser(userID: string, authorization: string, body: BlockUserRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public blockUser(userID: string, authorization: string, body: BlockUserRequest, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n        if (userID === null || userID === undefined) {\n            throw new Error('Required parameter userID was null or undefined when calling blockFleetUser.');\n        }\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling blockFleetUser.');\n        }\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling blockFleetUser.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n        let httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}/users/${encodeURIComponent(String(userID))}/block`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Add fleet user\n     * Add a new fleet user\n     * @param accountID \n     * @param authorization Token of authentication\n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createFleetUser(accountID: string, authorization: string, body: AccountRequest, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public createFleetUser(accountID: string, authorization: string, body: AccountRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public createFleetUser(accountID: string, authorization: string, body: AccountRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public createFleetUser(accountID: string, authorization: string, body: AccountRequest, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n        if (accountID === null || accountID === undefined) {\n            throw new Error('Required parameter accountID was null or undefined when calling createFleetUser.');\n        }\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling createFleetUser.');\n        }\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling createFleetUser.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n        let httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}/accounts/${encodeURIComponent(String(accountID))}/fleets`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Create (unipersonal or admin fleet) user\n     * Create an *unipersonal* or *admin fleet* user and returns an activationCode. Needs to be activated after Ecosistema activation. &#x60;&#x60;&#x60; Create an Account and User entity. &#x60;&#x60;&#x60; \n     * @param authorization Token of authentication\n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createUser(authorization: string, body: AccountRequest, observe?: 'body', reportProgress?: boolean): Observable<CreateAccountResponse>;\n    public createUser(authorization: string, body: AccountRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CreateAccountResponse>>;\n    public createUser(authorization: string, body: AccountRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CreateAccountResponse>>;\n    public createUser(authorization: string, body: AccountRequest, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling createUser.');\n        }\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling createUser.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (Basic authentication) required\n        if (this.configuration.username || this.configuration.password) {\n            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n        let httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<CreateAccountResponse>(`${this.basePath}/accounts`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n  * Return user's active services \n  * @param authorization Token of authentication\n  * @param body \n  * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n  * @param reportProgress flag to report request and response progress.\n  */\n    public getUserServices(authorization: string, userId: string,\n        observe?: 'body', reportProgress?: boolean): Observable<Array<Service>>;\n    public getUserServices(authorization: string, userId: string,\n        observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Service>>>;\n    public getUserServices(authorization: string, userId: string,\n        observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Service>>>;\n    public getUserServices(authorization: string, userId: string,\n        observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling getUserServices.');\n        }\n\n        if (userId === null || authorization === userId) {\n            throw new Error('Required parameter userId was null or undefined when calling getUserServices.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (Basic authentication) required\n        if (this.configuration.username || this.configuration.password) {\n            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n        let httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.get<any>(`${this.basePath}/users/${userId}/services`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n\n    /**\n     * Delete user\n     * This can only be done on the web. If the user is part of a fleet, only can be done by admin user.\n     * @param userID \n     * @param authorization Token of authentication\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteUser(userID: string, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteUser(userID: string, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteUser(userID: string, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteUser(userID: string, authorization: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n        if (userID === null || userID === undefined) {\n            throw new Error('Required parameter userID was null or undefined when calling deleteUser.');\n        }\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling deleteUser.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}/users/${encodeURIComponent(String(userID))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Fleet users\n     * Returns all the user of a fleet\n     * @param accountID \n     * @param authorization Token of authentication\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public fleetUsers(accountID: string, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<Array<User>>;\n    public fleetUsers(accountID: string, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<User>>>;\n    public fleetUsers(accountID: string, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<User>>>;\n    public fleetUsers(accountID: string, authorization: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n        if (accountID === null || accountID === undefined) {\n            throw new Error('Required parameter accountID was null or undefined when calling fleetUsers.');\n        }\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling fleetUsers.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<Array<User>>(`${this.basePath}/accounts/${encodeURIComponent(String(accountID))}/fleets`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\t\n    /**\n     * Logout a specific user\n     * This action is used by BO users\n     * @param userId \n     * @param authorization Token of authentication\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public logoutUser(userId: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public logoutUser(userId: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public logoutUser(userId: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public logoutUser(userId: number, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (userId === null || userId === undefined) {\n            throw new Error('Required parameter userId was null or undefined when calling logoutUser.');\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}/users/${encodeURIComponent(String(userId))}/logout`,\n            null,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: null,\n                observe: 'response',\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n\n    /**\n     * Logs in user\n     * Logs in user\n     * @param clientId Client id\n     * @param grantType Should be password or refresh_token. In case of obtaining new access token use password,\n     * @param authorization Basic authorization should include client_id as username and client_secret as password.  String encoding &#x3D; Base64Encoder.encode (\\&quot;client_id:client_secret\\&quot;);  HttpPost httppost &#x3D; new HttpPost(\\&quot;http://host:post/oauth/token\\&quot;);  httppost.setHeader(\\&quot;Authorization\\&quot;, \\&quot;Basic \\&quot; + encoding);\n     * @param refreshToken Required in case of refreshing token\n     * @param username LDAP username or MAAS username depends on client specified.  Required in case of obtaining new access token\n     * @param password Password of specified user. Required in case of obtaining new access token\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public loginUser(clientId: string, grantType: string, authorization: string, refreshToken?: string, username?: string, password?: string, observe?: 'body', reportProgress?: boolean): Observable<OAuthDetails>;\n    public loginUser(clientId: string, grantType: string, authorization: string, refreshToken?: string, username?: string, password?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OAuthDetails>>;\n    public loginUser(clientId: string, grantType: string, authorization: string, refreshToken?: string, username?: string, password?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OAuthDetails>>;\n    public loginUser(clientId: string, grantType: string, authorization: string, refreshToken?: string, username?: string, password?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n        if (clientId === null || clientId === undefined) {\n            throw new Error('Required parameter clientId was null or undefined when calling loginUser.');\n        }\n        if (grantType === null || grantType === undefined) {\n            throw new Error('Required parameter grantType was null or undefined when calling loginUser.');\n        }\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling loginUser.');\n        }\n        let formData = '';\n        if (clientId !== undefined) {\n            formData = 'clientId=' + clientId;\n        }\n        if (grantType !== undefined) {\n            formData = formData + '&grant_type='+  grantType;\n        }\n        if (refreshToken !== undefined) {\n            formData = formData + '&refresh_token='+  refreshToken;\n        }\n        if (username !== undefined) {\n            formData = formData + '&username='+  username;\n\n        }\n        if (password !== undefined) {\n            formData = formData + '&password=' +  password;\n        }\n\n        let headers = new Headers();\n        if (authorization !== undefined && authorization !== null) {\n            headers.append('Authorization', String(authorization));\n        }\n\n        // authentication (Basic authentication) required\n        if (this.configuration.username || this.configuration.password) {\n            headers.append('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));\n        }\n\n        headers.append('Content-Type','application/x-www-form-urlencoded');\n        let queryParameters = new URLSearchParams();\n        queryParameters.append('client_id', clientId);\n        let options = new RequestOptions({\n           params : queryParameters,\n            headers: headers\n        });\n\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.http.post(`${this.basePath}/oauth/token`,\n            formData,\n            options\n        );\n    }\n\n    /**\n     * Resets user&#39;s password\n     * Resets user password\n     * @param authorization Token of authentication\n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public resetPassword(authorization: string, body: ResetUserPasswordRequest, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public resetPassword(authorization: string, body: ResetUserPasswordRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public resetPassword(authorization: string, body: ResetUserPasswordRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public resetPassword(authorization: string, body: ResetUserPasswordRequest, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling resetPassword.');\n        }\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling resetPassword.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n        let httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}/oauth/resetPwd`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get authorization code for email\n     * Gets authorization code used to reset password.\n     * @param email Email of user\n     * @param clientId Client ID\n     * @param authorization Token of authentication\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public resetPasswordInfo(email: string, clientId: string, bo:boolean, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public resetPasswordInfo(email: string, clientId: string, bo:boolean, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public resetPasswordInfo(email: string, clientId: string, bo:boolean, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public resetPasswordInfo(email: string, clientId: string, bo:boolean, authorization: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n        if (email === null || email === undefined) {\n            throw new Error('Required parameter email was null or undefined when calling resetPasswordInfo.');\n        }\n        if (clientId === null || clientId === undefined) {\n            throw new Error('Required parameter clientId was null or undefined when calling resetPasswordInfo.');\n        }\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling resetPasswordInfo.');\n        }\n\n        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });\n        if (email !== undefined) {\n            queryParameters = queryParameters.set('email', <any>email);\n        }\n        if (clientId !== undefined) {\n            queryParameters = queryParameters.set('client_id', <any>clientId);\n        }\n        queryParameters = queryParameters.set('bo', <any>true);\n        \n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/oauth/resetPwd`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Request support\n     * \n     * @param userID \n     * @param authorization Token of authentication\n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public support(userID: string, authorization: string, body: SupportRequest, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public support(userID: string, authorization: string, body: SupportRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public support(userID: string, authorization: string, body: SupportRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public support(userID: string, authorization: string, body: SupportRequest, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n        if (userID === null || userID === undefined) {\n            throw new Error('Required parameter userID was null or undefined when calling support.');\n        }\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling support.');\n        }\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling support.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n        let httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<any>(`${this.basePath}/users/${encodeURIComponent(String(userID))}/support`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: 'response',\n                reportProgress: reportProgress\n            }\n        );\n    }\n\t\n    /**\n     * Unlock an user that it was temporally blocked\n     * \n     * @param userId \n     * @param authorization Token of authentication\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public unlockUser(userId: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public unlockUser(userId: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public unlockUser(userId: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public unlockUser(userId: number, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (userId === null || userId === undefined) {\n            throw new Error('Required parameter userId was null or undefined when calling unlockUser.');\n        }\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling unlockUser.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.post<any>(`${this.basePath}/users/${encodeURIComponent(String(userId))}/unlock`,\n            null,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update user\n     * \n     * @param userID \n     * @param authorization Token of authentication\n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateUser(userID: string, authorization: string, body: UserUpdateRequest, observe?: 'body', reportProgress?: boolean): Observable<User>;\n    public updateUser(userID: string, authorization: string, body: UserUpdateRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<User>>;\n    public updateUser(userID: string, authorization: string, body: UserUpdateRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<User>>;\n    public updateUser(userID: string, authorization: string, body: UserUpdateRequest, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n        if (userID === null || userID === undefined) {\n            throw new Error('Required parameter userID was null or undefined when calling updateUser.');\n        }\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling updateUser.');\n        }\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling updateUser.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n        let httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<User>(`${this.basePath}/users/${encodeURIComponent(String(userID))}`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n       /**\n     * Get User\n     * Get user info.\n     * @param userId \n     * @param authorization Token of authentication\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public userStatus(userId: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<SproUserStatus>;\n    public userStatus(userId: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SproUserStatus>>;\n    public userStatus(userId: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SproUserStatus>>;\n    public userStatus(userId: number, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (userId === null || userId === undefined) {\n            throw new Error('Required parameter userId was null or undefined when calling user.');\n        }\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling user.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<SproUserStatus>(`${this.basePath}/users/${encodeURIComponent(String(userId))}/status`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get User\n     * Only applies fleets, to get info of one specific user.\n     * @param userID \n     * @param authorization Token of authentication\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public user(userID: string, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<User>;\n    public user(userID: string, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<User>>;\n    public user(userID: string, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<User>>;\n    public user(userID: string, authorization: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n        if (userID === null || userID === undefined) {\n            throw new Error('Required parameter userID was null or undefined when calling user.');\n        }\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling user.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<User>(`${this.basePath}/users/${encodeURIComponent(String(userID))}/detailed`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get user\n     * Get user by filters. This method is for helpdesk purpose. **Without query params the method doesn&#39;t return anything**\n     * @param authorization Token of authentication\n     * @param email To fins one specific user\n     * @param userStateID To find inactive users\n     * @param phone To find by phone\n     * @param document To find by NIF, NIE or passport\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public users(authorization: string, email?: string, userStateID?: number, phone?: string, document?: string, applicationId?:number, observe?: 'body', reportProgress?: boolean): Observable<Array<User>>;\n    public users(authorization: string, email?: string, userStateID?: number, phone?: string, document?: string, applicationId?:number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<User>>>;\n    public users(authorization: string, email?: string, userStateID?: number, phone?: string, document?: string, applicationId?:number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<User>>>;\n    public users(authorization: string, email?: string, userStateID?: number, phone?: string, document?: string, applicationId?:number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling users.');\n        }\n\n        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });\n        if (email !== undefined) {\n            queryParameters = queryParameters.set('email', <any>email);\n        }\n        if (userStateID !== undefined) {\n            queryParameters = queryParameters.set('userStateId', <any>userStateID);\n        }\n        if (phone !== undefined) {\n            queryParameters = queryParameters.set('phone', <any>phone);\n        }\n        if (document !== undefined) {\n            queryParameters = queryParameters.set('document', <any>document);\n        }\n        if (applicationId !== undefined) {\n            queryParameters = queryParameters.set('applicationId', <any>applicationId);\n        }\n        \n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<Array<User>>(`${this.basePath}/users`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * MAAS API\n * This is the Mobility as a Service API\n *\n * OpenAPI spec version: 1.0.0\n * Contact: avalls@nexusgeographics.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs/Observable';\n\nimport { Funcionality } from '../model/funcionality';\nimport { Profile } from '../model/profile';\nimport { UserBO } from '../model/userBO';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class UserboService {\n\n    protected basePath = 'http://maas.nexusgeografics.com/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Create a new user BO\n     * \n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createUserBo(body: UserBO, resendEmail?: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public createUserBo(body: UserBO, resendEmail?: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public createUserBo(body: UserBO, resendEmail?: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public createUserBo(body: UserBO, resendEmail?: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling createUserBo.');\n        }\n\n        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });\n        if (resendEmail) {\n            resendEmail.forEach((element) => {\n                queryParameters = queryParameters.append('resendEmail', <any>element);\n            })\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}/usersbo`,\n            body,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete user BO\n     * \n     * @param userboId \n     * @param authorization Token of authentication\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteUserBo(userboId: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteUserBo(userboId: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteUserBo(userboId: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteUserBo(userboId: number, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (userboId === null || userboId === undefined) {\n            throw new Error('Required parameter userboId was null or undefined when calling deleteUserBo.');\n        }\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling deleteUserBo.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}/usersbo/${encodeURIComponent(String(userboId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get all funcionalities\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getAllFuncionalities(observe?: 'body', reportProgress?: boolean): Observable<Array<Funcionality>>;\n    public getAllFuncionalities(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Funcionality>>>;\n    public getAllFuncionalities(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Funcionality>>>;\n    public getAllFuncionalities(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<Array<Funcionality>>(`${this.basePath}/funcionalities`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get all profiles\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getAllProfiles(observe?: 'body', reportProgress?: boolean): Observable<Array<Profile>>;\n    public getAllProfiles(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Profile>>>;\n    public getAllProfiles(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Profile>>>;\n    public getAllProfiles(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<Array<Profile>>(`${this.basePath}/profiles`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get all BO\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getAllUsersBo(observe?: 'body', reportProgress?: boolean): Observable<Array<UserBO>>;\n    public getAllUsersBo(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<UserBO>>>;\n    public getAllUsersBo(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<UserBO>>>;\n    public getAllUsersBo(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<Array<UserBO>>(`${this.basePath}/usersbo`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get User BO\n     * \n     * @param userboId \n     * @param authorization Token of authentication\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getUserBo(userboId: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<UserBO>;\n    public getUserBo(userboId: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserBO>>;\n    public getUserBo(userboId: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserBO>>;\n    public getUserBo(userboId: number, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (userboId === null || userboId === undefined) {\n            throw new Error('Required parameter userboId was null or undefined when calling getUserBo.');\n        }\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling getUserBo.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<UserBO>(`${this.basePath}/usersbo/${encodeURIComponent(String(userboId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update de funcionalities\n     * \n     * @param profileId \n     * @param authorization Token of authentication\n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateProfile(profileId: number, authorization: string, body: Array<Funcionality>, observe?: 'body', reportProgress?: boolean): Observable<Profile>;\n    public updateProfile(profileId: number, authorization: string, body: Array<Funcionality>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Profile>>;\n    public updateProfile(profileId: number, authorization: string, body: Array<Funcionality>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Profile>>;\n    public updateProfile(profileId: number, authorization: string, body: Array<Funcionality>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (profileId === null || profileId === undefined) {\n            throw new Error('Required parameter profileId was null or undefined when calling updateProfile.');\n        }\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling updateProfile.');\n        }\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling updateProfile.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<Profile>(`${this.basePath}/profiles/${encodeURIComponent(String(profileId))}`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update user BO\n     * \n     * @param userboId \n     * @param authorization Token of authentication\n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateUserBo(userboId: number, authorization: string, body: UserBO, observe?: 'body', reportProgress?: boolean): Observable<UserBO>;\n    public updateUserBo(userboId: number, authorization: string, body: UserBO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserBO>>;\n    public updateUserBo(userboId: number, authorization: string, body: UserBO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserBO>>;\n    public updateUserBo(userboId: number, authorization: string, body: UserBO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (userboId === null || userboId === undefined) {\n            throw new Error('Required parameter userboId was null or undefined when calling updateUserBo.');\n        }\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling updateUserBo.');\n        }\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling updateUserBo.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            let accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<UserBO>(`${this.basePath}/usersbo/${encodeURIComponent(String(userboId))}`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Dum API\n * This is the DUM API\n *\n * OpenAPI spec version: 1.0.0\n * Contact: rbarbado@nexusgeographics.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs/Observable';\n\nimport { AllowEntryRequest } from '../model/allowEntryRequest';\nimport { EcoType } from '../model/ecoType';\nimport { ValidatePlateNumberResp } from '../model/validatePlateNumberResp';\nimport { Vehicle } from '../model/vehicle';\nimport { VehicleDocumentation } from '../model/vehicleDocumentation';\nimport { VehicleRegistrationState } from '../model/vehicleRegistrationState';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\nimport { query } from '@angular/core/src/render3/query';\nimport { VehicleDGTRes } from '../model/vehicleDGTRes';\nimport { PagedVehicles } from '../model/pagedVehicles';\n\n\n@Injectable()\nexport class VehicleService {\n\n    protected basePath = 'http://dum.nexusgeografics.com/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Allow automatic entry Offpark\n     * \n     * @param vehicleId \n     * @param authorization Token of authentication\n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public allowAutomaticEntry(vehicleId: number, authorization: string, body: AllowEntryRequest, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public allowAutomaticEntry(vehicleId: number, authorization: string, body: AllowEntryRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public allowAutomaticEntry(vehicleId: number, authorization: string, body: AllowEntryRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public allowAutomaticEntry(vehicleId: number, authorization: string, body: AllowEntryRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (vehicleId === null || vehicleId === undefined) {\n            throw new Error('Required parameter vehicleId was null or undefined when calling allowAutomaticEntry.');\n        }\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling allowAutomaticEntry.');\n        }\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling allowAutomaticEntry.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}/vehicles/${encodeURIComponent(String(vehicleId))}/automaticEntry`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Create Vehicle\n     * Create a new vehicle for the user (token)\n     * @param authorization Token of authentication\n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createVehicle(authorization: string, body: Vehicle, observe?: 'body', reportProgress?: boolean): Observable<Vehicle>;\n    public createVehicle(authorization: string, body: Vehicle, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Vehicle>>;\n    public createVehicle(authorization: string, body: Vehicle, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Vehicle>>;\n    public createVehicle(authorization: string, body: Vehicle, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling createVehicle.');\n        }\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling createVehicle.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<Vehicle>(`${this.basePath}/vehicles`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete vehicle\n     * Logic delete of the vehicle\n     * @param vehicleId \n     * @param authorization Token of authentication\n     * @param userId User who owns vehicle REQUIRED in BO as vehicle can be associated with more than one user, if not provided session userId will be taken (APP, WEB)\n     * @param guildMemberId Guild member who owns vehicle REQUIRED in BO as vehicle associated with more than one user\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteVehicle(vehicleId: number, authorization: string, userId?: number, guildMemberId?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteVehicle(vehicleId: number, authorization: string, userId?: number, guildMemberId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteVehicle(vehicleId: number, authorization: string, userId?: number, guildMemberId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteVehicle(vehicleId: number, authorization: string, userId?: number, guildMemberId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (vehicleId === null || vehicleId === undefined) {\n            throw new Error('Required parameter vehicleId was null or undefined when calling deleteVehicle.');\n        }\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling deleteVehicle.');\n        }\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (userId !== undefined && userId !== null) {\n            queryParameters = queryParameters.set('userId', <any>userId);\n        }\n        if (guildMemberId !== undefined && guildMemberId !== null) {\n            queryParameters = queryParameters.set('guildMemberId', <any>guildMemberId);\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}/vehicles/${encodeURIComponent(String(vehicleId))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete vehicle doc\n     * \n     * @param vehicleId \n     * @param docId \n     * @param authorization Token of authentication\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteVehicleDoc(vehicleId: string, docId: string, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteVehicleDoc(vehicleId: string, docId: string, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteVehicleDoc(vehicleId: string, docId: string, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteVehicleDoc(vehicleId: string, docId: string, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (vehicleId === null || vehicleId === undefined) {\n            throw new Error('Required parameter vehicleId was null or undefined when calling deleteVehicleDoc.');\n        }\n\n        if (docId === null || docId === undefined) {\n            throw new Error('Required parameter docId was null or undefined when calling deleteVehicleDoc.');\n        }\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling deleteVehicleDoc.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.delete<Vehicle>(`${this.basePath}/vehicles/${encodeURIComponent(String(vehicleId))}/docs/${encodeURIComponent(String(docId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Sets the groups for the vehicle\n     * \n     * @param vehicleId \n     * @param authorization Token of authentication\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public electricGroups(vehicleId: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public electricGroups(vehicleId: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public electricGroups(vehicleId: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public electricGroups(vehicleId: number, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (vehicleId === null || vehicleId === undefined) {\n            throw new Error('Required parameter vehicleId was null or undefined when calling electricGroups.');\n        }\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling electricGroups.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.post<any>(`${this.basePath}/vehicles/${encodeURIComponent(String(vehicleId))}/electricGroup`,\n            null,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Returns all docs for corresponding vehicle\n     * \n     * @param vehicleId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getVehicleDocs(vehicleId: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<Array<VehicleDocumentation>>;\n    public getVehicleDocs(vehicleId: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<VehicleDocumentation>>>;\n    public getVehicleDocs(vehicleId: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<VehicleDocumentation>>>;\n    public getVehicleDocs(vehicleId: number, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (vehicleId === null || vehicleId === undefined) {\n            throw new Error('Required parameter vehicleId was null or undefined when calling getVehicleDocs.');\n        }\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling getVehicleDocs.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<Array<VehicleDocumentation>>(`${this.basePath}/vehicles/${encodeURIComponent(String(vehicleId))}/docs`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n    /**\n     * IsValidPlateNumber\n     * Validate if a plate number is correct\n     * @param plateNumber Plate number\n     * @param authorization Token of authentication\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public isValidPlateNumber(plateNumber: string, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<ValidatePlateNumberResp>;\n    public isValidPlateNumber(plateNumber: string, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ValidatePlateNumberResp>>;\n    public isValidPlateNumber(plateNumber: string, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ValidatePlateNumberResp>>;\n    public isValidPlateNumber(plateNumber: string, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (plateNumber === null || plateNumber === undefined) {\n            throw new Error('Required parameter plateNumber was null or undefined when calling isValidPlateNumber.');\n        }\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling isValidPlateNumber.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (plateNumber !== undefined && plateNumber !== null) {\n            queryParameters = queryParameters.set('plateNumber', <any>plateNumber);\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<ValidatePlateNumberResp>(`${this.basePath}/vehicles/plate`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update Vehicle\n     * \n     * @param vehicleId \n     * @param authorization Token of authentication\n     * @param body \n     * @param userId User who owns vehicle REQUIRED in BO as vehicle can be associated with more than one user, if not provided session userId will be taken (APP, WEB)\n     * @param guildMemberId Guild member who owns vehicle REQUIRED in BO as vehicle associated with more than one user\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateVehicle(vehicleId: number, authorization: string, body: Vehicle, userId?: number, guildMemberId?: number, observe?: 'body', reportProgress?: boolean): Observable<Vehicle>;\n    public updateVehicle(vehicleId: number, authorization: string, body: Vehicle, userId?: number, guildMemberId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Vehicle>>;\n    public updateVehicle(vehicleId: number, authorization: string, body: Vehicle, userId?: number, guildMemberId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Vehicle>>;\n    public updateVehicle(vehicleId: number, authorization: string, body: Vehicle, userId?: number, guildMemberId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (vehicleId === null || vehicleId === undefined) {\n            throw new Error('Required parameter vehicleId was null or undefined when calling updateVehicle.');\n        }\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling updateVehicle.');\n        }\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling updateVehicle.');\n        }\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (userId !== undefined && userId !== null) {\n            queryParameters = queryParameters.set('userId', <any>userId);\n        }\n        if (guildMemberId !== undefined && guildMemberId !== null) {\n            queryParameters = queryParameters.set('guildMemberId', <any>guildMemberId);\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<Vehicle>(`${this.basePath}/vehicles/${encodeURIComponent(String(vehicleId))}`,\n            body,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Upload doc for vehicle\n     * \n     * @param vehicleId \n     * @param authorization Token of authentication\n     * @param desc \n     * @param file \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public uploadDoc(vehicleId: number, authorization: string, file: Blob, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public uploadDoc(vehicleId: number, authorization: string, file: Blob, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public uploadDoc(vehicleId: number, authorization: string, file: Blob, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public uploadDoc(vehicleId: number, authorization: string, file: Blob, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (vehicleId === null || vehicleId === undefined) {\n            throw new Error('Required parameter vehicleId was null or undefined when calling uploadDoc.');\n        }\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling uploadDoc.');\n        }\n        \n        if (file === null || file === undefined) {\n            throw new Error('Required parameter file was null or undefined when calling uploadDoc.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/x-www-form-urlencoded'\n        ];\n\n        const canConsumeForm = this.canConsumeForm(consumes);\n\n        let useForm = false;\n        let convertFormParamsToString = false;\n        // use FormData to transmit files using content-type \"multipart/form-data\"\n        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data\n        useForm = canConsumeForm;\n        let formParams = new FormData();\n \n        if (file !== undefined) {\n            formParams.append('file',file);\n        }\n \n\n        return this.httpClient.post<Vehicle>(`${this.basePath}/vehicles/${encodeURIComponent(String(vehicleId))}/docs`,\n            convertFormParamsToString ? formParams.toString() : formParams,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n    \n    /**\n     * Get vehicle\n     * \n     * @param vehicleId \n     * @param authorization Token of authentication\n     * @param userId User who owns vehicle REQUIRED in BO as vehicle can be associated with more than one user, if not provided session userId will be taken (APP, WEB)\n     * @param guildMemberId Guild member who owns vehicle REQUIRED in BO as vehicle associated with more than one user\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public vehicle(vehicleId: number, authorization: string, userId?: number, guildMemberId?: number, observe?: 'body', reportProgress?: boolean): Observable<Vehicle>;\n    public vehicle(vehicleId: number, authorization: string, userId?: number, guildMemberId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Vehicle>>;\n    public vehicle(vehicleId: number, authorization: string, userId?: number, guildMemberId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Vehicle>>;\n    public vehicle(vehicleId: number, authorization: string, userId?: number, guildMemberId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (vehicleId === null || vehicleId === undefined) {\n            throw new Error('Required parameter vehicleId was null or undefined when calling vehicle.');\n        }\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling vehicle.');\n        }\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (userId !== undefined && userId !== null) {\n            queryParameters = queryParameters.set('userId', <any>userId);\n        }\n        if (guildMemberId !== undefined && guildMemberId !== null) {\n            queryParameters = queryParameters.set('guildMemberId', <any>guildMemberId);\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<Vehicle>(`${this.basePath}/vehicles/${encodeURIComponent(String(vehicleId))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n      /**\n     * Get dgt data\n     * Obtains DGT data for Vehicle.\n     * @param plateNumber Plate number\n     * @param authorization Token of authentication\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public vehicleDgt(plateNumber: string, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<VehicleDGTRes>;\n    public vehicleDgt(plateNumber: string, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<VehicleDGTRes>>;\n    public vehicleDgt(plateNumber: string, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<VehicleDGTRes>>;\n    public vehicleDgt(plateNumber: string, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (plateNumber === null || plateNumber === undefined) {\n            throw new Error('Required parameter plateNumber was null or undefined when calling vehicleDgt.');\n        }\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling vehicleDgt.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (plateNumber !== undefined && plateNumber !== null) {\n            queryParameters = queryParameters.set('plateNumber', <any>plateNumber);\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<VehicleDGTRes>(`${this.basePath}/vehicles/dgt`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get eco type\n     * Validate the tag of the plate number. The tags are: * B * C * ECO * CERO EMISIONES\n     * @param plateNumber Plate number\n     * @param authorization Token of authentication\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public vehicleEcoType(plateNumber: string, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<EcoType>;\n    public vehicleEcoType(plateNumber: string, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EcoType>>;\n    public vehicleEcoType(plateNumber: string, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EcoType>>;\n    public vehicleEcoType(plateNumber: string, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (plateNumber === null || plateNumber === undefined) {\n            throw new Error('Required parameter plateNumber was null or undefined when calling vehicleEcoType.');\n        }\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling vehicleEcoType.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (plateNumber !== undefined && plateNumber !== null) {\n            queryParameters = queryParameters.set('plateNumber', <any>plateNumber);\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<EcoType>(`${this.basePath}/vehicles/eco`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get all states\n     * Get all the states of the vehicles. Accessible only from BO.\n     * @param authorization Token of authentication\n     * @param userId Get all the vehicles from userId\n     * @param guildId Get all vehicles from guildId\n     * @param guildMemberId Get all vehicles from guildMemberId\n     * @param nifGuild \n     * @param plateNumber \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public vehicleStates(authorization: string, observe?: 'body', reportProgress?: boolean): Observable<Array<VehicleRegistrationState>>;\n    public vehicleStates(authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<VehicleRegistrationState>>>;\n    public vehicleStates(authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<VehicleRegistrationState>>>;\n    public vehicleStates(authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling vehicleStates.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<Array<VehicleRegistrationState>>(`${this.basePath}/vehiclesStates/`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get active vehicles\n     * Get all the vehicles of the user (token). If userID passed the result is filtered. This param is used to admin fleet or helpdesk to see the vehicles of one specific user.\n     * @param authorization Token of authentication\n     * @param userId Get all the vehicles from userId\n     * @param guildId Get all the vehicles from guildId\n     * @param guildMemberId Get all vehicles from guildMemberId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public vehicles(authorization: string, userId?: number, guildId?: number, guildMemberId?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Vehicle>>;\n    public vehicles(authorization: string, userId?: number, guildId?: number, guildMemberId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Vehicle>>>;\n    public vehicles(authorization: string, userId?: number, guildId?: number, guildMemberId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Vehicle>>>;\n    public vehicles(authorization: string, userId?: number, guildId?: number, guildMemberId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling vehicles.');\n        }\n\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (userId !== undefined && userId !== null) {\n            queryParameters = queryParameters.set('userId', <any>userId);\n        }\n        if (guildId !== undefined && guildId !== null) {\n            queryParameters = queryParameters.set('guildId', <any>guildId);\n        }\n        if (guildMemberId !== undefined && guildMemberId !== null) {\n            queryParameters = queryParameters.set('guildMemberId', <any>guildMemberId);\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<Array<Vehicle>>(`${this.basePath}/vehicles`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get all vehicles\n     * Get all the vehicles of the user. Accessible only from BO.\n     * @param authorization Token of authentication\n     * @param userId Get all the vehicles from userId\n     * @param guildId Get all vehicles from guildId\n     * @param guildMemberId Get all vehicles from guildMemberId\n     * @param nifGuild \n     * @param plateNumber \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public vehiclesAll(authorization: string, page: number, size: number, userId?: number, guildId?: number, guildMemberId?: number, nifGuild?: string, plateNumber?: string, vehicleRegistrationState ?: number, observe?: 'body', reportProgress?: boolean): Observable<PagedVehicles>;\n    public vehiclesAll(authorization: string, page: number, size: number, userId?: number, guildId?: number, guildMemberId?: number, nifGuild?: string, plateNumber?: string, vehicleRegistrationState ?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedVehicles>>;\n    public vehiclesAll(authorization: string, page: number, size: number, userId?: number, guildId?: number, guildMemberId?: number, nifGuild?: string, plateNumber?: string, vehicleRegistrationState ?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedVehicles>>;\n    public vehiclesAll(authorization: string, page: number, size: number, userId?: number, guildId?: number, guildMemberId?: number, nifGuild?: string, plateNumber?: string, vehicleRegistrationState ?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling vehiclesAll.');\n        }\n\n\n\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        \n        queryParameters = queryParameters.set('page', <any>page);\n        \n        queryParameters = queryParameters.set('size', <any>size);\n\n        if (userId !== undefined && userId !== null) {\n            queryParameters = queryParameters.set('userId', <any>userId);\n        }\n        if (guildId !== undefined && guildId !== null) {\n            queryParameters = queryParameters.set('guildId', <any>guildId);\n        }\n        if (guildMemberId !== undefined && guildMemberId !== null) {\n            queryParameters = queryParameters.set('guildMemberId', <any>guildMemberId);\n        }\n        if (nifGuild !== undefined && nifGuild !== null) {\n            queryParameters = queryParameters.set('nifGuild', <any>nifGuild);\n        }\n        if (plateNumber !== undefined && plateNumber !== null) {\n            queryParameters = queryParameters.set('plateNumber', <any>plateNumber);\n        }\n        if (vehicleRegistrationState !== undefined && vehicleRegistrationState !== null) {\n            queryParameters = queryParameters.set('vehicleRegistrationState', <any> vehicleRegistrationState);\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<Array<Vehicle>>(`${this.basePath}/vehiclesAll/`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get all vehicles\n     * Get excel vehicles. Accessible only from BO.\n     * @param authorization Token of authentication\n     * @param userId Get all the vehicles from userId\n     * @param guildId Get all vehicles from guildId\n     * @param guildMemberId Get all vehicles from guildMemberId\n     * @param nifGuild \n     * @param plateNumber \n     * @param vehicleRegistrationState \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public vehiclesAllXls(authorization: string, userId?: number, guildId?: number, guildMemberId?: number, nifGuild?: string, plateNumber?: string, vehicleRegistrationState?: number, observe?: 'body', reportProgress?: boolean): Observable<Blob>;\n    public vehiclesAllXls(authorization: string, userId?: number, guildId?: number, guildMemberId?: number, nifGuild?: string, plateNumber?: string, vehicleRegistrationState?: number, observe?: 'response', reportProgress?: boolean): Observable<Blob>;\n    public vehiclesAllXls(authorization: string, userId?: number, guildId?: number, guildMemberId?: number, nifGuild?: string, plateNumber?: string, vehicleRegistrationState?: number, observe?: 'events', reportProgress?: boolean): Observable<Blob>;\n    public vehiclesAllXls(authorization: string, userId?: number, guildId?: number, guildMemberId?: number, nifGuild?: string, plateNumber?: string, vehicleRegistrationState?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling vehiclesAllXls.');\n        }\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (userId !== undefined && userId !== null) {\n            queryParameters = queryParameters.set('userId', <any>userId);\n        }\n        if (guildId !== undefined && guildId !== null) {\n            queryParameters = queryParameters.set('guildId', <any>guildId);\n        }\n        if (guildMemberId !== undefined && guildMemberId !== null) {\n            queryParameters = queryParameters.set('guildMemberId', <any>guildMemberId);\n        }\n        if (nifGuild !== undefined && nifGuild !== null) {\n            queryParameters = queryParameters.set('nifGuild', <any>nifGuild);\n        }\n        if (plateNumber !== undefined && plateNumber !== null) {\n            queryParameters = queryParameters.set('plateNumber', <any>plateNumber);\n        }\n        if (vehicleRegistrationState !== undefined && vehicleRegistrationState !== null) {\n            queryParameters = queryParameters.set('vehicleRegistrationState', <any>vehicleRegistrationState);\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<string>(`${this.basePath}/vehiclesAll/xls`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress,\n                responseType : 'blob' as 'json'\n            }\n        );\n    }\n\n}\n","/**\n * Dum API\n * This is the DUM API\n *\n * OpenAPI spec version: 1.0.0\n * Contact: rbarbado@nexusgeographics.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs/Observable';\n\nimport { AllowEntryRequest } from '../model/allowEntryRequest';\nimport { EcoType } from '../model/ecoType';\nimport { ValidatePlateNumberResp } from '../model/validatePlateNumberResp';\nimport { Vehicle } from '../model/vehicle';\nimport { VehicleDocumentation } from '../model/vehicleDocumentation';\nimport { VehicleRegistrationState } from '../model/vehicleRegistrationState';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\nimport { query } from '@angular/core/src/render3/query';\nimport { PagedVehicles } from '../model/pagedVehicles';\nimport { VehicleDGTRes } from '../../api/model/vehicleDGTRes';\n\n\n@Injectable()\nexport class VehicleBusService {\n\n    protected basePath = 'http://dum.nexusgeografics.com/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Create Vehicle\n     * Create a new vehicle for the user (token)\n     * @param authorization Token of authentication\n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createVehicle(authorization: string, body: Vehicle, observe?: 'body', reportProgress?: boolean): Observable<Vehicle>;\n    public createVehicle(authorization: string, body: Vehicle, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Vehicle>>;\n    public createVehicle(authorization: string, body: Vehicle, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Vehicle>>;\n    public createVehicle(authorization: string, body: Vehicle, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling createVehicle.');\n        }\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling createVehicle.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<Vehicle>(`${this.basePath}/vehiclesBus`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete vehicle\n     * Logic delete of the vehicle\n     * @param vehicleId \n     * @param authorization Token of authentication\n     * @param userId User who owns vehicle REQUIRED in BO as vehicle can be associated with more than one user, if not provided session userId will be taken (APP, WEB)\n     * @param guildMemberId Guild member who owns vehicle REQUIRED in BO as vehicle associated with more than one user\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteVehicle(vehicleId: number, authorization: string, userId?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteVehicle(vehicleId: number, authorization: string, userId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteVehicle(vehicleId: number, authorization: string, userId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteVehicle(vehicleId: number, authorization: string, userId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (vehicleId === null || vehicleId === undefined) {\n            throw new Error('Required parameter vehicleId was null or undefined when calling deleteVehicle.');\n        }\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling deleteVehicle.');\n        }\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (userId !== undefined && userId !== null) {\n            queryParameters = queryParameters.set('userId', <any>userId);\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}/vehiclesBus/${encodeURIComponent(String(vehicleId))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Sets the groups for the vehicle\n     * \n     * @param vehicleId \n     * @param authorization Token of authentication\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public electricGroups(vehicleId: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public electricGroups(vehicleId: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public electricGroups(vehicleId: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public electricGroups(vehicleId: number, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (vehicleId === null || vehicleId === undefined) {\n            throw new Error('Required parameter vehicleId was null or undefined when calling electricGroups.');\n        }\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling electricGroups.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.post<any>(`${this.basePath}/vehicles/${encodeURIComponent(String(vehicleId))}/electricGroup`,\n            null,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * IsValidPlateNumber\n     * Validate if a plate number is correct\n     * @param plateNumber Plate number\n     * @param authorization Token of authentication\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public isValidPlateNumber(plateNumber: string, authorization?: string, observe?: 'body', reportProgress?: boolean): Observable<ValidatePlateNumberResp>;\n    public isValidPlateNumber(plateNumber: string, authorization?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ValidatePlateNumberResp>>;\n    public isValidPlateNumber(plateNumber: string, authorization?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ValidatePlateNumberResp>>;\n    public isValidPlateNumber(plateNumber: string, authorization?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (plateNumber === null || plateNumber === undefined) {\n            throw new Error('Required parameter plateNumber was null or undefined when calling isValidPlateNumber.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (plateNumber !== undefined && plateNumber !== null) {\n            queryParameters = queryParameters.set('plateNumber', <any>plateNumber);\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<ValidatePlateNumberResp>(`${this.basePath}/vehicles/plate`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update Vehicle\n     * \n     * @param vehicleId \n     * @param authorization Token of authentication\n     * @param body \n     * @param userId User who owns vehicle REQUIRED in BO as vehicle can be associated with more than one user, if not provided session userId will be taken (APP, WEB)\n     * @param guildMemberId Guild member who owns vehicle REQUIRED in BO as vehicle associated with more than one user\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateVehicle(vehicleId: number, authorization: string, body: Vehicle, userId?: number, guildMemberId?: number, observe?: 'body', reportProgress?: boolean): Observable<Vehicle>;\n    public updateVehicle(vehicleId: number, authorization: string, body: Vehicle, userId?: number, guildMemberId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Vehicle>>;\n    public updateVehicle(vehicleId: number, authorization: string, body: Vehicle, userId?: number, guildMemberId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Vehicle>>;\n    public updateVehicle(vehicleId: number, authorization: string, body: Vehicle, userId?: number, guildMemberId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (vehicleId === null || vehicleId === undefined) {\n            throw new Error('Required parameter vehicleId was null or undefined when calling updateVehicle.');\n        }\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling updateVehicle.');\n        }\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling updateVehicle.');\n        }\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (userId !== undefined && userId !== null) {\n            queryParameters = queryParameters.set('userId', <any>userId);\n        }\n        if (guildMemberId !== undefined && guildMemberId !== null) {\n            queryParameters = queryParameters.set('guildMemberId', <any>guildMemberId);\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<Vehicle>(`${this.basePath}/vehiclesBus/${encodeURIComponent(String(vehicleId))}`,\n            body,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n\n    /**\n     * Get vehicle\n     * \n     * @param vehicleId \n     * @param authorization Token of authentication\n     * @param userId User who owns vehicle REQUIRED in BO as vehicle can be associated with more than one user, if not provided session userId will be taken (APP, WEB)\n     * @param guildMemberId Guild member who owns vehicle REQUIRED in BO as vehicle associated with more than one user\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public vehicle(vehicleId: number, authorization: string, userId?: number, guildMemberId?: number, observe?: 'body', reportProgress?: boolean): Observable<Vehicle>;\n    public vehicle(vehicleId: number, authorization: string, userId?: number, guildMemberId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Vehicle>>;\n    public vehicle(vehicleId: number, authorization: string, userId?: number, guildMemberId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Vehicle>>;\n    public vehicle(vehicleId: number, authorization: string, userId?: number, guildMemberId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (vehicleId === null || vehicleId === undefined) {\n            throw new Error('Required parameter vehicleId was null or undefined when calling vehicle.');\n        }\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling vehicle.');\n        }\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (userId !== undefined && userId !== null) {\n            queryParameters = queryParameters.set('userId', <any>userId);\n        }\n        if (guildMemberId !== undefined && guildMemberId !== null) {\n            queryParameters = queryParameters.set('guildMemberId', <any>guildMemberId);\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<Vehicle>(`${this.basePath}/vehiclesBus/${encodeURIComponent(String(vehicleId))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get eco type\n     * Validate the tag of the plate number. The tags are: * B * C * ECO * CERO EMISIONES\n     * @param plateNumber Plate number\n     * @param authorization Token of authentication\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public vehicleEcoType(plateNumber: string, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<EcoType>;\n    public vehicleEcoType(plateNumber: string, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EcoType>>;\n    public vehicleEcoType(plateNumber: string, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EcoType>>;\n    public vehicleEcoType(plateNumber: string, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (plateNumber === null || plateNumber === undefined) {\n            throw new Error('Required parameter plateNumber was null or undefined when calling vehicleEcoType.');\n        }\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling vehicleEcoType.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (plateNumber !== undefined && plateNumber !== null) {\n            queryParameters = queryParameters.set('plateNumber', <any>plateNumber);\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<EcoType>(`${this.basePath}/vehicles/eco`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get all states\n     * Get all the states of the vehicles. Accessible only from BO.\n     * @param authorization Token of authentication\n     * @param userId Get all the vehicles from userId\n     * @param guildId Get all vehicles from guildId\n     * @param guildMemberId Get all vehicles from guildMemberId\n     * @param nifGuild \n     * @param plateNumber \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public vehicleStates(authorization: string, observe?: 'body', reportProgress?: boolean): Observable<Array<VehicleRegistrationState>>;\n    public vehicleStates(authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<VehicleRegistrationState>>>;\n    public vehicleStates(authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<VehicleRegistrationState>>>;\n    public vehicleStates(authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling vehicleStates.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<Array<VehicleRegistrationState>>(`${this.basePath}/vehiclesStatesBus/`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get active vehicles\n     * Get all the vehicles of the user (token). If userID passed the result is filtered. This param is used to admin fleet or helpdesk to see the vehicles of one specific user.\n     * @param authorization Token of authentication\n     * @param userId Get all the vehicles from userId\n     * @param guildId Get all the vehicles from guildId\n     * @param guildMemberId Get all vehicles from guildMemberId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public vehicles(authorization: string, userId?: number, guildId?: number, guildMemberId?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Vehicle>>;\n    public vehicles(authorization: string, userId?: number, guildId?: number, guildMemberId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Vehicle>>>;\n    public vehicles(authorization: string, userId?: number, guildId?: number, guildMemberId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Vehicle>>>;\n    public vehicles(authorization: string, userId?: number, guildId?: number, guildMemberId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling vehicles.');\n        }\n\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (userId !== undefined && userId !== null) {\n            queryParameters = queryParameters.set('userId', <any>userId);\n        }\n        if (guildId !== undefined && guildId !== null) {\n            queryParameters = queryParameters.set('guildId', <any>guildId);\n        }\n        if (guildMemberId !== undefined && guildMemberId !== null) {\n            queryParameters = queryParameters.set('guildMemberId', <any>guildMemberId);\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<Array<Vehicle>>(`${this.basePath}/vehiclesBus`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get all vehicles\n     * Get all the vehicles of the user. Accessible only from BO.\n     * @param authorization Token of authentication\n     * @param userId Get all the vehicles from userId\n     * @param guildId Get all vehicles from guildId\n     * @param guildMemberId Get all vehicles from guildMemberId\n     * @param nifGuild \n     * @param plateNumber \n     * @param email \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public vehiclesAll(authorization: string, page: number, size: number, userId?: number, guildId?: number, guildMemberId?: number, nifGuild?: string, plateNumber?: string, vehicleRegistrationState?: number, email?: string, observe?: 'body', reportProgress?: boolean): Observable<PagedVehicles>;\n    public vehiclesAll(authorization: string, page: number, size: number, userId?: number, guildId?: number, guildMemberId?: number, nifGuild?: string, plateNumber?: string, vehicleRegistrationState?: number, email?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedVehicles>>;\n    public vehiclesAll(authorization: string, page: number, size: number, userId?: number, guildId?: number, guildMemberId?: number, nifGuild?: string, plateNumber?: string, vehicleRegistrationState?: number, email?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedVehicles>>;\n    public vehiclesAll(authorization: string, page: number, size: number, userId?: number, guildId?: number, guildMemberId?: number, nifGuild?: string, plateNumber?: string, vehicleRegistrationState?: number, email?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling vehiclesAll.');\n        }\n\n\n\n\n\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n\n        queryParameters = queryParameters.set('page', <any>page);\n\n        queryParameters = queryParameters.set('size', <any>size);\n\n        if (userId !== undefined && userId !== null) {\n            queryParameters = queryParameters.set('userId', <any>userId);\n        }\n        if (guildId !== undefined && guildId !== null) {\n            queryParameters = queryParameters.set('guildId', <any>guildId);\n        }\n        if (guildMemberId !== undefined && guildMemberId !== null) {\n            queryParameters = queryParameters.set('guildMemberId', <any>guildMemberId);\n        }\n        if (nifGuild !== undefined && nifGuild !== null) {\n            queryParameters = queryParameters.set('nifGuild', <any>nifGuild);\n        }\n        if (plateNumber !== undefined && plateNumber !== null) {\n            queryParameters = queryParameters.set('plateNumber', <any>plateNumber);\n        }\n        if (vehicleRegistrationState !== undefined && vehicleRegistrationState !== null) {\n            queryParameters = queryParameters.set('vehicleRegistrationState', <any>vehicleRegistrationState);\n        }\n        if (email !== undefined && email !== null) {\n            queryParameters = queryParameters.set('email', <any>email);\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<Array<Vehicle>>(`${this.basePath}/vehiclesBusAll/`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n     /**\n     * Get all vehicles\n     * Get excel vehicles. Accessible only from BO.\n     * @param authorization Token of authentication\n     * @param userId Get all the vehicles from userId\n     * @param guildId Get all vehicles from guildId\n     * @param guildMemberId Get all vehicles from guildMemberId\n     * @param nifGuild \n     * @param plateNumber \n     * @param vehicleRegistrationState \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public vehiclesAllXls(authorization: string, userId?: number, guildId?: number, guildMemberId?: number, nifGuild?: string, plateNumber?: string, vehicleRegistrationState?: number, observe?: 'body', reportProgress?: boolean): Observable<Blob>;\n    public vehiclesAllXls(authorization: string, userId?: number, guildId?: number, guildMemberId?: number, nifGuild?: string, plateNumber?: string, vehicleRegistrationState?: number, observe?: 'response', reportProgress?: boolean): Observable<Blob>;\n    public vehiclesAllXls(authorization: string, userId?: number, guildId?: number, guildMemberId?: number, nifGuild?: string, plateNumber?: string, vehicleRegistrationState?: number, observe?: 'events', reportProgress?: boolean): Observable<Blob>;\n    public vehiclesAllXls(authorization: string, userId?: number, guildId?: number, guildMemberId?: number, nifGuild?: string, plateNumber?: string, vehicleRegistrationState?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling vehiclesAllXls.');\n        }\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (userId !== undefined && userId !== null) {\n            queryParameters = queryParameters.set('userId', <any>userId);\n        }\n        if (guildId !== undefined && guildId !== null) {\n            queryParameters = queryParameters.set('guildId', <any>guildId);\n        }\n        if (guildMemberId !== undefined && guildMemberId !== null) {\n            queryParameters = queryParameters.set('guildMemberId', <any>guildMemberId);\n        }\n        if (nifGuild !== undefined && nifGuild !== null) {\n            queryParameters = queryParameters.set('nifGuild', <any>nifGuild);\n        }\n        if (plateNumber !== undefined && plateNumber !== null) {\n            queryParameters = queryParameters.set('plateNumber', <any>plateNumber);\n        }\n        if (vehicleRegistrationState !== undefined && vehicleRegistrationState !== null) {\n            queryParameters = queryParameters.set('vehicleRegistrationState', <any>vehicleRegistrationState);\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<string>(`${this.basePath}/vehiclesBusAll/xls`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress,\n                responseType : 'blob' as 'json'\n            }\n        );\n    }\n\n    /**\n     * Returns all docs for corresponding vehicle\n     * \n     * @param vehicleId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getVehicleDocs(vehicleId: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<Array<VehicleDocumentation>>;\n    public getVehicleDocs(vehicleId: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<VehicleDocumentation>>>;\n    public getVehicleDocs(vehicleId: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<VehicleDocumentation>>>;\n    public getVehicleDocs(vehicleId: number, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (vehicleId === null || vehicleId === undefined) {\n            throw new Error('Required parameter vehicleId was null or undefined when calling getVehicleDocs.');\n        }\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling getVehicleDocs.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<Array<VehicleDocumentation>>(`${this.basePath}/vehiclesBus/${encodeURIComponent(String(vehicleId))}/docs`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Upload doc for vehicle\n     * \n     * @param vehicleId \n     * @param authorization Token of authentication\n     * @param desc \n     * @param file \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public uploadDoc(vehicleId: number, authorization: string, file: Blob, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public uploadDoc(vehicleId: number, authorization: string, file: Blob, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public uploadDoc(vehicleId: number, authorization: string, file: Blob, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public uploadDoc(vehicleId: number, authorization: string, file: Blob, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (vehicleId === null || vehicleId === undefined) {\n            throw new Error('Required parameter vehicleId was null or undefined when calling uploadDoc.');\n        }\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling uploadDoc.');\n        }\n        \n        if (file === null || file === undefined) {\n            throw new Error('Required parameter file was null or undefined when calling uploadDoc.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/x-www-form-urlencoded'\n        ];\n\n        const canConsumeForm = this.canConsumeForm(consumes);\n\n        let useForm = false;\n        let convertFormParamsToString = false;\n        // use FormData to transmit files using content-type \"multipart/form-data\"\n        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data\n        useForm = canConsumeForm;\n        let formParams = new FormData();\n \n        if (file !== undefined) {\n            formParams.append('file',file);\n        }\n \n\n        return this.httpClient.post<Vehicle>(`${this.basePath}/vehiclesBus/${encodeURIComponent(String(vehicleId))}/docs`,\n            convertFormParamsToString ? formParams.toString() : formParams,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete vehicle doc\n     * \n     * @param vehicleId \n     * @param docId \n     * @param authorization Token of authentication\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteVehicleDoc(vehicleId: string, docId: string, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteVehicleDoc(vehicleId: string, docId: string, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteVehicleDoc(vehicleId: string, docId: string, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteVehicleDoc(vehicleId: string, docId: string, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (vehicleId === null || vehicleId === undefined) {\n            throw new Error('Required parameter vehicleId was null or undefined when calling deleteVehicleDoc.');\n        }\n\n        if (docId === null || docId === undefined) {\n            throw new Error('Required parameter docId was null or undefined when calling deleteVehicleDoc.');\n        }\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling deleteVehicleDoc.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.delete<Vehicle>(`${this.basePath}/vehiclesBus/${encodeURIComponent(String(vehicleId))}/docs/${encodeURIComponent(String(docId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n     /**\n     * Get dgt data\n     * Obtains DGT data for Vehicle.\n     * @param plateNumber Plate number\n     * @param authorization Token of authentication\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public vehicleDgt(plateNumber: string, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<VehicleDGTRes>;\n    public vehicleDgt(plateNumber: string, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<VehicleDGTRes>>;\n    public vehicleDgt(plateNumber: string, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<VehicleDGTRes>>;\n    public vehicleDgt(plateNumber: string, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (plateNumber === null || plateNumber === undefined) {\n            throw new Error('Required parameter plateNumber was null or undefined when calling vehicleDgt.');\n        }\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling vehicleDgt.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (plateNumber !== undefined && plateNumber !== null) {\n            queryParameters = queryParameters.set('plateNumber', <any>plateNumber);\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<VehicleDGTRes>(`${this.basePath}/vehiclesBus/dgt`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Dum API\n * This is the DUM API\n *\n * OpenAPI spec version: 1.0.0\n * Contact: kfiertek@nexusgeographics.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs/Observable';\n\nimport { VehicleType } from '../model/vehicleType';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class VehiclesService {\n\n    protected basePath = 'http://dum.nexusgeografics.com/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * vehiclesType\n     * \n     * @param authorization \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public vehiclesType(authorization: string, observe?: 'body', reportProgress?: boolean): Observable<VehicleType[]>;\n    public vehiclesType(authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<VehicleType[]>>;\n    public vehiclesType(authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<VehicleType[]>>;\n    public vehiclesType(authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (authorization === null || authorization === undefined) {\n            throw new Error('Required parameter authorization was null or undefined when calling vehiclesType.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (authorization !== undefined && authorization !== null) {\n            headers = headers.set('Authorization', String(authorization));\n        }\n\n        // authentication (DUM Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<VehicleType>(`${this.basePath}/vehiclesType`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Smou API\n * This is the Mobility as a Service API\n *\n * OpenAPI spec version: 1.0.0\n * Contact: avalls@nexusgeographics.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs/Observable';\n\nimport { Watcher } from '../model/watcher';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class WatcherService {\n\n    protected basePath = 'http://maas.nexusgeografics.com/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Create a new watcher\n     * \n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createWatcher(body: Watcher, observe?: 'body', reportProgress?: boolean): Observable<Watcher>;\n    public createWatcher(body: Watcher, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Watcher>>;\n    public createWatcher(body: Watcher, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Watcher>>;\n    public createWatcher(body: Watcher, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling createWatcher.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<Watcher>(`${this.basePath}/watchers`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete a watcher\n     * \n     * @param watcherId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteWatcher(watcherId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteWatcher(watcherId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteWatcher(watcherId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteWatcher(watcherId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (watcherId === null || watcherId === undefined) {\n            throw new Error('Required parameter watcherId was null or undefined when calling deleteWatcher.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}/watchers/${encodeURIComponent(String(watcherId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Edit a watcher\n     * \n     * @param watcherId \n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public editWatcher(watcherId: number, body: Watcher, observe?: 'body', reportProgress?: boolean): Observable<Watcher>;\n    public editWatcher(watcherId: number, body: Watcher, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Watcher>>;\n    public editWatcher(watcherId: number, body: Watcher, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Watcher>>;\n    public editWatcher(watcherId: number, body: Watcher, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (watcherId === null || watcherId === undefined) {\n            throw new Error('Required parameter watcherId was null or undefined when calling editWatcher.');\n        }\n\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling editWatcher.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<Watcher>(`${this.basePath}/watchers/${encodeURIComponent(String(watcherId))}`,\n            body,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get a watcher\n     * \n     * @param watcherId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public watcher(watcherId: number, observe?: 'body', reportProgress?: boolean): Observable<Watcher>;\n    public watcher(watcherId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Watcher>>;\n    public watcher(watcherId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Watcher>>;\n    public watcher(watcherId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (watcherId === null || watcherId === undefined) {\n            throw new Error('Required parameter watcherId was null or undefined when calling watcher.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<Watcher>(`${this.basePath}/watchers/${encodeURIComponent(String(watcherId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get all the watchers\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public watchers(observe?: 'body', reportProgress?: boolean): Observable<Array<Watcher>>;\n    public watchers(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Watcher>>>;\n    public watchers(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Watcher>>>;\n    public watchers(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // authentication (MaaS Token) required\n        if (this.configuration.accessToken) {\n            const accessToken = typeof this.configuration.accessToken === 'function'\n                ? this.configuration.accessToken()\n                : this.configuration.accessToken;\n            headers = headers.set('Authorization', 'Bearer ' + accessToken);\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<Array<Watcher>>(`${this.basePath}/watchers`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","export interface ConfigurationParameters {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n}\n\nexport class Configuration {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n\n    constructor(configurationParameters: ConfigurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n    }\n\n    /**\n     * Select the correct content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param {string[]} contentTypes - the array of content types that are available for selection\n     * @returns {string} the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\n        if (contentTypes.length == 0) {\n            return undefined;\n        }\n\n        let type = contentTypes.find(x => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n\n    /**\n     * Select the correct accept content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param {string[]} accepts - the array of content types that are available for selection.\n     * @returns {string} the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderAccept(accepts: string[]): string | undefined {\n        if (accepts.length == 0) {\n            return undefined;\n        }\n\n        let type = accepts.find(x => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param {string} mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return {boolean} True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime != null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n}\n","    import { HttpUrlEncodingCodec } from '@angular/common/http';\n\n/**\n* CustomHttpUrlEncodingCodec\n* Fix plus sign (+) not encoding, so sent as blank space\n* See: https://github.com/angular/angular/issues/11058#issuecomment-247367318\n*/\nexport class CustomHttpUrlEncodingCodec extends HttpUrlEncodingCodec {\n    encodeKey(k: string): string {\n        k = super.encodeKey(k);\n        return k.replace(/\\+/gi, '%2B');\n    }\n    encodeValue(v: string): string {\n        v = super.encodeValue(v);\n        return v.replace(/\\+/gi, '%2B');\n    }\n}\n\n","export * from './api/api';\nexport * from './model/models';\nexport * from './variables';\nexport * from './configuration';\nexport * from './api.module';","/**\n * MAAS API\n * This is the Mobility as a Service API\n *\n * OpenAPI spec version: 1.0.0\n * Contact: avalls@nexusgeographics.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\nimport { CreditCard } from './creditCard';\n\n\n/**\n * Account data.\n */\nexport interface Account {\n    accountID: number;\n    companyName?: string;\n    type: Account.TypeEnum;\n    creditCard?: CreditCard;\n}\nexport namespace Account {\n    export type TypeEnum = 'unipersonal' | 'fleet';\n    export const TypeEnum = {\n        Unipersonal: 'unipersonal' as TypeEnum,\n        Fleet: 'fleet' as TypeEnum\n    }\n}\n","export * from './account';\nexport * from './accountRequest';\nexport * from './annulation';\nexport * from './annulationStatus';\nexport * from './apiError';\nexport * from './appConfig';\nexport * from './auditLog';\nexport * from './availabilitySection';\nexport * from './availabilitySectionPoints';\nexport * from './blockCreditcardRequest';\nexport * from './blockUserRequest';\nexport * from './body';\nexport * from './body1';\nexport * from './bonus';\nexport * from './byDevicesRequest';\nexport * from './byTopicRequest';\nexport * from './character';\nexport * from './clob';\nexport * from './coupon';\nexport * from './createAccountResponse';\nexport * from './creditCard';\nexport * from './creditCardStatus';\nexport * from './errorGeneric';\nexport * from './footprintSubject';\nexport * from './inlineResponse200';\nexport * from './juridicEntity';\nexport * from './guildCardStatus';\nexport * from './guildCardOperation';\nexport * from './modifier';\nexport * from './nearConfigs';\nexport * from './notification';\nexport * from './notificationData';\nexport * from './notificationMarkAsRead';\nexport * from './notificationType';\nexport * from './oAMConfiguration';\nexport * from './oAuthDetails';\nexport * from './oAuthError';\nexport * from './parking';\nexport * from './parkingPosition';\nexport * from './paymentGatewayPutRequest';\nexport * from './permissions';\nexport * from './price';\nexport * from './rate';\nexport * from './refundData';\nexport * from './registerPushTokenRequest';\nexport * from './resetThirduserPasswordRequest';\nexport * from './resetUserPasswordRequest';\nexport * from './roleBO';\nexport * from './satisfaction';\nexport * from './schedule';\nexport * from './segment';\nexport * from './service';\nexport * from './stadistics';\nexport * from './startOffData';\nexport * from './startOnData';\nexport * from './startThirdData';\nexport * from './stopOffData';\nexport * from './stopOnData';\nexport * from './supportRequest';\n/*export * from './thirdUser';\nexport * from './thirdUserRequest';*/\nexport * from './ticket';\nexport * from './topic';\nexport * from './topicList';\nexport * from './topicListTopics';\nexport * from './transaction';\nexport * from './transactionTransactionType';\nexport * from './user';\nexport * from './userBO';\nexport * from './userUpdateRequest';\nexport * from './validatePlateNumberResp';\nexport * from './vehicle';\nexport * from './vehicleType';\nexport * from './zoneType';\nexport * from './permission';\n","import { InjectionToken } from '@angular/core';\n\nexport const BASE_PATH = new InjectionToken<string>('basePath');\nexport const COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"wrapper\\\" *ngIf=\\\"navigation.currentUrl == '/login'\\\" style=\\\"overflow: hidden;\\\">\\n    <router-outlet>\\n    </router-outlet>\\n</div>\\n<div class=\\\"wrapper\\\" *ngIf=\\\"navigation.currentUrl == '/login/sso'\\\">\\n    <router-outlet>\\n    </router-outlet>\\n</div>\\n<div class=\\\"wrapper\\\" *ngIf=\\\"navigation.currentUrl && navigation.currentUrl != '/login' && navigation.currentUrl != '/login/sso'\\\">\\n    <div class=\\\"sidebar\\\" data-color=\\\"danger\\\" data-background-color=\\\"orange\\\" data-image=\\\"../assets/img/sidebar-1.jpg\\\">\\n        <app-sidebar></app-sidebar>\\n        <div class=\\\"sidebar-background\\\"></div>\\n    </div>\\n    <div class=\\\"main-panel\\\">\\n        <app-navbar></app-navbar>\\n        <router-outlet></router-outlet>\\n    </div>\\n</div>\"","import { Component } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { Router } from '@angular/router';\nimport { config } from 'config/config';\nimport { NavigationEndInterceptor } from './services/navigationEndInterceptor.service';\n\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n\n  constructor(\n    public navigation: NavigationEndInterceptor, private router: Router) {\n\n    this.navigation.setup();\n  }\n}\n","import { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { HttpModule } from '@angular/http';\nimport { RouterModule } from '@angular/router';\n\nimport { AppRoutingModule } from './app.routing';\nimport { AppComponent } from './app.component';\n\nimport { LoginComponent } from './login/login.component';\nimport {\n  MatSelectModule, MatInputModule,\n  MatCheckboxModule, MatButtonModule,\n  MatRippleModule, MatTooltipModule,\n  MatDialogModule, MatProgressSpinnerModule,\n  MatIconModule,\n  MatSlideToggleModule\n} from '@angular/material';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MAT_DATE_LOCALE } from '@angular/material';\nimport { MatNativeDateModule } from '@angular/material';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { ApiModule } from './api';\nimport { AuthorizationService } from './services/authorization.service';\nimport { HTTP_INTERCEPTORS, HttpClient } from '@angular/common/http';\nimport { TokenInterceptor } from './services/customhttpinterceptor.service';\nimport { DashboardComponent } from './dashboard/dashboard.component';\nimport { ToastService } from './services/toast.service';\nimport { OrderModule } from 'ngx-order-pipe';\nimport { CurrentUserService } from './services/current-user.service';\nimport { BASE_PATH } from './api/variables';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { environment } from './../environments/environment';\nimport { PaginatorService } from './services/paginator.service';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { NumericDirective } from './directives/numeric';\nimport { NavigationEndInterceptor } from './services/navigationEndInterceptor.service';\nimport { SidebarComponent } from './components/sidebar/sidebar.component';\nimport { NavbarComponent } from './components/navbar/navbar.component';\n\n\n@NgModule({\n  imports: [\n    BrowserAnimationsModule,\n    FormsModule,\n    HttpModule,\n    RouterModule,\n    AppRoutingModule,\n    ReactiveFormsModule,\n    MatButtonModule,\n    MatRippleModule,\n    MatInputModule,\n    MatTooltipModule,\n    MatCheckboxModule,\n    ApiModule,\n    MatTabsModule,\n    MatDialogModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatSelectModule,\n    OrderModule,\n    MatRadioModule,\n    MatProgressSpinnerModule,\n    MatIconModule,\n    MatMenuModule,\n    MatChipsModule,\n    MatSlideToggleModule\n  ],\n  declarations: [\n    AppComponent,\n    LoginComponent,\n    DashboardComponent,\n    NumericDirective,\n    SidebarComponent,\n    NavbarComponent\n  ],\n  entryComponents: [\n  ],\n  providers: [\n    AuthorizationService,\n    ToastService,\n    CurrentUserService,\n    NavigationEndInterceptor,\n    PaginatorService,\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: TokenInterceptor,\n      multi: true\n    },\n    {\n      provide: MAT_DATE_LOCALE,\n      useValue: 'ca-ES'\n    },\n    {\n      provide: BASE_PATH,\n      useValue: environment.api\n      // PRO : 'https://devapi.bsmsa.eu/ext/srvl/bsm/maas/app/v1'\n    }\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule, } from '@angular/common';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { RouterModule } from '@angular/router';\n\nimport { LoginComponent } from './login/login.component';\nimport { DashboardComponent } from './dashboard/dashboard.component';\nexport interface DUMRoutes {\n  path: string,\n  component?: any,\n  redirectTo?: string,\n  pathMatch?: string,\n  permissions?: any\n}\n\nexport const DUM_ROUTES: DUMRoutes[] = [\n  {\n    path: '',\n    redirectTo: 'inici',\n    pathMatch: 'full',\n  },\n  {\n    path: 'login',\n    component: LoginComponent\n  },\n  {\n    path: 'inici',\n    component: DashboardComponent\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    BrowserModule,\n    RouterModule.forRoot(DUM_ROUTES)\n  ],\n  exports: [\n  ],\n})\nexport class AppRoutingModule { }\n","module.exports = \".navbar {\\n    background : white !important;\\n    border-left : 1px solid rgba(180, 180, 180, 0.3);\\n    border-bottom: 1px solid rgba(180, 180, 180, 0.3);\\n}\\n\\n\\n.mun-select ::ng-deep .mat-select-value-text {\\n    font-size: 24px;\\n    font-weight: bold;\\n\\n}\\n\\n\\n.mun-placeholder {\\n    font-size: 18px;\\n    float:left;\\n    padding-top: 5px;\\n    padding-right:10px;\\n}\\n\\n\\n.mun-select-nav {\\n    border-radius:5px;padding:15px;height:60px;background:#fdfdef;\\n}\\n\\n\\n.mun-select-field {\\n    float:left;margin-top:-20px;\\n}\"","module.exports = \"<nav class=\\\"navbar navbar-expand-lg navbar-transparent  navbar-absolute fixed-top\\\">\\n    <div class=\\\"container-fluid\\\">\\n\\n        <div class=\\\"collapse navbar-collapse justify-content-end\\\" id=\\\"navigation\\\">\\n            <ul class=\\\"navbar-nav\\\">\\n                <li class=\\\"nav-item dropdown\\\">\\n                    <div class=\\\"dropdown-menu dropdown-menu-right\\\" aria-labelledby=\\\"navbarDropdownMenuLink\\\">\\n                        <a class=\\\"dropdown-item\\\" (click)=\\\"logout()\\\">Sortir</a>\\n                    </div>\\n                </li>\\n            </ul>\\n        </div>\\n    </div>\\n</nav>\"","import { Component, OnInit, ElementRef } from '@angular/core';\nimport { Location, LocationStrategy, PathLocationStrategy } from '@angular/common';\nimport { Router } from '@angular/router';\nimport { CurrentUserService } from '../../services/current-user.service';\nimport { DataService } from '../../api/api/data.service';\nimport { AuthorizationService } from '../../services/authorization.service';\nimport { JuridicEntity } from '../../api';\nimport { NavigationEndInterceptor } from 'app/services/navigationEndInterceptor.service';\nimport { APLICATION } from '../../globalVariables/globalVariables';\n@Component({\n    selector: 'app-navbar',\n    templateUrl: './navbar.component.html',\n    styleUrls: ['./navbar.component.css']\n})\nexport class NavbarComponent implements OnInit {\n\n    public readonly listProjects = APLICATION;\n\n    public mobile_menu_visible: any = 0;\n    private toggleButton: any;\n    private sidebarVisible: boolean;\n    public municipis: JuridicEntity[];\n    public currentMunicipi: number;\n\n    constructor(\n        private navigation: NavigationEndInterceptor,\n        public auth: AuthorizationService,\n        public data: DataService,\n        public _currentUserService: CurrentUserService,\n        public location: Location,\n        private element: ElementRef, private router: Router) {\n    }\n\n    public ngOnInit(): void {\n        this.sidebarVisible = false;\n        this.data.getCities(true).subscribe((cities) => {\n            this.municipis = cities;\n            this.currentMunicipi = this._currentUserService.getMunicipi();\n            if (!this.currentMunicipi) {\n                this.currentMunicipi = this.municipis[0].juridicId;\n                this._currentUserService.setMunicipi(this.currentMunicipi);\n            } else {\n                let foundMun = false;\n                for (let index = 0; index < this.municipis.length && !foundMun; index++) {\n                    const element = this.municipis[index];\n                    if (element.juridicId === this.currentMunicipi) {\n                        foundMun = true;\n                    }\n                }\n                if (!foundMun) {\n                    this.currentMunicipi = this.municipis[0].juridicId;\n                    this._currentUserService.setMunicipi(this.currentMunicipi);\n                }\n            }\n            const navbar: HTMLElement = this.element.nativeElement;\n            this.toggleButton = navbar.getElementsByClassName('navbar-toggler')[0];\n            this.router.events.subscribe((event) => {\n                this.sidebarClose();\n                const $layer: any = document.getElementsByClassName('close-layer')[0];\n                if ($layer) {\n                    $layer.remove();\n                    this.mobile_menu_visible = 0;\n                }\n            });\n        });\n    }\n\n\n    /**\n     * Comparator for municipi selector\n     * @param  {number} munId1\n     * @param  {number} munId2\n     * @returns boolean true or false if same municipi\n     */\n    public munComparator(munId1: number, munId2: number): boolean {\n        return munId1 === munId2;\n    }\n\n    public muncipiChanged($event) {\n        this._currentUserService.setMunicipi($event.value);\n        window.location.reload();\n    }\n\n    public getTitle(): string {\n        if(typeof this.navigation.currentMenuItemParent !== \"undefined\"){\n            return this.navigation.currentMenuItemParent.title;\n        }else{\n            return '';\n        }\n    }\n\n    public hasChildMenu(): boolean {\n        return this.navigation.currentMenuItemChild !== undefined;\n    }\n\n    public getTitleChild(): string {\n        return this.hasChildMenu() ? this.navigation.currentMenuItemChild.title : '';\n    }\n\n\n    sidebarOpen() {\n        const toggleButton = this.toggleButton;\n        const body = document.getElementsByTagName('body')[0];\n        setTimeout(function () {\n            toggleButton.classList.add('toggled');\n        }, 500);\n\n        body.classList.add('nav-open');\n\n        this.sidebarVisible = true;\n    };\n    sidebarClose() {\n        const body = document.getElementsByTagName('body')[0];\n        this.toggleButton.classList.remove('toggled');\n        this.sidebarVisible = false;\n        body.classList.remove('nav-open');\n    };\n    sidebarToggle() {\n        // const toggleButton = this.toggleButton;\n        // const body = document.getElementsByTagName('body')[0];\n        var $toggle = document.getElementsByClassName('navbar-toggler')[0];\n\n        if (this.sidebarVisible === false) {\n            this.sidebarOpen();\n        } else {\n            this.sidebarClose();\n        }\n        const body = document.getElementsByTagName('body')[0];\n\n        if (this.mobile_menu_visible == 1) {\n            // $('html').removeClass('nav-open');\n            body.classList.remove('nav-open');\n            if ($layer) {\n                $layer.remove();\n            }\n            setTimeout(function () {\n                $toggle.classList.remove('toggled');\n            }, 400);\n\n            this.mobile_menu_visible = 0;\n        } else {\n            setTimeout(function () {\n                $toggle.classList.add('toggled');\n            }, 430);\n\n            var $layer = document.createElement('div');\n            $layer.setAttribute('class', 'close-layer');\n\n\n            if (body.querySelectorAll('.main-panel')) {\n                document.getElementsByClassName('main-panel')[0].appendChild($layer);\n            } else if (body.classList.contains('off-canvas-sidebar')) {\n                document.getElementsByClassName('wrapper-full-page')[0].appendChild($layer);\n            }\n\n            setTimeout(function () {\n                $layer.classList.add('visible');\n            }, 100);\n\n            $layer.onclick = function () { //asign a function\n                body.classList.remove('nav-open');\n                this.mobile_menu_visible = 0;\n                $layer.classList.remove('visible');\n                setTimeout(function () {\n                    $layer.remove();\n                    $toggle.classList.remove('toggled');\n                }, 400);\n            }.bind(this);\n\n            body.classList.add('nav-open');\n            this.mobile_menu_visible = 1;\n\n        }\n    };\n\n    public logout(): void {\n       this.router.navigateByUrl('/login');\n        this.auth.logout();\n    }\n\n    \n    public projectChanged($event) {\n        this._currentUserService.setProject($event.value);\n        this.router.navigateByUrl('/inici');\n        //window.location.reload();\n    }\n}\n","module.exports = \".sidebar .nav p  {\\n    white-space: normal;\\n    color: black;\\n}\\n\\n.nav-item {\\n    cursor: pointer;\\n    color: black;\\n}\\n\\n.active {\\n    color:black !important;\\n    background: #FFAB03 !important;\\n}\\n\\n.activeBus {\\n    color:black !important;\\n    background: #00b3be !important;\\n}\\n\\n.sidebar-wrapper li.nav-item .nav-link{\\n    padding: 0;\\n    margin: 0; \\n}\\n\\n.activeChild{\\n    color:black !important;\\n    background: #FFAB03 !important;\\n}\\n\\n.activeChildBus{\\n    color:black !important;\\n    background: #00b3be !important;\\n}\\n\\n.active .material-icons{color:black !important;}\\n\\n.material-icons{color:black !important;}\\n\\n.elementMenu{\\n    padding: 10px 30px;\\n}\\n\\n.childrenNav p{padding: 7px 71px!important;}\\n\\n.logo {background: white;padding: 15px 0;text-align: center;}\\n\\n.logo a{color: white;font-size:30px;font-weight: 700;}\\n\\n.sidebar-wrapper {\\n    background: white;\\n    color: black;\\n    background-repeat: no-repeat;\\n    background-position: bottom left;\\n    /*background-image: url('/assets/img/fons.png');*/\\n}\\n\\n.logo .line-logo{\\n    position: absolute;\\n    bottom: 3px;\\n    height: 3px;\\n    width: 100%;\\n    background-color: rgba(180, 180, 180, 0.3);\\n}\\n\\n.simple-text {\\n    color: #fff !important;\\n}\\n\\n.version {\\n    position:fixed;\\n    bottom:0;\\n    left:105px;\\n    border:1px solid white;\\n    border-radius: 3px 3px 0px 0px;\\n    padding-left:5px;\\n    padding-right:5px;\\n}\"","module.exports = \"<div class=\\\"logo\\\">\\n    <img src=\\\"assets/img/logo_color.svg\\\" width=\\\"130\\\" />\\n    <div class=\\\"line-logo\\\"></div>\\n</div>\\n<div class=\\\"sidebar-wrapper\\\">\\n    <div *ngIf=\\\"isMobileMenu()\\\">\\n        <ul class=\\\"nav navbar-nav nav-mobile-menu\\\">\\n            <li class=\\\"nav-item dropdown\\\">\\n                <a class=\\\"nav-link\\\" href=\\\"http://example.com\\\" id=\\\"navbarDropdownMenuLink\\\" data-toggle=\\\"dropdown\\\" aria-haspopup=\\\"true\\\" aria-expanded=\\\"false\\\">\\n                    <i class=\\\"material-icons\\\">person</i>\\n                    <span>{{ curUser.getFullName() }}</span>\\n                    <p>\\n                        <span class=\\\"d-lg-none d-md-block\\\">Accions</span>\\n                    </p>\\n                </a>\\n                <div class=\\\"dropdown-menu dropdown-menu-right\\\" aria-labelledby=\\\"navbarDropdownMenuLink\\\">\\n                    <a class=\\\"dropdown-item\\\" [routerLink]=\\\"['/login']\\\">Sortir</a>\\n                </div>\\n            </li>\\n        </ul>\\n    </div>\\n    <ul class=\\\"nav\\\">\\n        <li *ngFor=\\\"let menuItem of menuItems\\\" class=\\\"{{menuItem.class}} nav-item\\\">\\n            <div>\\n                <a class=\\\"nav-link\\\">\\n                    <div  class=\\\"elementMenu\\\" [ngClass]=\\\"getColorSproBus(menuItem)\\\" [routerLink]=\\\"[menuItem.path]\\\"\\n                        (click)=\\\"toggleChildren(menuItem)\\\">\\n                        <i class=\\\"material-icons\\\" [ngClass]=\\\"getColorSproBus(menuItem)\\\">{{menuItem.icon}}</i>\\n                        <p>menuItem.title</p>\\n                    </div>\\n                </a>\\n            </div>\\n        </li>\\n    </ul>\\n    <div class=\\\"version\\\">\\n        {{ version }}\\n    </div>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { CurrentUserService } from '../../services/current-user.service';\nimport { environment } from '../../../environments/environment';\nimport { AuthorizationService } from '../../services/authorization.service';\nimport { config } from 'config/config';\nimport { NavigationEndInterceptor } from 'app/services/navigationEndInterceptor.service';\nimport { DashboardComponent } from 'app/dashboard/dashboard.component';\nimport { DUMRoutes } from 'app/app.routing';\ndeclare const $: any;\n\nexport interface MenuItem {\n    path?: string,\n    key: string,\n    title: string,\n    icon: string,\n    component?: any,\n    permission?: any,\n    childrenVisible?: boolean,\n    class?: string,\n    children?: MenuItemChild[]\n    application?:any,\n}\n\nexport interface MenuItemChild {\n    path: string,\n    title: string,\n    component: any,\n    class?: string,\n    permission?: any\n}\n\nexport const DUM_MENU_ITEMS: MenuItem[] = [\n    {\n        path: '/inici',\n        key: 'inici',\n        title: 'MENUITEM.HOME',\n        icon: 'home',\n        children: undefined,\n        childrenVisible: false,\n        component: DashboardComponent\n    }\n];\n\n\n\n@Component({\n    selector: 'app-sidebar',\n    templateUrl: './sidebar.component.html',\n    styleUrls: ['./sidebar.component.css']\n})\nexport class SidebarComponent implements OnInit {\n    public menuItems: MenuItem[];\n    public url: string;\n    public urlAll: string;\n    public version = environment.version;\n\n    constructor(\n        public curUser: CurrentUserService, public navigation: NavigationEndInterceptor,\n        private router: Router, public auth: AuthorizationService) {\n    }\n\n    ngOnInit() {\n        this.menuItems = DUM_MENU_ITEMS;\n        this.menuItems.forEach((menuItem: MenuItem) => {\n            if (this.checkActiveParent(menuItem)) {\n                menuItem.childrenVisible = true;\n            } else {\n                menuItem.childrenVisible = false;\n            }\n        });\n    }\n\n    public isMobileMenu(): boolean {\n        if ($(window).width() > 991) {\n            return false;\n        }\n        return true;\n    };\n\n    public toggleChildren(menuItem): void {\n        menuItem.childrenVisible = !menuItem.childrenVisible;\n    }\n\n    public isForBarcelona(child): boolean {\n        if (this.curUser.getMunicipi() === config.MUNICIPI_BARCELONA_ID) {\n            if (child.key === 'arees') {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public isAppliaction(child): boolean {\n        if(child.application === undefined || child.application == this.curUser.getProject() ){\n            return true;\n        }\n        return false;\n    }\n\n    public checkActiveParent(menuItem: MenuItem): boolean {\n        if (menuItem) {\n            if (menuItem.children) {\n                let activeChild = false;\n                for (let index = 0; index < menuItem.children.length && !activeChild; index++) {\n                    activeChild = this.checkActiveChild(menuItem.children[index], menuItem);\n                }\n                if (activeChild) {\n                    this.navigation.currentMenuItemParent = menuItem;\n                    return true;\n                }\n            }\n            const dumRoute: DUMRoutes = this.navigation.currentDumRoute;\n            if (dumRoute && menuItem.component) {\n                if (Array.isArray(menuItem.component)) {\n                    let isSameComponent = false;\n                    for (let index = 0; index < menuItem.component.length && !isSameComponent; index++) {\n                        isSameComponent = menuItem.component[index] === dumRoute.component;\n                    }\n                    if (isSameComponent) {\n                        this.navigation.currentMenuItemChild = undefined;\n                        this.navigation.currentMenuItemParent = menuItem\n                        return true;\n                    }\n                } else {\n                    if (menuItem.component === dumRoute.component) {\n                        this.navigation.currentMenuItemChild = undefined;\n                        this.navigation.currentMenuItemParent = menuItem;\n                        return true;\n                    }\n                }\n            }\n\n        }\n        return false;\n    }\n\n    public checkActiveChild(menuItemChild: MenuItemChild, menuItem: MenuItem): boolean {\n        const dumRoute: DUMRoutes = this.navigation.currentDumRoute;\n        if (dumRoute && menuItemChild.component) {\n            if (Array.isArray(menuItemChild.component)) {\n                let isSameComponent = false;\n                for (let index = 0; index < menuItemChild.component.length && !isSameComponent; index++) {\n                    isSameComponent = menuItemChild.component[index] === dumRoute.component;\n                }\n                if (isSameComponent) {\n                    this.navigation.currentMenuItemChild = menuItemChild;\n                    return true;\n                }\n            } else {\n                if (menuItemChild.component === dumRoute.component) {\n                    this.navigation.currentMenuItemChild = menuItemChild;\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Color Menu esta actiu\n     * @param menuItem \n     */\n    public getColorSproBus(menuItem: MenuItem){\n        let color = \"\";\n        let boolean = this.checkActiveParent(menuItem)\n        if(boolean){\n            if(this.curUser.isSPRO()){\n                color = \"active\"\n            }else{\n                color = \"activeBus\"\n            }\n        }\n        return color;\n    }\n\n    /**\n     * Color Menu esta actiu\n     * @param menuItem \n     */\n    public getChildColorSproBus(menuItemChild: MenuItemChild, menuItem: MenuItem){\n        let color = \"\";\n        let boolean = this.checkActiveChild(menuItemChild,menuItem)\n        if(boolean){\n            if(this.curUser.isSPRO()){\n                color = \"activeChild\"\n            }else{\n                color = \"activeChildBus\"\n            }\n        }\n        return color;\n    }\n    \n    \n}\n","module.exports = \".card [class*=\\\"card-header-\\\"] {\\n    margin: 15px;\\n}\"","module.exports = \"<div class=\\\"main-content\\\">\\n    <div class=\\\"container-fluid\\\" *ngIf=\\\"loadingDashboard\\\">\\n        <mat-spinner style=\\\"margin:0 auto;\\\"></mat-spinner>\\n    </div>\\n    <div class=\\\"container-fluid\\\" *ngIf=\\\"!loadingDashboard\\\">\\n    </div>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { UserService } from '../api';\nimport { DataService } from '../api/api/data.service';\nimport { TranslateService } from '@ngx-translate/core';\nimport { ToastService } from '../services/toast.service';\nimport { CurrentUserService } from '../services/current-user.service';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})\nexport class DashboardComponent implements OnInit {\n\n\n  constructor() {\n  }\n\n  ngOnInit() {\n  }\n\n}\n","import {Directive, ElementRef, HostListener, Input} from '@angular/core';\n\n@Directive({\n    selector: '[appNumeric]'\n})\n\nexport class NumericDirective {\n\n    @Input('numericType') numericType: string; // number | decimal\n\n    private regex = {\n        number: new RegExp(/^\\d+$/),\n        decimal: new RegExp(/^[0-9]+(\\.[0-9]*){0,1}$/g)\n    };\n\n    private specialKeys = {\n        number: [ 'Backspace', 'Tab', 'End', 'Home', 'ArrowLeft', 'ArrowRight' ],\n        decimal: [ 'Backspace', 'Tab', 'End', 'Home', 'ArrowLeft', 'ArrowRight' ],\n    };\n\n    constructor(private el: ElementRef) {\n    }\n\n    @HostListener('keydown', [ '$event' ])\n    onKeyDown(event: KeyboardEvent) {\n\n        if (this.specialKeys[this.numericType].indexOf(event.key) !== -1) {\n            return;\n        }\n        // Do not use event.keycode this is deprecated.\n        // See: https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode\n        let current: string = this.el.nativeElement.value;\n        let next: string = current.concat(event.key);\n        if (next && !String(next).match(this.regex[this.numericType])) {\n            event.preventDefault();\n        }\n    }\n}","export const AgremiatType = [{\n  id: 1,\n  name: 'Autònomo'\n},\n{\n  id: 2,\n  name: 'Empresa'\n}];\n\nexport const EstatsUsuari = [\n  {\n    value: 1,\n    nom: 'GESTIO_OPERATIVA.PENDING_ACTIVATION'\n  },\n  {\n    value: 2,\n    nom: 'GESTIO_OPERATIVA.ACTIVE'\n  },\n  {\n    value: 3,\n    nom: 'GESTIO_OPERATIVA.BLOCKED'\n  },\n  {\n    value: 5,\n    nom: 'GESTIO_OPERATIVA.DELETED_USER'\n  }\n];\n\nexport const ETIQUETAS_ECO: String[] = [\n  '0', 'EC', 'C', 'B'\n];\n\nexport enum FUNCIONALITIES {\n  USER_QUERY = 'USER_QUERY',\n  USER_MANAGEMENT = 'USER_MANAGEMENT',\n  OPERATIONS_QUERY = 'OPERATIONS_QUERY',\n  OPERATIONS_MANAGEMENT = 'OPERATIONS_MANAGEMENT',\n  USERBO_QUERY = 'USERBO_QUERY',\n  USERBO_MANAGEMENT = 'USERBO_MANAGEMENT',\n  WATCHER_QUERY = 'WATCHER_QUERY',\n  WATCHER_MANAGEMENT = 'WATCHER_MANAGEMENT',\n  AREA_QUERY = 'AREA_QUERY',\n  AREA_MANAGEMENT = 'AREA_MANAGEMENT',\n  GUILD_QUERY = 'GUILD_QUERY',\n  GUILD_MANAGEMENT = 'GUILD_MANAGEMENT',\n  NOTIFICATIONS_MANAGEMENT = 'NOTIFICATIONS_MANAGEMENT',\n  SYSTEM_ADMIN = 'SYSTEM_ADMIN',\n  VEHICLES_QUERY = 'VEHICLES_QUERY',\n  VEHICLES_MANAGEMENT = 'VEHICLES_MANAGEMENT'\n};\n\nexport enum PROFILES {\n  TOT_ACTIVAT = 'Tot activat',\n  AREA = 'AREA',\n  ADMIN = 'Administrador',\n  AT_CLIENT_BASIC = 'Atenció Client Bàsic',\n  AT_CLIENT_OPERATIU = 'Atenció Client Operatiu',\n  AMB_ADMIN = 'AMB Administrador',\n  AMB_FINANCE = 'AMB Finances',\n  AMB_QUERY = 'AMB Consulta'\n}\n\n\nexport enum APLICATION {\n  ZONA_DUM,\n  ZONA_BUS\n}\n\n","module.exports = \"<div class=\\\"row login-block\\\" style=\\\"width:95%\\\">\\n      <div class=\\\"col-md-4\\\">\\n        &nbsp;\\n      </div>\\n      <div class=\\\"col-md-4\\\">\\n          <img src=\\\"assets/img/logo_color.svg\\\" width=\\\"150\\\" />\\n      </div>\\n</div>\\n<div class=\\\"row\\\" style=\\\"width:95%\\\">\\n  <div class=\\\"col-md-4\\\">\\n    &nbsp;\\n  </div>\\n    <div class=\\\"col-md-4\\\">\\n        <div class=\\\"card\\\" style=\\\"margin-bottom:0;\\\">\\n            <div class=\\\"card-header card-header-warning\\\">\\n                <h4 class=\\\"card-title\\\">Inicia sessió</h4>\\n            </div>\\n            <div class=\\\"card-body table-responsive\\\">\\n              <form>\\n                  <div class=\\\"row\\\">\\n                      <div class=\\\"col-lg-12\\\">\\n                          <mat-form-field>\\n                              <input name=\\\"login\\\" matInput placeholder=\\\"Escriu el usuari\\\" [formControl]=\\\"email\\\" required>\\n                            </mat-form-field>\\n                      </div>\\n                    </div>\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col-lg-12\\\">\\n                            <mat-form-field>\\n                                <input name=\\\"password\\\" matInput placeholder=\\\"Escriu la contrasenya\\\" type=\\\"password\\\" [formControl]=\\\"password\\\" required>\\n                            </mat-form-field>\\n                        </div>\\n                    </div>\\n                      <mat-error *ngIf=\\\"showError\\\">Invàlid usuari</mat-error>\\n                      <button type=\\\"submit\\\" mat-raised-button color=\\\"primary\\\" style=\\\"float:right;\\\" (click)=\\\"login()\\\">Entrar</button>\\n              </form>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n\"","module.exports = \".login-block {\\n  min-height: 20vh;\\n  text-align: center;\\n  padding-top: 100px;\\n  font-size: 30px;\\n  font-weight: bold; }\\n\\n.login-block h1 {\\n  padding-top: 50px; }\\n\\nh2 {\\n  font-weight: 700;\\n  color: #373737; }\\n\"","import { Component, OnInit } from '@angular/core';\n\nimport { FormControl, Validators } from '@angular/forms';\nimport { UserService } from '../api';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { AuthorizationService } from '../services/authorization.service';\nimport { CurrentUserService } from '../services/current-user.service';\nimport { ToastService } from '../services/toast.service';\nimport { OauthService } from '../api/api/oauth.service';\nimport { environment } from 'environments/environment';\nimport { DomSanitizer } from '@angular/platform-browser';\n\ndeclare var $: any;\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n\n  public email = new FormControl('', [Validators.required]);\n  public password = new FormControl('', [Validators.required]);\n  public remember_me = { name: 'remember_me', checked: false };\n  public showError = false;\n  public iframeSrc;\n  public loadingLogin = true;\n\n\n  constructor(\n    private activatedRoute: ActivatedRoute,\n    private oauth: OauthService, private dom: DomSanitizer,\n    private toast: ToastService, private _currentUserService: CurrentUserService,\n    private _userService: UserService, private _router: Router, private _authService: AuthorizationService) {\n  }\n\n  ngOnInit() {\n  }\n\n  login() {\n    this._userService.loginUser(environment.clientId, 'password',\n      'Basic ' + btoa(environment.clientId + ':' + environment.clientSecret), null, this.email.value, this.password.value)\n      .subscribe(\n        (data) => {\n          let body = JSON.parse(data._body);\n          this._authService.setAccessToken(body.access_token);\n          this._authService.setRefreshToken(body.refresh_token);\n          this._currentUserService.loadUser();\n          this._router.navigate(['/inici']);\n        },\n        (err) => {\n          this.showError = true;\n          this.toast.showErrorToast(err);\n          setTimeout(() => {\n            this.showError = false;\n          }, 3000);\n        },\n        () => {\n        }\n      );\n  }\n\n  onChange(event, item) {\n    item.checked = !item.checked;\n  }\n\n  getEmailErrorMessage() {\n    return this.email.hasError('required') ? 'LOGIN.YOU_NEED_VALUE' :\n      this.email.hasError('email') ? 'LOGIN.INVALID_EMAIL' :\n        '';\n  }\n\n  getPassErrorMessage() {\n    return this.email.hasError('required') ? 'LOGIN.YOU_NEED_VALUE' :\n      '';\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { config } from 'config/config';\n\n@Injectable()\nexport class AuthorizationService {\n  constructor() {}\n\n  public logout() {\n    localStorage.setItem(config.LOCAL_STORAGE_KEYS.ACCESS_TOKEN, 'false');\n    localStorage.setItem(config.LOCAL_STORAGE_KEYS.REFRESH_TOKEN, 'false');\n  }\n\n  public setAccessToken(accessToken: string): void {\n    localStorage.setItem(config.LOCAL_STORAGE_KEYS.ACCESS_TOKEN, accessToken);\n  }\n\n  public setRefreshToken(refreshToken: string): void {\n    localStorage.setItem(config.LOCAL_STORAGE_KEYS.REFRESH_TOKEN, refreshToken);\n  }\n\n  public getAccessToken(): string {\n    return localStorage.getItem(config.LOCAL_STORAGE_KEYS.ACCESS_TOKEN);\n  }\n\n  public getRefreshToken(): string {\n    return localStorage.getItem(config.LOCAL_STORAGE_KEYS.REFRESH_TOKEN);\n  }\n\n  public getBearer(): string {\n    return 'Bearer ' + localStorage.getItem(config.LOCAL_STORAGE_KEYS.ACCESS_TOKEN);\n  }\n\n}\n","import { Injectable, EventEmitter } from '@angular/core';\nimport { UserboService, JuridicEntity } from '../api';\n\nimport * as jwt_decode from 'jwt-decode';\nimport { AuthorizationService } from './authorization.service';\nimport { Router, NavigationEnd } from '@angular/router';\nimport { config } from 'config/config';\nimport { DataService } from 'app/api/api/data.service';\nimport { timeout } from 'rxjs/operators';\nimport { APLICATION } from '../globalVariables/globalVariables';\n\nexport interface AccessTokenJWT {\n  access_token: string,\n  refresh_token: string,\n  token_type: string\n  expires_in: number,\n  client_id: string,\n  scope: string,\n  jti: string,\n  profile: string,\n  fullName: string,\n  jurEntities?: number[],\n  AREA_MANAGEMENT?: boolean,\n  AREA_QUERY?: boolean,\n  GUILD_MANAGEMENT?: boolean,\n  GUILD_QUERY?: boolean,\n  NOTIFICATIONS_MANAGEMENT?: boolean,\n  OPERATIONS_MANAGEMENT?: boolean,\n  OPERATIONS_QUERY?: boolean,\n  SYSTEM_ADMIN?: boolean,\n  USERBO_MANAGEMENT?: boolean,\n  USERBO_QUERY?: boolean,\n  USER_MANAGEMENT?: boolean,\n  USER_QUERY?: boolean,\n  WATCHER_MANAGEMENT?: boolean,\n  WATCHER_QUERY?: boolean\n};\n\n@Injectable()\nexport class CurrentUserService {\n  private info: AccessTokenJWT;\n  private municipisEventEmitter: EventEmitter<JuridicEntity[]> = new EventEmitter<JuridicEntity[]>();\n  public canAllMunicipis: boolean;\n\n  constructor(\n    private _auth: AuthorizationService, private router: Router) {\n      this.canAllMunicipis = true;\n      this.loadUser();\n  }\n\n  /**\n   * Carrega el JSON Web Token , muncipi seleccionat i municipis accessibles\n   * @returns void\n   */\n  public loadUser(): void {\n    this.info = this.getDecodedAccessToken(this._auth.getAccessToken());\n    if (this.info == null && this.router.url !== '/login' && this.router.url !== '/') {\n      this.router.navigate(['/login']);\n    } else if (this.info != null) {\n      if (!this.info.jurEntities || this.info.jurEntities.length === 0) {\n        if (!this.getMunicipi()) {\n          this.setMunicipi(config.MUNICIPI_BARCELONA_ID);\n        }\n        this.canAllMunicipis = true;\n      } else {\n        if (!this.getMunicipi()) {\n          this.setMunicipi(this.info.jurEntities[0]);\n        }\n        this.canAllMunicipis = false;\n      }\n      if(this.isSPRO()){\n        this.setProject(APLICATION.ZONA_DUM);\n      }\n    }\n  }\n\n  /**\n   * Retorna si el usuari actual té permis de sistemas\n   * @returns boolean true or false\n   */\n  public isAdmin(): boolean {\n    if (this.info) {\n      return this.info.SYSTEM_ADMIN;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Retorna si el usuari actual té un permís\n   * @param  {any} perm Key o array amb keys del permisos\n   * @returns boolean True si conté el permís , otherwise false\n   */\n  public hasPermission(perm: any): boolean {\n    if (this.info) {\n      if (typeof(perm) === 'string') {\n        return this.info[perm];\n      } else if (typeof(perm) === 'object' && perm.length > 0) {\n        let found = false;\n        for (let index = 0; index < perm.length && !found; index++) {\n          const element = perm[index];\n          found = this.info[element]\n        }\n\n        return found;\n      }\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Retorna el municipi del usuari\n   * @returns number Num del municipi actual\n   */\n  public getMunicipi(): number {\n    return parseFloat(localStorage.getItem(config.LOCAL_STORAGE_KEYS.DUM_MUNICIPI));\n  }\n\n  /**\n   * Guarda el municipi del usuari\n   * @param  {number} municipi\n   * @returns void\n   */\n  public setMunicipi(municipi: number): void {\n    localStorage.setItem(config.LOCAL_STORAGE_KEYS.DUM_MUNICIPI, municipi.toString());\n  }\n\n  /**\n   * Guarda el projecte que esta veient\n   * @param  {number} project\n   * @returns void\n   */\n  public setProject(project: number): void {\n    localStorage.setItem(config.LOCAL_STORAGE_KEYS.PROJECT, project.toString());\n  }\n\n  public isSPRO(): Boolean {\n    return (parseFloat(localStorage.getItem(config.LOCAL_STORAGE_KEYS.PROJECT)) == APLICATION.ZONA_DUM) || localStorage.getItem(config.LOCAL_STORAGE_KEYS.PROJECT) == null;\n  }\n\n  public isZonaBus(): Boolean {\n    return (parseFloat(localStorage.getItem(config.LOCAL_STORAGE_KEYS.PROJECT)) == APLICATION.ZONA_BUS);\n  }\n\n    /**\n   * Retorna el project del usuari\n   * @returns number Num del project actual\n   */\n  public getProject(): number {\n    return parseFloat(localStorage.getItem(config.LOCAL_STORAGE_KEYS.PROJECT));\n  }\n\n  /**\n   * Retorna els municipis accessibles al usuari actual\n   * @returns EventEmitter<JuridicEntity[]> emitter dels events on es pot subscriure i obtenir municipis un cop carregats\n   */\n  public getAccessibleMunicipisEvent(): EventEmitter<JuridicEntity[]> {\n    return this.municipisEventEmitter;\n  }\n\n  /**\n   * Retorna el nom complert del usuari actual\n   * @returns string\n   */\n  public getFullName(): string {\n    if (this.info) {\n      return this.info.fullName;\n    } else {\n      return '';\n    }\n  }\n\n  /**\n   * Retorna el perfil del usuari actual\n   * @returns string\n   */\n  public getProfile(): string {\n    if (this.info) {\n      return this.info.profile;\n    } else {\n      return '';\n    }\n  }\n\n\n  public getUserMunicipis(): number[] {\n    if (this.info) {\n      return this.info.jurEntities;\n    } else {\n      return [];\n    }\n  }\n\n  /**\n   * Descodifica el access token al objecte AccessTokenJWT\n   * @param  {string} token Token a descodificar\n   * @returns AccessTokenJWT Token com objecte typescript\n   */\n  private getDecodedAccessToken(token: string): AccessTokenJWT {\n    try {\n      return jwt_decode(token);\n    } catch (Error) {\n      return null;\n    }\n  }\n}\n","// src/app/auth/token.interceptor.ts\nimport { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport { AuthorizationService } from './authorization.service';\nimport { from } from 'rxjs';\nimport { UserService } from '../api';\nimport { Router } from '@angular/router';\nimport { map, catchError } from 'rxjs/operators';\nimport { environment } from 'environments/environment';\n\n@Injectable()\nexport class TokenInterceptor implements HttpInterceptor {\n  private observable: any;\n  constructor(public auth: AuthorizationService, public userService: UserService,public router: Router) { }\n\n  applyAuthHeader(request: HttpRequest<any>): HttpRequest<any> {\n    if ((request.headers.get('Authorization') == null || request.headers.get('Authorization') === '')\n    && this.auth.getAccessToken() != null && this.auth.getAccessToken() !== 'false' && this.auth.getAccessToken()) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: this.auth.getBearer()\n        }\n      });\n    }\n    return request;\n  }\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    const observable = Observable.create((observer) => {\n      next.handle(this.applyAuthHeader(request)).toPromise().then((res) => {\n        observer.next(res);\n        observer.complete();\n      }).catch((res) => {\n        if (res.status === 401) {\n          if (this.auth.getRefreshToken() != null) {\n            this.userService.loginUser(environment.clientId, 'refresh_token',\n            'Basic ' + btoa(environment.clientId + ':' + environment.clientSecret), this.auth.getRefreshToken(), null, null)\n            .subscribe((data) => {\n              const body = JSON.parse(data._body);\n              this.auth.setAccessToken(body.access_token);\n              this.auth.setRefreshToken(body.refresh_token);\n              request = request.clone({\n                setHeaders : {\n                  Authorization : ''\n                }\n              });\n              next.handle(this.applyAuthHeader(request)).toPromise().then(function(res2) {\n                observer.next(res2);\n                observer.complete();\n              }).catch((err) => {\n                if (err.status === 401) {\n                  this.router.navigate(['/login']);\n                }\n                console.error(err);\n                observer.error(err);\n              });\n            }, (err) => {\n              this.router.navigate(['/login']);\n              console.error(err);\n              observer.error(err);\n            }, () => {\n            });\n          } else {\n            this.router.navigate(['/login']);\n            observer.error('no refresh token');\n          }\n\n        } else {\n          observer.error(res);\n        }\n      });\n    });\n\n    return observable;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CurrentUserService } from './current-user.service';\nimport { Router, NavigationEnd } from '@angular/router';\nimport { DUMRoutes, DUM_ROUTES } from '../app.routing';\nimport { TranslateService } from '@ngx-translate/core';\nimport { ToastService } from './toast.service';\nimport { MenuItem, MenuItemChild } from 'app/components/sidebar/sidebar.component';\n\n@Injectable()\nexport class NavigationEndInterceptor {\n\n    public currentDumRoute: DUMRoutes;\n    public currentUrl: string;\n    public currentMenuItemParent: MenuItem;\n    public currentMenuItemChild: MenuItemChild;\n\n    constructor(\n        private toast: ToastService,\n        private curUser: CurrentUserService, private router: Router) {\n    }\n    \n\n    /**\n     * Setups interceptor\n     * Should be called in app component on application init\n     * @returns void\n     */\n    public setup(): void {\n        this.router.events.subscribe((e) => {\n            if (e instanceof NavigationEnd) {\n                // Settear currentUrl sense paramQueries\n                this.currentUrl = e.url;\n                this.currentUrl = this.currentUrl.split('?')[0];\n                // Carrega TOKEN JSON i variables de current user\n                this.curUser.loadUser();\n                // Comprovar si tè permis per accedir a aquesta secció\n                this.currentDumRoute = this.getDumRoute(this.currentUrl);\n                if (this.currentDumRoute && this.currentDumRoute.permissions) {\n                    if (!this.curUser.hasPermission(this.currentDumRoute.permissions)) {\n                        // Mostrar error access denegat\n                        // Redirigir a dashboard\n                        setTimeout(() => {\n                            this.router.navigateByUrl('/');\n                        }, 2000);\n                    }\n                }\n            }\n        });\n    }\n\n    private getDumRoute(url: string): DUMRoutes {\n        return DUM_ROUTES.find((item: DUMRoutes) => {\n            const pathSplitted = item.path.split('/');\n            const urlSplitted = url.substring(1, url.length).split('/');\n            let isSame = true;\n            for (let index = 0; index < pathSplitted.length && isSame; index++) {\n                const actualPath = pathSplitted[index];\n                const actualUrl = urlSplitted[index];\n                isSame = actualUrl && (actualPath === ':id' || actualPath === actualUrl);\n            }\n            return isSame;\n        });\n    }\n}","import { Injectable } from '@angular/core';\n\nexport interface Pagination {\n  page: number,\n  totalPages: number,\n  size: number\n}\n@Injectable({\n  providedIn: 'root'\n})\nexport class PaginatorService {\n\n  public pag: Pagination;\n  public sizes = [10, 20, 50, 100];\n  public load: Function;\n  constructor() { }\n\n  public init(loadFn: Function) {\n    this.load = loadFn;\n    this.reset();\n  }\n\n  public reset() {\n    this.pag = {\n      page: 1,\n      size: 10,\n      totalPages: 1\n    };\n  }\n\n  public isDisabledLeft() {\n    return this.pag.page === 1;\n  }\n\n  public isDisabledRight() {\n    return this.pag.page === this.pag.totalPages;\n  }\n\n  public goFirst() {\n    this.pag.page = 1;\n    this.onPageChange();\n  }\n\n  public goLeft() {\n    this.pag.page = this.pag.page - 1;\n    this.onPageChange();\n  }\n\n  public goRight() {\n    this.pag.page = this.pag.page + 1;\n    this.onPageChange();\n  }\n\n  public goLast() {\n    this.pag.page = this.pag.totalPages;\n    this.onPageChange();\n  }\n\n  public sizeChange() {\n    this.pag.page = 1;\n    this.onPageChange();\n  }\n\n  public onPageChange() {\n    if (this.pag.page < 1 || this.pag.page > this.pag.totalPages) {\n      this.pag.page = 1;\n    }\n    this.load();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\ndeclare var $: any;\n\n@Injectable()\nexport class ToastService {\n\n    public TOAST_TYPES = {\n        DANGER : 'danger',\n        SUCCESS : 'success',\n        WARNING : 'warning'\n    };\n    \n    constructor() { }\n\n    public showErrorToast(message) {\n        $.notify({\n            icon: 'error',\n            message: message\n        }, {\n            type: 'danger',\n            timer: 4000,\n            placement: {\n                from: 'bottom',\n                align: 'right'\n            },\n            template: '<div data-notify=\"container\" class=\"col-xl-4 col-lg-4 col-11 col-sm-4 ' +\n                ' col-md-4 alert alert-{0} alert-with-icon\" role=\"alert\">' +\n                '<button mat-button  type=\"button\" aria-hidden=\"true\" class=\"close mat-button\" data-notify=\"dismiss\">' +\n                '<i class=\"material-icons\">close</i></button>' +\n                '<i class=\"material-icons\" data-notify=\"icon\">error</i> ' +\n                '<span data-notify=\"title\">{1}</span> ' +\n                '<span data-notify=\"message\">' + message + '</span>' +\n                '<div class=\"progress\" data-notify=\"progressbar\">' +\n                '<div class=\"progress-bar progress-bar-{0}\" role=\"progressbar\" aria-valuenow=\"0\"' +\n                'aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 0%;\"></div>' +\n                '</div>' +\n                '<a href=\"{3}\" target=\"{4}\" data-notify=\"url\"></a>' +\n                '</div>'\n        })\n    }\n\n    public notify(type: string, message: string) {\n        $.notify({\n            icon: 'notifications',\n            message: message\n        }, {\n                type: type,\n                timer: 4000,\n                placement: {\n                    from: 'bottom',\n                    align: 'right'\n                },\n                template: '<div data-notify=\"container\" class=\"col-xl-4 col-lg-4 col-11 col-sm-4 ' +\n                    ' col-md-4 alert alert-{0} alert-with-icon\" role=\"alert\">' +\n                    '<button mat-button  type=\"button\" aria-hidden=\"true\" class=\"close mat-button\" data-notify=\"dismiss\">' +\n                    '<i class=\"material-icons\">close</i></button>' +\n                    '<i class=\"material-icons\" data-notify=\"icon\">notifications</i> ' +\n                    '<span data-notify=\"title\">{1}</span> ' +\n                    '<span data-notify=\"message\">' + message + '</span>' +\n                    '<div class=\"progress\" data-notify=\"progressbar\">' +\n                    '<div class=\"progress-bar progress-bar-{0}\" role=\"progressbar\" aria-valuenow=\"0\"' +\n                    'aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 0%;\"></div>' +\n                    '</div>' +\n                    '<a href=\"{3}\" target=\"{4}\" data-notify=\"url\"></a>' +\n                    '</div>'\n        });\n    }\n}\n","export const config = {\n    // IDs Ciutats que cal no mostrar\n    OMIT_MUNICIPIS : [],\n    CLIENT_ID : 'bo',\n    MAX_TICKETS : 500,\n    MAX_TICKETS_EXPORT : 500,\n    OMIT_MUNICIPIS_FILTER : [],\n    LOCALE: 'ca',\n    MUNICIPI_BARCELONA_ID : 1,\n    LOCAL_STORAGE_KEYS : {\n        DUM_MUNICIPI : 'dum_municipi',\n        ACCESS_TOKEN : 'dumBO_accessToken',\n        REFRESH_TOKEN : 'dumBO_refreshToken',\n        PROJECT : 'dum_project',\n    }\n}\n","// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `.angular-cli.json`.\nimport { version } from './version';\n\nexport const environment = {\n  production: false,\n  baseHref : '/',\n  //api: 'https://dum.nexusgeografics.com/api/snapshot/v1',\n  api : 'http://localhost:8081/api',\n  version : version,\n  geoserverPath : 'http://maas.nexusgeografics.com/geoserver/maas/ows',\n  geoserverWFS : 'https://maas.nexusgeografics.com/geoserver/maas/wfs',\n  geoserverUser : 'editor',\n  geoserverPass : 'editor',\n  layerWMS : 'http://geoserveis.icc.cat/icc_mapesmultibase/noutm/wms/service?',\n  clientId : 'bo',\n  clientSecret : 'secret'\n};\n","export const version = '2.0.0';\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\nimport 'hammerjs';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n"],"sourceRoot":""}