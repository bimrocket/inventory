/**
 * MAAS API
 * This is the Mobility as a Service API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: avalls@nexusgeographics.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { Coupon } from '../model/coupon';
import { ErrorGeneric } from '../model/errorGeneric';
import { InlineResponse200 } from '../model/inlineResponse200';
import { NearConfigs } from '../model/nearConfigs';
import { Price } from '../model/price';
import { StartOffData } from '../model/startOffData';
import { StartOnData } from '../model/startOnData';
import { StartThirdData } from '../model/startThirdData';
import { StopOffData } from '../model/stopOffData';
import { StopOnData } from '../model/stopOnData';
import { Ticket } from '../model/ticket';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ParkService {

    protected basePath = 'http://maas.nexusgeografics.com/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Cancel a start
     * 
     * @param authorization Token of authentication
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cancelOffStart(authorization: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public cancelOffStart(authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public cancelOffStart(authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public cancelOffStart(authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling cancelOffStart.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (MaaS Token) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/off/start/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Add coupons by scaning
     * 
     * @param authorization Token of authentication
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public couponsPost(authorization: string, body: number, observe?: 'body', reportProgress?: boolean): Observable<Coupon>;
    public couponsPost(authorization: string, body: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Coupon>>;
    public couponsPost(authorization: string, body: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Coupon>>;
    public couponsPost(authorization: string, body: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling couponsPost.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling couponsPost.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (MaaS Token) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<Coupon>(`${this.basePath}/coupons`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Car&#39;s exit call
     * 
     * @param ticketID 
     * @param authorization Token of authentication
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public exitCar(ticketID: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public exitCar(ticketID: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public exitCar(ticketID: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public exitCar(ticketID: number, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (ticketID === null || ticketID === undefined) {
            throw new Error('Required parameter ticketID was null or undefined when calling exitCar.');
        }
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling exitCar.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (ticketID !== undefined) {
            queryParameters = queryParameters.set('ticketID', <any>ticketID);
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (MaaS Token) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<any>(`${this.basePath}/off/exit`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get all
     * 
     * @param authorization Token of authentication
     * @param order Order to apply
     * @param userID User filter
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllBonus(authorization: string, order?: string, userID?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Coupon>>;
    public getAllBonus(authorization: string, order?: string, userID?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Coupon>>>;
    public getAllBonus(authorization: string, order?: string, userID?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Coupon>>>;
    public getAllBonus(authorization: string, order?: string, userID?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling getAllBonus.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (order !== undefined) {
            queryParameters = queryParameters.set('order', <any>order);
        }
        if (userID !== undefined) {
            queryParameters = queryParameters.set('userID', <any>userID);
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (MaaS Token) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<Coupon>>(`${this.basePath}/coupons`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Has automatic entry
     * This method is called by SIC to know if the vehicle has the automatic entry activated.
     * @param plateNumber 
     * @param authorization Token of authentication
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public hasAutomaticEntry(plateNumber: string, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<number>;
    public hasAutomaticEntry(plateNumber: string, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<number>>;
    public hasAutomaticEntry(plateNumber: string, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<number>>;
    public hasAutomaticEntry(plateNumber: string, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (plateNumber === null || plateNumber === undefined) {
            throw new Error('Required parameter plateNumber was null or undefined when calling hasAutomaticEntry.');
        }
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling hasAutomaticEntry.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (plateNumber !== undefined) {
            queryParameters = queryParameters.set('plateNumber', <any>plateNumber);
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (MaaS Token) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<number>(`${this.basePath}/off/hasAutomaticEntry`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * NearConfigurations
     * Returns the availability for all the cities around one point if the user hasn&#39;t an active ticket or the time or position of last ticket pass the chain restricitions.
     * @param lng Longitude value
     * @param lat Latitude value
     * @param authorization Token of authentication
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public nearConfigurations(lng: number, lat: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<Array<NearConfigs>>;
    public nearConfigurations(lng: number, lat: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<NearConfigs>>>;
    public nearConfigurations(lng: number, lat: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<NearConfigs>>>;
    public nearConfigurations(lng: number, lat: number, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (lng === null || lng === undefined) {
            throw new Error('Required parameter lng was null or undefined when calling nearConfigurations.');
        }
        if (lat === null || lat === undefined) {
            throw new Error('Required parameter lat was null or undefined when calling nearConfigurations.');
        }
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling nearConfigurations.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (lng !== undefined) {
            queryParameters = queryParameters.set('lng', <any>lng);
        }
        if (lat !== undefined) {
            queryParameters = queryParameters.set('lat', <any>lat);
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (MaaS Token) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<NearConfigs>>(`${this.basePath}/on/nearConfigurations`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Stop ticket
     * 
     * @param authorization Token of authentication
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public offStopPost(authorization: string, body: StopOffData, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public offStopPost(authorization: string, body: StopOffData, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public offStopPost(authorization: string, body: StopOffData, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public offStopPost(authorization: string, body: StopOffData, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling offStopPost.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling offStopPost.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (MaaS Token) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/off/stop/`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get offStreet ticket
     * 
     * @param ticketUcaID 
     * @param authorization Token of authentication
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public offTicketGet(ticketUcaID: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<StartOffData>;
    public offTicketGet(ticketUcaID: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<StartOffData>>;
    public offTicketGet(ticketUcaID: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<StartOffData>>;
    public offTicketGet(ticketUcaID: number, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (ticketUcaID === null || ticketUcaID === undefined) {
            throw new Error('Required parameter ticketUcaID was null or undefined when calling offTicketGet.');
        }
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling offTicketGet.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (ticketUcaID !== undefined) {
            queryParameters = queryParameters.set('ticketUcaID', <any>ticketUcaID);
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (MaaS Token) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<StartOffData>(`${this.basePath}/off/ticket`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get the predictions
     * 
     * @param lon 
     * @param lat 
     * @param types Section type
     * @param authorization Token of authentication
     * @param dateTime If not set → now
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public predictionGet(lon: number, lat: number, types: Array<string>, authorization: string, dateTime?: Date, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse200>;
    public predictionGet(lon: number, lat: number, types: Array<string>, authorization: string, dateTime?: Date, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse200>>;
    public predictionGet(lon: number, lat: number, types: Array<string>, authorization: string, dateTime?: Date, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse200>>;
    public predictionGet(lon: number, lat: number, types: Array<string>, authorization: string, dateTime?: Date, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (lon === null || lon === undefined) {
            throw new Error('Required parameter lon was null or undefined when calling predictionGet.');
        }
        if (lat === null || lat === undefined) {
            throw new Error('Required parameter lat was null or undefined when calling predictionGet.');
        }
        if (types === null || types === undefined) {
            throw new Error('Required parameter types was null or undefined when calling predictionGet.');
        }
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling predictionGet.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (lon !== undefined) {
            queryParameters = queryParameters.set('lon', <any>lon);
        }
        if (lat !== undefined) {
            queryParameters = queryParameters.set('lat', <any>lat);
        }
        if (types) {
            types.forEach((element) => {
                queryParameters = queryParameters.append('types', <any>element);
            })
        }
        if (dateTime !== undefined) {
            queryParameters = queryParameters.set('dateTime', <any>dateTime.toISOString());
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (MaaS Token) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<InlineResponse200>(`${this.basePath}/prediction`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get the price
     * Get the price of one configuration and plateNumber
     * @param plateNumber 
     * @param configuration 
     * @param zoneTypeId 
     * @param city 
     * @param authorization Token of authentication
     * @param endTime 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public price(plateNumber: string, configuration: number, zoneTypeId: number, city: number, authorization: string, endTime?: Date, observe?: 'body', reportProgress?: boolean): Observable<number>;
    public price(plateNumber: string, configuration: number, zoneTypeId: number, city: number, authorization: string, endTime?: Date, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<number>>;
    public price(plateNumber: string, configuration: number, zoneTypeId: number, city: number, authorization: string, endTime?: Date, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<number>>;
    public price(plateNumber: string, configuration: number, zoneTypeId: number, city: number, authorization: string, endTime?: Date, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (plateNumber === null || plateNumber === undefined) {
            throw new Error('Required parameter plateNumber was null or undefined when calling price.');
        }
        if (configuration === null || configuration === undefined) {
            throw new Error('Required parameter configuration was null or undefined when calling price.');
        }
        if (zoneTypeId === null || zoneTypeId === undefined) {
            throw new Error('Required parameter zoneTypeId was null or undefined when calling price.');
        }
        if (city === null || city === undefined) {
            throw new Error('Required parameter city was null or undefined when calling price.');
        }
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling price.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (plateNumber !== undefined) {
            queryParameters = queryParameters.set('plateNumber', <any>plateNumber);
        }
        if (configuration !== undefined) {
            queryParameters = queryParameters.set('configuration', <any>configuration);
        }
        if (zoneTypeId !== undefined) {
            queryParameters = queryParameters.set('zoneTypeId', <any>zoneTypeId);
        }
        if (city !== undefined) {
            queryParameters = queryParameters.set('city', <any>city);
        }
        if (endTime !== undefined) {
            queryParameters = queryParameters.set('endTime', <any>endTime.toISOString());
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (MaaS Token) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<number>(`${this.basePath}/on/price`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Register ticket
     * 
     * @param authorization Token of authentication
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public registerTicket(authorization: string, body: StartOffData, observe?: 'body', reportProgress?: boolean): Observable<Ticket>;
    public registerTicket(authorization: string, body: StartOffData, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Ticket>>;
    public registerTicket(authorization: string, body: StartOffData, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Ticket>>;
    public registerTicket(authorization: string, body: StartOffData, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling registerTicket.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling registerTicket.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (MaaS Token) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<Ticket>(`${this.basePath}/off/start/`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Start
     * Parking start    
     * @param authorization Token of authentication
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public start(authorization: string, body: StartOnData, observe?: 'body', reportProgress?: boolean): Observable<Ticket>;
    public start(authorization: string, body: StartOnData, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Ticket>>;
    public start(authorization: string, body: StartOnData, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Ticket>>;
    public start(authorization: string, body: StartOnData, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling start.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling start.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (MaaS Token) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<Ticket>(`${this.basePath}/on/start`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Stop
     * Stop
     * @param authorization Token of authentication
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public stop(authorization: string, body: StopOnData, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public stop(authorization: string, body: StopOnData, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public stop(authorization: string, body: StopOnData, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public stop(authorization: string, body: StopOnData, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling stop.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling stop.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (MaaS Token) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/on/stop`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * NearConfigurations
     * Returns the availability for all the cities around one point if the user hasn&#39;t an active ticket or the time or position of last ticket pass the chain restricitions.
     * @param lng Longitude value
     * @param lat Latitude value
     * @param locale 
     * @param authorization Token of authentication
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public thirdNearConfigurations(lng: number, lat: number, locale: string, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<Array<NearConfigs>>;
    public thirdNearConfigurations(lng: number, lat: number, locale: string, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<NearConfigs>>>;
    public thirdNearConfigurations(lng: number, lat: number, locale: string, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<NearConfigs>>>;
    public thirdNearConfigurations(lng: number, lat: number, locale: string, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (lng === null || lng === undefined) {
            throw new Error('Required parameter lng was null or undefined when calling thirdNearConfigurations.');
        }
        if (lat === null || lat === undefined) {
            throw new Error('Required parameter lat was null or undefined when calling thirdNearConfigurations.');
        }
        if (locale === null || locale === undefined) {
            throw new Error('Required parameter locale was null or undefined when calling thirdNearConfigurations.');
        }
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling thirdNearConfigurations.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (lng !== undefined) {
            queryParameters = queryParameters.set('lng', <any>lng);
        }
        if (lat !== undefined) {
            queryParameters = queryParameters.set('lat', <any>lat);
        }
        if (locale !== undefined) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (MaaS Token) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<NearConfigs>>(`${this.basePath}/thirdparty/nearConfigurations`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get the price
     * Get the price via (madatory one group of params) : * one configuration, city and plateNumber * ticketID
     * @param startTime 
     * @param authorization Token of authentication
     * @param plateNumber 
     * @param cityID 
     * @param configurationID 
     * @param ticketID 
     * @param endTIme If not set, the method calculates the maximum import.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public thirdPrice(startTime: Date, authorization: string, plateNumber?: string, cityID?: number, configurationID?: number, ticketID?: number, endTIme?: Date, observe?: 'body', reportProgress?: boolean): Observable<Price>;
    public thirdPrice(startTime: Date, authorization: string, plateNumber?: string, cityID?: number, configurationID?: number, ticketID?: number, endTIme?: Date, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Price>>;
    public thirdPrice(startTime: Date, authorization: string, plateNumber?: string, cityID?: number, configurationID?: number, ticketID?: number, endTIme?: Date, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Price>>;
    public thirdPrice(startTime: Date, authorization: string, plateNumber?: string, cityID?: number, configurationID?: number, ticketID?: number, endTIme?: Date, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (startTime === null || startTime === undefined) {
            throw new Error('Required parameter startTime was null or undefined when calling thirdPrice.');
        }
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling thirdPrice.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (plateNumber !== undefined) {
            queryParameters = queryParameters.set('plateNumber', <any>plateNumber);
        }
        if (cityID !== undefined) {
            queryParameters = queryParameters.set('cityID', <any>cityID);
        }
        if (configurationID !== undefined) {
            queryParameters = queryParameters.set('configurationID', <any>configurationID);
        }
        if (ticketID !== undefined) {
            queryParameters = queryParameters.set('ticketID', <any>ticketID);
        }
        if (startTime !== undefined) {
            queryParameters = queryParameters.set('startTime', <any>startTime.toISOString());
        }
        if (endTIme !== undefined) {
            queryParameters = queryParameters.set('endTIme', <any>endTIme.toISOString());
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (MaaS Token) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Price>(`${this.basePath}/thirdparty/price`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Start
     * Start a park.  * If the price is up to 0 and no credit card is configured → error.
     * @param authorization Token of authentication
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public thirdStart(authorization: string, body: StartThirdData, observe?: 'body', reportProgress?: boolean): Observable<Ticket>;
    public thirdStart(authorization: string, body: StartThirdData, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Ticket>>;
    public thirdStart(authorization: string, body: StartThirdData, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Ticket>>;
    public thirdStart(authorization: string, body: StartThirdData, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling thirdStart.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling thirdStart.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (MaaS Token) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<Ticket>(`${this.basePath}/thirdparty/start`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Stop
     * Stop
     * @param authorization Token of authentication
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public thirdStop(authorization: string, body: StopOnData, observe?: 'body', reportProgress?: boolean): Observable<Ticket>;
    public thirdStop(authorization: string, body: StopOnData, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Ticket>>;
    public thirdStop(authorization: string, body: StopOnData, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Ticket>>;
    public thirdStop(authorization: string, body: StopOnData, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling thirdStop.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling thirdStop.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (MaaS Token) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<Ticket>(`${this.basePath}/thirdparty/stop`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Use a bonus
     * Use a bonus in an anctive ticket
     * @param couponId 
     * @param authorization Token of authentication
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public useBonus(couponId: string, authorization: string, body: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public useBonus(couponId: string, authorization: string, body: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public useBonus(couponId: string, authorization: string, body: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public useBonus(couponId: string, authorization: string, body: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (couponId === null || couponId === undefined) {
            throw new Error('Required parameter couponId was null or undefined when calling useBonus.');
        }
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling useBonus.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling useBonus.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (MaaS Token) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/coupons/${encodeURIComponent(String(couponId))}`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
