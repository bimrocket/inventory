/**
 * Smou API
 * This is the Mobility as a Service API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: avalls@nexusgeographics.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { ApiError } from '../model/apiError';
import { ChangeUserPasswordRequest } from '../model/changeUserPasswordRequest';
import { OAuthDetails } from '../model/oAuthDetails';
import { OAuthError } from '../model/oAuthError';
import { OAuthParkingmeter } from '../model/oAuthParkingmeter';
import { OAuthSSOInfo } from '../model/oAuthSSOInfo';
import { ResetUserPasswordRequest } from '../model/resetUserPasswordRequest';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class OauthService {

    protected basePath = 'http://maas.nexusgeografics.com/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Change user pwd
     * 
     * @param authorization Maas Token
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public changePassword(authorization: string, body: ChangeUserPasswordRequest, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public changePassword(authorization: string, body: ChangeUserPasswordRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public changePassword(authorization: string, body: ChangeUserPasswordRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public changePassword(authorization: string, body: ChangeUserPasswordRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling changePassword.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling changePassword.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (MaaS Token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/oauth/password`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Logs in user
     * Logs in user
     * @param authorization Basic authorization should include client_id as username and client_secret as password.  String encoding &#x3D; Base64Encoder.encode (\&quot;client_id:client_secret\&quot;);  HttpPost httppost &#x3D; new HttpPost(\&quot;http://host:post/oauth/token\&quot;);  httppost.setHeader(\&quot;Authorization\&quot;, \&quot;Basic \&quot; + encoding);
     * @param clientId Client id
     * @param grantType Should be password or refresh_token. In case of obtaining new access token use password,
     * @param refreshToken Required in case of refreshing token
     * @param username LDAP username or MAAS username depends on client specified. Required in case of obtaining new access token
     * @param password Password of specified user. Required in case of obtaining new access token
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public loginUser(authorization: string, clientId: string, grantType: string, refreshToken?: string, username?: string, password?: string, observe?: 'body', reportProgress?: boolean): Observable<OAuthDetails>;
    public loginUser(authorization: string, clientId: string, grantType: string, refreshToken?: string, username?: string, password?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OAuthDetails>>;
    public loginUser(authorization: string, clientId: string, grantType: string, refreshToken?: string, username?: string, password?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OAuthDetails>>;
    public loginUser(authorization: string, clientId: string, grantType: string, refreshToken?: string, username?: string, password?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling loginUser.');
        }

        if (clientId === null || clientId === undefined) {
            throw new Error('Required parameter clientId was null or undefined when calling loginUser.');
        }

        if (grantType === null || grantType === undefined) {
            throw new Error('Required parameter grantType was null or undefined when calling loginUser.');
        }




        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (Basic authentication) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/x-www-form-urlencoded'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (clientId !== undefined) {
            formParams = formParams.append('client_id', <any>clientId) || formParams;
        }
        if (grantType !== undefined) {
            formParams = formParams.append('grant_type', <any>grantType) || formParams;
        }
        if (refreshToken !== undefined) {
            formParams = formParams.append('refresh_token', <any>refreshToken) || formParams;
        }
        if (username !== undefined) {
            formParams = formParams.append('username', <any>username) || formParams;
        }
        if (password !== undefined) {
            formParams = formParams.append('password', <any>password) || formParams;
        }

        return this.httpClient.post<OAuthDetails>(`${this.basePath}/oauth/token`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * User login from parking meter
     * User login from parking meter
     * @param authorization Basic authorization should include client_id as username and client_secret as password.  String encoding &#x3D; Base64Encoder.encode (\&quot;client_id:client_secret\&quot;);  HttpPost httppost &#x3D; new HttpPost(\&quot;http://host:post/oauth/token\&quot;);  httppost.setHeader(\&quot;Authorization\&quot;, \&quot;Basic \&quot; + encoding);
     * @param clientId Client id
     * @param grantType Should be password or refresh_token. In case of obtaining new access token use password,
     * @param username LDAP username or MAAS username depends on client specified. Required in case of obtaining new access token
     * @param password Password of specified user. Required in case of obtaining new access token
     * @param parkingmeterId Parking meter code
     * @param requestDate 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public loginUser_1(authorization: string, clientId: string, grantType: string, username: string, password: string, parkingmeterId: number, requestDate: string, observe?: 'body', reportProgress?: boolean): Observable<OAuthParkingmeter>;
    public loginUser_1(authorization: string, clientId: string, grantType: string, username: string, password: string, parkingmeterId: number, requestDate: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OAuthParkingmeter>>;
    public loginUser_1(authorization: string, clientId: string, grantType: string, username: string, password: string, parkingmeterId: number, requestDate: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OAuthParkingmeter>>;
    public loginUser_1(authorization: string, clientId: string, grantType: string, username: string, password: string, parkingmeterId: number, requestDate: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling loginUser_1.');
        }

        if (clientId === null || clientId === undefined) {
            throw new Error('Required parameter clientId was null or undefined when calling loginUser_1.');
        }

        if (grantType === null || grantType === undefined) {
            throw new Error('Required parameter grantType was null or undefined when calling loginUser_1.');
        }

        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling loginUser_1.');
        }

        if (password === null || password === undefined) {
            throw new Error('Required parameter password was null or undefined when calling loginUser_1.');
        }

        if (parkingmeterId === null || parkingmeterId === undefined) {
            throw new Error('Required parameter parkingmeterId was null or undefined when calling loginUser_1.');
        }

        if (requestDate === null || requestDate === undefined) {
            throw new Error('Required parameter requestDate was null or undefined when calling loginUser_1.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (Basic authentication) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/x-www-form-urlencoded'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (clientId !== undefined) {
            formParams = formParams.append('client_id', <any>clientId) || formParams;
        }
        if (grantType !== undefined) {
            formParams = formParams.append('grant_type', <any>grantType) || formParams;
        }
        if (username !== undefined) {
            formParams = formParams.append('username', <any>username) || formParams;
        }
        if (password !== undefined) {
            formParams = formParams.append('password', <any>password) || formParams;
        }
        if (parkingmeterId !== undefined) {
            formParams = formParams.append('parkingmeterId', <any>parkingmeterId) || formParams;
        }
        if (requestDate !== undefined) {
            formParams = formParams.append('requestDate', <any>requestDate) || formParams;
        }

        return this.httpClient.post<OAuthParkingmeter>(`${this.basePath}/oauth/token?client_id=parkingmeter`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Logs out user - NOT IMPLEMENTED
     * User logout - Not implemented and should not be called.
     * @param authorization Token of authentication
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public logout(authorization: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public logout(authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public logout(authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public logout(authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling logout.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (MaaS Token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<any>(`${this.basePath}/oauth/logout`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Request single sign on
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public oauthSsoGet(observe?: 'body', reportProgress?: boolean): Observable<OAuthSSOInfo>;
    public oauthSsoGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OAuthSSOInfo>>;
    public oauthSsoGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OAuthSSOInfo>>;
    public oauthSsoGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        return this.httpClient.get<OAuthSSOInfo>(`${this.basePath}/oauth/sso`,
            {
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Resets user&#39;s password
     * Resets user password
     * @param authorization Token of authentication
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public resetPassword(authorization: string, body: ResetUserPasswordRequest, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public resetPassword(authorization: string, body: ResetUserPasswordRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public resetPassword(authorization: string, body: ResetUserPasswordRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public resetPassword(authorization: string, body: ResetUserPasswordRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling resetPassword.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling resetPassword.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (MaaS Token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/oauth/resetPwd`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Request password reset
     * Request mail for password reset
     * @param email Email of user
     * @param clientId Application
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public resetPasswordInfo(email: string, clientId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public resetPasswordInfo(email: string, clientId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public resetPasswordInfo(email: string, clientId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public resetPasswordInfo(email: string, clientId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (email === null || email === undefined) {
            throw new Error('Required parameter email was null or undefined when calling resetPasswordInfo.');
        }

        if (clientId === null || clientId === undefined) {
            throw new Error('Required parameter clientId was null or undefined when calling resetPasswordInfo.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (email !== undefined && email !== null) {
            queryParameters = queryParameters.set('email', <any>email);
        }
        if (clientId !== undefined && clientId !== null) {
            queryParameters = queryParameters.set('client_id', <any>clientId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<any>(`${this.basePath}/oauth/resetPwd`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Validate password reset
     * Validate mail for password reset
     * @param authorizationCode Token to validate
     * @param clientId Application
     * @param email 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public resetPasswordValidate(authorizationCode: string, clientId: string, email: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public resetPasswordValidate(authorizationCode: string, clientId: string, email: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public resetPasswordValidate(authorizationCode: string, clientId: string, email: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public resetPasswordValidate(authorizationCode: string, clientId: string, email: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (authorizationCode === null || authorizationCode === undefined) {
            throw new Error('Required parameter authorizationCode was null or undefined when calling resetPasswordValidate.');
        }

        if (clientId === null || clientId === undefined) {
            throw new Error('Required parameter clientId was null or undefined when calling resetPasswordValidate.');
        }

        if (email === null || email === undefined) {
            throw new Error('Required parameter email was null or undefined when calling resetPasswordValidate.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (authorizationCode !== undefined && authorizationCode !== null) {
            queryParameters = queryParameters.set('authorizationCode', <any>authorizationCode);
        }
        if (clientId !== undefined && clientId !== null) {
            queryParameters = queryParameters.set('client_id', <any>clientId);
        }
        if (email !== undefined && email !== null) {
            queryParameters = queryParameters.set('email', <any>email);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<any>(`${this.basePath}/oauth/resetPwd/validate`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
