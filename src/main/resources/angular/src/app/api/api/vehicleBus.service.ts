/**
 * Dum API
 * This is the DUM API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: rbarbado@nexusgeographics.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { AllowEntryRequest } from '../model/allowEntryRequest';
import { EcoType } from '../model/ecoType';
import { ValidatePlateNumberResp } from '../model/validatePlateNumberResp';
import { Vehicle } from '../model/vehicle';
import { VehicleDocumentation } from '../model/vehicleDocumentation';
import { VehicleRegistrationState } from '../model/vehicleRegistrationState';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { query } from '@angular/core/src/render3/query';
import { PagedVehicles } from '../model/pagedVehicles';
import { VehicleDGTRes } from '../../api/model/vehicleDGTRes';


@Injectable()
export class VehicleBusService {

    protected basePath = 'http://dum.nexusgeografics.com/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }

    /**
     * Create Vehicle
     * Create a new vehicle for the user (token)
     * @param authorization Token of authentication
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createVehicle(authorization: string, body: Vehicle, observe?: 'body', reportProgress?: boolean): Observable<Vehicle>;
    public createVehicle(authorization: string, body: Vehicle, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Vehicle>>;
    public createVehicle(authorization: string, body: Vehicle, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Vehicle>>;
    public createVehicle(authorization: string, body: Vehicle, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling createVehicle.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createVehicle.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (DUM Token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Vehicle>(`${this.basePath}/vehiclesBus`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete vehicle
     * Logic delete of the vehicle
     * @param vehicleId 
     * @param authorization Token of authentication
     * @param userId User who owns vehicle REQUIRED in BO as vehicle can be associated with more than one user, if not provided session userId will be taken (APP, WEB)
     * @param guildMemberId Guild member who owns vehicle REQUIRED in BO as vehicle associated with more than one user
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteVehicle(vehicleId: number, authorization: string, userId?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteVehicle(vehicleId: number, authorization: string, userId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteVehicle(vehicleId: number, authorization: string, userId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteVehicle(vehicleId: number, authorization: string, userId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (vehicleId === null || vehicleId === undefined) {
            throw new Error('Required parameter vehicleId was null or undefined when calling deleteVehicle.');
        }

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling deleteVehicle.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (userId !== undefined && userId !== null) {
            queryParameters = queryParameters.set('userId', <any>userId);
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (DUM Token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/vehiclesBus/${encodeURIComponent(String(vehicleId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Sets the groups for the vehicle
     * 
     * @param vehicleId 
     * @param authorization Token of authentication
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public electricGroups(vehicleId: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public electricGroups(vehicleId: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public electricGroups(vehicleId: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public electricGroups(vehicleId: number, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (vehicleId === null || vehicleId === undefined) {
            throw new Error('Required parameter vehicleId was null or undefined when calling electricGroups.');
        }

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling electricGroups.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (DUM Token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<any>(`${this.basePath}/vehicles/${encodeURIComponent(String(vehicleId))}/electricGroup`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * IsValidPlateNumber
     * Validate if a plate number is correct
     * @param plateNumber Plate number
     * @param authorization Token of authentication
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public isValidPlateNumber(plateNumber: string, authorization?: string, observe?: 'body', reportProgress?: boolean): Observable<ValidatePlateNumberResp>;
    public isValidPlateNumber(plateNumber: string, authorization?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ValidatePlateNumberResp>>;
    public isValidPlateNumber(plateNumber: string, authorization?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ValidatePlateNumberResp>>;
    public isValidPlateNumber(plateNumber: string, authorization?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (plateNumber === null || plateNumber === undefined) {
            throw new Error('Required parameter plateNumber was null or undefined when calling isValidPlateNumber.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (plateNumber !== undefined && plateNumber !== null) {
            queryParameters = queryParameters.set('plateNumber', <any>plateNumber);
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (DUM Token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<ValidatePlateNumberResp>(`${this.basePath}/vehicles/plate`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update Vehicle
     * 
     * @param vehicleId 
     * @param authorization Token of authentication
     * @param body 
     * @param userId User who owns vehicle REQUIRED in BO as vehicle can be associated with more than one user, if not provided session userId will be taken (APP, WEB)
     * @param guildMemberId Guild member who owns vehicle REQUIRED in BO as vehicle associated with more than one user
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateVehicle(vehicleId: number, authorization: string, body: Vehicle, userId?: number, guildMemberId?: number, observe?: 'body', reportProgress?: boolean): Observable<Vehicle>;
    public updateVehicle(vehicleId: number, authorization: string, body: Vehicle, userId?: number, guildMemberId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Vehicle>>;
    public updateVehicle(vehicleId: number, authorization: string, body: Vehicle, userId?: number, guildMemberId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Vehicle>>;
    public updateVehicle(vehicleId: number, authorization: string, body: Vehicle, userId?: number, guildMemberId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (vehicleId === null || vehicleId === undefined) {
            throw new Error('Required parameter vehicleId was null or undefined when calling updateVehicle.');
        }

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling updateVehicle.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateVehicle.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (userId !== undefined && userId !== null) {
            queryParameters = queryParameters.set('userId', <any>userId);
        }
        if (guildMemberId !== undefined && guildMemberId !== null) {
            queryParameters = queryParameters.set('guildMemberId', <any>guildMemberId);
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (DUM Token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<Vehicle>(`${this.basePath}/vehiclesBus/${encodeURIComponent(String(vehicleId))}`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }


    /**
     * Get vehicle
     * 
     * @param vehicleId 
     * @param authorization Token of authentication
     * @param userId User who owns vehicle REQUIRED in BO as vehicle can be associated with more than one user, if not provided session userId will be taken (APP, WEB)
     * @param guildMemberId Guild member who owns vehicle REQUIRED in BO as vehicle associated with more than one user
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public vehicle(vehicleId: number, authorization: string, userId?: number, guildMemberId?: number, observe?: 'body', reportProgress?: boolean): Observable<Vehicle>;
    public vehicle(vehicleId: number, authorization: string, userId?: number, guildMemberId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Vehicle>>;
    public vehicle(vehicleId: number, authorization: string, userId?: number, guildMemberId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Vehicle>>;
    public vehicle(vehicleId: number, authorization: string, userId?: number, guildMemberId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (vehicleId === null || vehicleId === undefined) {
            throw new Error('Required parameter vehicleId was null or undefined when calling vehicle.');
        }

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling vehicle.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (userId !== undefined && userId !== null) {
            queryParameters = queryParameters.set('userId', <any>userId);
        }
        if (guildMemberId !== undefined && guildMemberId !== null) {
            queryParameters = queryParameters.set('guildMemberId', <any>guildMemberId);
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (DUM Token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Vehicle>(`${this.basePath}/vehiclesBus/${encodeURIComponent(String(vehicleId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get eco type
     * Validate the tag of the plate number. The tags are: * B * C * ECO * CERO EMISIONES
     * @param plateNumber Plate number
     * @param authorization Token of authentication
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public vehicleEcoType(plateNumber: string, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<EcoType>;
    public vehicleEcoType(plateNumber: string, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EcoType>>;
    public vehicleEcoType(plateNumber: string, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EcoType>>;
    public vehicleEcoType(plateNumber: string, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (plateNumber === null || plateNumber === undefined) {
            throw new Error('Required parameter plateNumber was null or undefined when calling vehicleEcoType.');
        }

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling vehicleEcoType.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (plateNumber !== undefined && plateNumber !== null) {
            queryParameters = queryParameters.set('plateNumber', <any>plateNumber);
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (DUM Token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<EcoType>(`${this.basePath}/vehicles/eco`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get all states
     * Get all the states of the vehicles. Accessible only from BO.
     * @param authorization Token of authentication
     * @param userId Get all the vehicles from userId
     * @param guildId Get all vehicles from guildId
     * @param guildMemberId Get all vehicles from guildMemberId
     * @param nifGuild 
     * @param plateNumber 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public vehicleStates(authorization: string, observe?: 'body', reportProgress?: boolean): Observable<Array<VehicleRegistrationState>>;
    public vehicleStates(authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<VehicleRegistrationState>>>;
    public vehicleStates(authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<VehicleRegistrationState>>>;
    public vehicleStates(authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling vehicleStates.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (DUM Token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<VehicleRegistrationState>>(`${this.basePath}/vehiclesStatesBus/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get active vehicles
     * Get all the vehicles of the user (token). If userID passed the result is filtered. This param is used to admin fleet or helpdesk to see the vehicles of one specific user.
     * @param authorization Token of authentication
     * @param userId Get all the vehicles from userId
     * @param guildId Get all the vehicles from guildId
     * @param guildMemberId Get all vehicles from guildMemberId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public vehicles(authorization: string, userId?: number, guildId?: number, guildMemberId?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Vehicle>>;
    public vehicles(authorization: string, userId?: number, guildId?: number, guildMemberId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Vehicle>>>;
    public vehicles(authorization: string, userId?: number, guildId?: number, guildMemberId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Vehicle>>>;
    public vehicles(authorization: string, userId?: number, guildId?: number, guildMemberId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling vehicles.');
        }




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (userId !== undefined && userId !== null) {
            queryParameters = queryParameters.set('userId', <any>userId);
        }
        if (guildId !== undefined && guildId !== null) {
            queryParameters = queryParameters.set('guildId', <any>guildId);
        }
        if (guildMemberId !== undefined && guildMemberId !== null) {
            queryParameters = queryParameters.set('guildMemberId', <any>guildMemberId);
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (DUM Token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<Vehicle>>(`${this.basePath}/vehiclesBus`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get all vehicles
     * Get all the vehicles of the user. Accessible only from BO.
     * @param authorization Token of authentication
     * @param userId Get all the vehicles from userId
     * @param guildId Get all vehicles from guildId
     * @param guildMemberId Get all vehicles from guildMemberId
     * @param nifGuild 
     * @param plateNumber 
     * @param email 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public vehiclesAll(authorization: string, page: number, size: number, userId?: number, guildId?: number, guildMemberId?: number, nifGuild?: string, plateNumber?: string, vehicleRegistrationState?: number, email?: string, observe?: 'body', reportProgress?: boolean): Observable<PagedVehicles>;
    public vehiclesAll(authorization: string, page: number, size: number, userId?: number, guildId?: number, guildMemberId?: number, nifGuild?: string, plateNumber?: string, vehicleRegistrationState?: number, email?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedVehicles>>;
    public vehiclesAll(authorization: string, page: number, size: number, userId?: number, guildId?: number, guildMemberId?: number, nifGuild?: string, plateNumber?: string, vehicleRegistrationState?: number, email?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedVehicles>>;
    public vehiclesAll(authorization: string, page: number, size: number, userId?: number, guildId?: number, guildMemberId?: number, nifGuild?: string, plateNumber?: string, vehicleRegistrationState?: number, email?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling vehiclesAll.');
        }








        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});

        queryParameters = queryParameters.set('page', <any>page);

        queryParameters = queryParameters.set('size', <any>size);

        if (userId !== undefined && userId !== null) {
            queryParameters = queryParameters.set('userId', <any>userId);
        }
        if (guildId !== undefined && guildId !== null) {
            queryParameters = queryParameters.set('guildId', <any>guildId);
        }
        if (guildMemberId !== undefined && guildMemberId !== null) {
            queryParameters = queryParameters.set('guildMemberId', <any>guildMemberId);
        }
        if (nifGuild !== undefined && nifGuild !== null) {
            queryParameters = queryParameters.set('nifGuild', <any>nifGuild);
        }
        if (plateNumber !== undefined && plateNumber !== null) {
            queryParameters = queryParameters.set('plateNumber', <any>plateNumber);
        }
        if (vehicleRegistrationState !== undefined && vehicleRegistrationState !== null) {
            queryParameters = queryParameters.set('vehicleRegistrationState', <any>vehicleRegistrationState);
        }
        if (email !== undefined && email !== null) {
            queryParameters = queryParameters.set('email', <any>email);
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (DUM Token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<Vehicle>>(`${this.basePath}/vehiclesBusAll/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

     /**
     * Get all vehicles
     * Get excel vehicles. Accessible only from BO.
     * @param authorization Token of authentication
     * @param userId Get all the vehicles from userId
     * @param guildId Get all vehicles from guildId
     * @param guildMemberId Get all vehicles from guildMemberId
     * @param nifGuild 
     * @param plateNumber 
     * @param vehicleRegistrationState 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public vehiclesAllXls(authorization: string, userId?: number, guildId?: number, guildMemberId?: number, nifGuild?: string, plateNumber?: string, vehicleRegistrationState?: number, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
    public vehiclesAllXls(authorization: string, userId?: number, guildId?: number, guildMemberId?: number, nifGuild?: string, plateNumber?: string, vehicleRegistrationState?: number, observe?: 'response', reportProgress?: boolean): Observable<Blob>;
    public vehiclesAllXls(authorization: string, userId?: number, guildId?: number, guildMemberId?: number, nifGuild?: string, plateNumber?: string, vehicleRegistrationState?: number, observe?: 'events', reportProgress?: boolean): Observable<Blob>;
    public vehiclesAllXls(authorization: string, userId?: number, guildId?: number, guildMemberId?: number, nifGuild?: string, plateNumber?: string, vehicleRegistrationState?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling vehiclesAllXls.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (userId !== undefined && userId !== null) {
            queryParameters = queryParameters.set('userId', <any>userId);
        }
        if (guildId !== undefined && guildId !== null) {
            queryParameters = queryParameters.set('guildId', <any>guildId);
        }
        if (guildMemberId !== undefined && guildMemberId !== null) {
            queryParameters = queryParameters.set('guildMemberId', <any>guildMemberId);
        }
        if (nifGuild !== undefined && nifGuild !== null) {
            queryParameters = queryParameters.set('nifGuild', <any>nifGuild);
        }
        if (plateNumber !== undefined && plateNumber !== null) {
            queryParameters = queryParameters.set('plateNumber', <any>plateNumber);
        }
        if (vehicleRegistrationState !== undefined && vehicleRegistrationState !== null) {
            queryParameters = queryParameters.set('vehicleRegistrationState', <any>vehicleRegistrationState);
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (DUM Token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<string>(`${this.basePath}/vehiclesBusAll/xls`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress,
                responseType : 'blob' as 'json'
            }
        );
    }

    /**
     * Returns all docs for corresponding vehicle
     * 
     * @param vehicleId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getVehicleDocs(vehicleId: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<Array<VehicleDocumentation>>;
    public getVehicleDocs(vehicleId: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<VehicleDocumentation>>>;
    public getVehicleDocs(vehicleId: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<VehicleDocumentation>>>;
    public getVehicleDocs(vehicleId: number, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (vehicleId === null || vehicleId === undefined) {
            throw new Error('Required parameter vehicleId was null or undefined when calling getVehicleDocs.');
        }

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling getVehicleDocs.');
        }

        let headers = this.defaultHeaders;

        // authentication (DUM Token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<VehicleDocumentation>>(`${this.basePath}/vehiclesBus/${encodeURIComponent(String(vehicleId))}/docs`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Upload doc for vehicle
     * 
     * @param vehicleId 
     * @param authorization Token of authentication
     * @param desc 
     * @param file 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public uploadDoc(vehicleId: number, authorization: string, file: Blob, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public uploadDoc(vehicleId: number, authorization: string, file: Blob, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public uploadDoc(vehicleId: number, authorization: string, file: Blob, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public uploadDoc(vehicleId: number, authorization: string, file: Blob, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (vehicleId === null || vehicleId === undefined) {
            throw new Error('Required parameter vehicleId was null or undefined when calling uploadDoc.');
        }

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling uploadDoc.');
        }
        
        if (file === null || file === undefined) {
            throw new Error('Required parameter file was null or undefined when calling uploadDoc.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (DUM Token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/x-www-form-urlencoded'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        let formParams = new FormData();
 
        if (file !== undefined) {
            formParams.append('file',file);
        }
 

        return this.httpClient.post<Vehicle>(`${this.basePath}/vehiclesBus/${encodeURIComponent(String(vehicleId))}/docs`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete vehicle doc
     * 
     * @param vehicleId 
     * @param docId 
     * @param authorization Token of authentication
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteVehicleDoc(vehicleId: string, docId: string, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteVehicleDoc(vehicleId: string, docId: string, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteVehicleDoc(vehicleId: string, docId: string, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteVehicleDoc(vehicleId: string, docId: string, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (vehicleId === null || vehicleId === undefined) {
            throw new Error('Required parameter vehicleId was null or undefined when calling deleteVehicleDoc.');
        }

        if (docId === null || docId === undefined) {
            throw new Error('Required parameter docId was null or undefined when calling deleteVehicleDoc.');
        }

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling deleteVehicleDoc.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (DUM Token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<Vehicle>(`${this.basePath}/vehiclesBus/${encodeURIComponent(String(vehicleId))}/docs/${encodeURIComponent(String(docId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

     /**
     * Get dgt data
     * Obtains DGT data for Vehicle.
     * @param plateNumber Plate number
     * @param authorization Token of authentication
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public vehicleDgt(plateNumber: string, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<VehicleDGTRes>;
    public vehicleDgt(plateNumber: string, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<VehicleDGTRes>>;
    public vehicleDgt(plateNumber: string, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<VehicleDGTRes>>;
    public vehicleDgt(plateNumber: string, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (plateNumber === null || plateNumber === undefined) {
            throw new Error('Required parameter plateNumber was null or undefined when calling vehicleDgt.');
        }

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling vehicleDgt.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (plateNumber !== undefined && plateNumber !== null) {
            queryParameters = queryParameters.set('plateNumber', <any>plateNumber);
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (DUM Token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<VehicleDGTRes>(`${this.basePath}/vehiclesBus/dgt`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
