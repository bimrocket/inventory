/**
 * Dum API
 * This is the DUM API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: kfiertek@nexusgeographics.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { ApiError } from '../model/apiError';
import { DocumentGuildMember } from '../model/documentGuildMember';
import { GuildMember } from '../model/guildMember';
import { OAuthError } from '../model/oAuthError';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { GuildMemberType } from '../model/guildMemberType';


@Injectable()
export class GuildMemberService {

    protected basePath = 'http://dum.nexusgeografics.com/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Create Member
     * 
     * @param authorization Bearer 9fa949a2-209f-4b57-8691-3bae5c6bc9cb
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createGuildMember(authorization: string, body: GuildMember, observe?: 'body', reportProgress?: boolean): Observable<GuildMember>;
    public createGuildMember(authorization: string, body: GuildMember, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GuildMember>>;
    public createGuildMember(authorization: string, body: GuildMember, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GuildMember>>;
    public createGuildMember(authorization: string, body: GuildMember, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling createGuildMember.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createGuildMember.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (DUM Token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<GuildMember>(`${this.basePath}/guild-member`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Post Document Member
     * 
     * @param memberId 
     * @param authorization 
     * @param file 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createGuildMemberDoc(memberId: number, authorization: string, file: Blob, observe?: 'body', reportProgress?: boolean): Observable<DocumentGuildMember>;
    public createGuildMemberDoc(memberId: number, authorization: string, file: Blob, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DocumentGuildMember>>;
    public createGuildMemberDoc(memberId: number, authorization: string, file: Blob, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DocumentGuildMember>>;
    public createGuildMemberDoc(memberId: number, authorization: string, file: Blob, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (memberId === null || memberId === undefined) {
            throw new Error('Required parameter memberId was null or undefined when calling createGuildMemberDoc.');
        }

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling createGuildMemberDoc.');
        }

        if (file === null || file === undefined) {
            throw new Error('Required parameter file was null or undefined when calling createGuildMemberDoc.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (DUM Token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/x-www-form-urlencoded'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (file !== undefined) {
            formParams = formParams.append('file', <any>file) || formParams;
        }

        return this.httpClient.post<DocumentGuildMember>(`${this.basePath}/guild-member/${encodeURIComponent(String(memberId))}/document`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Member detailed
     * 
     * @param memberId 
     * @param authorization Bearer 9fa949a2-209f-4b57-8691-3bae5c6bc9cb
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteGuildMember(memberId: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteGuildMember(memberId: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteGuildMember(memberId: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteGuildMember(memberId: number, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (memberId === null || memberId === undefined) {
            throw new Error('Required parameter memberId was null or undefined when calling deleteGuildMember.');
        }

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling deleteGuildMember.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (DUM Token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/guild-member/${encodeURIComponent(String(memberId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete Document Member
     * 
     * @param memberId 
     * @param authorization 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteGuildMemberDoc(memberId: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteGuildMemberDoc(memberId: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteGuildMemberDoc(memberId: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteGuildMemberDoc(memberId: number, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (memberId === null || memberId === undefined) {
            throw new Error('Required parameter memberId was null or undefined when calling deleteGuildMemberDoc.');
        }

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling deleteGuildMemberDoc.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (DUM Token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/guild-member/${encodeURIComponent(String(memberId))}/document`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

   /**
     * Get all Member
     * 
     * @param authorization 
     * @param name 
     * @param email 
     * @param nif 
     * @param guildId If is a guild member is required
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public guildMember(authorization: string, name?: string, email?: string, nif?: string, guildId?: number, idMember?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<GuildMember>>;
    public guildMember(authorization: string, name?: string, email?: string, nif?: string, guildId?: number, idMember?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<GuildMember>>>;
    public guildMember(authorization: string, name?: string, email?: string, nif?: string, guildId?: number, idMember?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<GuildMember>>>;
    public guildMember(authorization: string, name?: string, email?: string, nif?: string, guildId?: number, idMember?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling guildMember.');
        }





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (name !== undefined && name !== null && name !== '') {
            queryParameters = queryParameters.set('name', <any>name);
        }
        if (email !== undefined && email !== null && email !== '') {
            queryParameters = queryParameters.set('email', <any>email);
        }
        if (nif !== undefined && nif !== null && nif !== '') {
            queryParameters = queryParameters.set('nif', <any>nif);
        }
        if (guildId !== undefined && guildId !== null) {
            queryParameters = queryParameters.set('guildId', <any>guildId);
        }
        if (idMember !== undefined && idMember !== null) {
            queryParameters = queryParameters.set('idMember', <any>idMember);
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (DUM Token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<GuildMember>>(`${this.basePath}/guild-member`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }


    /**
     * Get all members
     * Get all members with Guild Id 
     * @param guildId 
     * @param authorization 
     * @param name Name the member
     * @param email Email the member
     * @param nif DNI o NIE the member
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public guildMemberAllByGuild(guildId: number, authorization: string, name?: string, email?: string, nif?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<GuildMember>>;
    public guildMemberAllByGuild(guildId: number, authorization: string, name?: string, email?: string, nif?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<GuildMember>>>;
    public guildMemberAllByGuild(guildId: number, authorization: string, name?: string, email?: string, nif?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<GuildMember>>>;
    public guildMemberAllByGuild(guildId: number, authorization: string, name?: string, email?: string, nif?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (guildId === null || guildId === undefined) {
            throw new Error('Required parameter guildId was null or undefined when calling guildMemberAllByGuild.');
        }

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling guildMemberAllByGuild.');
        }




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }
        if (email !== undefined && email !== null) {
            queryParameters = queryParameters.set('email', <any>email);
        }
        if (nif !== undefined && nif !== null) {
            queryParameters = queryParameters.set('nif', <any>nif);
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (DUM Token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<GuildMember>>(`${this.basePath}/guild-member?guildId=${encodeURIComponent(String(guildId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }


    /**
     * guildMembersByGuild
     * 
     * @param guildId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public guildMembersByGuild(guildId: number, authorization: string,  observe?: 'body', reportProgress?: boolean): Observable<Array<GuildMember>>;
    public guildMembersByGuild(guildId: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<GuildMember>>>;
    public guildMembersByGuild(guildId: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<GuildMember>>>;
    public guildMembersByGuild(guildId: number, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (guildId === null || guildId === undefined) {
            throw new Error('Required parameter guildId was null or undefined when calling guildMembersByGuild.');
        }

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling guildMember.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (guildId !== undefined && guildId !== null) {
            queryParameters = queryParameters.set('guildId', <any>guildId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<string>>(`${this.basePath}/guild-member/members/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Member detailed
     * 
     * @param memberId 
     * @param authorization 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public guildMemberDetailed(memberId: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<GuildMember>;
    public guildMemberDetailed(memberId: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GuildMember>>;
    public guildMemberDetailed(memberId: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GuildMember>>;
    public guildMemberDetailed(memberId: number, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (memberId === null || memberId === undefined) {
            throw new Error('Required parameter memberId was null or undefined when calling guildMemberDetailed.');
        }

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling guildMemberDetailed.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (DUM Token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<GuildMember>(`${this.basePath}/guild-member/${encodeURIComponent(String(memberId))}/detailed`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Document Member
     * 
     * @param memberId 
     * @param authorization 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public guildMemberDoc(memberId: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<DocumentGuildMember>;
    public guildMemberDoc(memberId: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DocumentGuildMember>>;
    public guildMemberDoc(memberId: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DocumentGuildMember>>;
    public guildMemberDoc(memberId: number, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (memberId === null || memberId === undefined) {
            throw new Error('Required parameter memberId was null or undefined when calling guildMemberDoc.');
        }

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling guildMemberDoc.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (DUM Token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<DocumentGuildMember>(`${this.basePath}/guild-member/${encodeURIComponent(String(memberId))}/document`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Member not have card
     * 
     * @param guildId 
     * @param authorization 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public guildMemberNotCard(guildId: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<Array<GuildMember>>;
    public guildMemberNotCard(guildId: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<GuildMember>>>;
    public guildMemberNotCard(guildId: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<GuildMember>>>;
    public guildMemberNotCard(guildId: number, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (guildId === null || guildId === undefined) {
            throw new Error('Required parameter guildId was null or undefined when calling guildMemberNotCard.');
        }

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling guildMemberNotCard.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (DUM Token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<GuildMember>>(`${this.basePath}/guild-member/${encodeURIComponent(String(guildId))}/notCard`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

     /**
     * Get Type member
     * Return all type member
     * @param locale Idioma
     * @param authorization 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public guildMemberType(locale: string, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<Array<GuildMemberType>>;
    public guildMemberType(locale: string, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<GuildMemberType>>>;
    public guildMemberType(locale: string, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<GuildMemberType>>>;
    public guildMemberType(locale: string, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (locale === null || locale === undefined) {
            throw new Error('Required parameter locale was null or undefined when calling guildMemberType.');
        }

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling guildMemberType.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (DUM Token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<GuildMemberType>>(`${this.basePath}/guild-member/type`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }


 /**
     * Get all members
     * Get all members with Guild Id 
     * @param authorization 
     * @param name Name the member
     * @param email Email the member
     * @param nif DNI o NIE the member
     * @param guildId In case of guild searching
     * @param juridicName 
     * @param locale Locale used to translate headers and i18n data.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public guildMemberXls(authorization: string, name?: string, email?: string, nif?: string, guildId?: number, idMember?: number, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
    public guildMemberXls(authorization: string, name?: string, email?: string, nif?: string, guildId?: number, idMember?: number, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
    public guildMemberXls(authorization: string, name?: string, email?: string, nif?: string, guildId?: number, idMember?: number, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
    public guildMemberXls(authorization: string, name?: string, email?: string, nif?: string, guildId?: number, idMember?: number, locale?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling guildMemberXls.');
        }







        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }
        if (email !== undefined && email !== null) {
            queryParameters = queryParameters.set('email', <any>email);
        }
        if (nif !== undefined && nif !== null) {
            queryParameters = queryParameters.set('nif', <any>nif);
        }
        if (guildId !== undefined && guildId !== null) {
            queryParameters = queryParameters.set('guildId', <any>guildId);
        }
        if (idMember !== undefined && idMember !== null) {
            queryParameters = queryParameters.set('idMember', <any>idMember);
        }
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (DUM Token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/vnd.ms-excel'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<string>(`${this.basePath}/guild-member/xls`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress,
                responseType : 'blob' as 'json'
            }
        );
    }
    /**
     * Member Put
     * 
     * @param memberId 
     * @param authorization 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateGuildMember(memberId: number, authorization: string, body: GuildMember, observe?: 'body', reportProgress?: boolean): Observable<GuildMember>;
    public updateGuildMember(memberId: number, authorization: string, body: GuildMember, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GuildMember>>;
    public updateGuildMember(memberId: number, authorization: string, body: GuildMember, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GuildMember>>;
    public updateGuildMember(memberId: number, authorization: string, body: GuildMember, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (memberId === null || memberId === undefined) {
            throw new Error('Required parameter memberId was null or undefined when calling updateGuildMember.');
        }

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling updateGuildMember.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateGuildMember.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (DUM Token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<GuildMember>(`${this.basePath}/guild-member/${encodeURIComponent(String(memberId))}`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
