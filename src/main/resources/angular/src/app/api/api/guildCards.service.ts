/**
 * Dum API
 * This is the DUM API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: rbarbado@nexusgeographics.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
    HttpClient, HttpHeaders, HttpParams,
    HttpResponse, HttpEvent
} from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../encoder';

import { Observable } from 'rxjs/Observable';

import { GuildCard } from '../model/guildCard';
import { GuildCardCreate } from '../model/guildCardCreate';
import { GuildCardUpdate } from '../model/guildCardUpdate';
import { GuildCardStatus } from '../model/guildCardStatus';
import { GuildCardOperation } from '../model/guildCardOperation';

import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';


@Injectable()
export class GuildCardsService {

    protected basePath = 'http://dum.nexusgeografics.com/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
    * Get All cards
    * 
    * @param authorization 
    * @param guildId 
    * @param cardNumber 
    * @param cardNumberFrom 
    * @param cardNumberTo 
    * @param guildMember 
    * @param dniGuildMember 
    * @param dateCreatedFrom 
    * @param dateCreatedTo 
    * @param dateAssignGuildFrom 
    * @param dateAssignGuildTo 
    * @param dateAssignGuildMemberFrom 
    * @param dateAssignGuildMemberTo 
    * @param assignedGuild 
    * @param assignedGuildMember 
	* @param guildCardStatus
    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
    * @param reportProgress flag to report request and response progress.
    */
    public guildCardsGet(authorization: string, guildId?: number, cardNumber?: number, cardNumberFrom?: number, cardNumberTo?: number, guildMember?: string, dniGuildMember?: string, dateCreatedFrom?: Date, dateCreatedTo?: Date, dateAssignGuildFrom?: Date, dateAssignGuildTo?: Date, dateAssignGuildMemberFrom?: Date, dateAssignGuildMemberTo?: Date,  guildCardStatusId?: number, assignedGuild?: boolean, assignedGuildMember?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<GuildCard>>;
    public guildCardsGet(authorization: string, guildId?: number, cardNumber?: number, cardNumberFrom?: number, cardNumberTo?: number, guildMember?: string, dniGuildMember?: string, dateCreatedFrom?: Date, dateCreatedTo?: Date, dateAssignGuildFrom?: Date, dateAssignGuildTo?: Date, dateAssignGuildMemberFrom?: Date, dateAssignGuildMemberTo?: Date,  guildCardStatusId?: number, assignedGuild?: boolean, assignedGuildMember?: boolean,  observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<GuildCard>>>;
    public guildCardsGet(authorization: string, guildId?: number, cardNumber?: number, cardNumberFrom?: number, cardNumberTo?: number, guildMember?: string, dniGuildMember?: string, dateCreatedFrom?: Date, dateCreatedTo?: Date, dateAssignGuildFrom?: Date, dateAssignGuildTo?: Date, dateAssignGuildMemberFrom?: Date, dateAssignGuildMemberTo?: Date,  guildCardStatusId?: number, assignedGuild?: boolean, assignedGuildMember?: boolean,  observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<GuildCard>>>;
    public guildCardsGet(authorization: string, guildId?: number, cardNumber?: number, cardNumberFrom?: number, cardNumberTo?: number, guildMember?: string, dniGuildMember?: string, dateCreatedFrom?: Date, dateCreatedTo?: Date, dateAssignGuildFrom?: Date, dateAssignGuildTo?: Date, dateAssignGuildMemberFrom?: Date, dateAssignGuildMemberTo?: Date,  guildCardStatusId?: number, assignedGuild?: boolean, assignedGuildMember?: boolean,  observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling guildCardsGet.');
        }

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (guildId !== undefined && guildId !== null) {
            queryParameters = queryParameters.set('guildId', <any>guildId);
        }
        if (cardNumber !== undefined && cardNumber !== null) {
            queryParameters = queryParameters.set('cardNumber', <any>cardNumber);
        }
        if (cardNumberFrom !== undefined && cardNumberFrom !== null) {
            queryParameters = queryParameters.set('cardNumberFrom', <any>cardNumberFrom);
        }
        if (cardNumberTo !== undefined && cardNumberTo !== null) {
            queryParameters = queryParameters.set('cardNumberTo', <any>cardNumberTo);
        }
        if (guildMember !== undefined && guildMember !== null) {
            queryParameters = queryParameters.set('guildMember', <any>guildMember);
        }
        if (dniGuildMember !== undefined && dniGuildMember !== null) {
            queryParameters = queryParameters.set('dniGuildMember', <any>dniGuildMember);
        }
        if (dateCreatedFrom !== undefined && dateCreatedFrom !== null) {
            queryParameters = queryParameters.set('dateCreatedFrom', <any>dateCreatedFrom.toISOString());
        }
        if (dateCreatedTo !== undefined && dateCreatedTo !== null) {
            queryParameters = queryParameters.set('dateCreatedTo', <any>dateCreatedTo.toISOString());
        }
        if (dateAssignGuildFrom !== undefined && dateAssignGuildFrom !== null) {
            queryParameters = queryParameters.set('dateAssignGuildFrom', <any>dateAssignGuildFrom.toISOString());
        }
        if (dateAssignGuildTo !== undefined && dateAssignGuildTo !== null) {
            queryParameters = queryParameters.set('dateAssignGuildTo', <any>dateAssignGuildTo.toISOString());
        }
        if (dateAssignGuildMemberFrom !== undefined && dateAssignGuildMemberFrom !== null) {
            queryParameters = queryParameters.set('dateAssignGuildMemberFrom', <any>dateAssignGuildMemberFrom.toISOString());
        }
        if (dateAssignGuildMemberTo !== undefined && dateAssignGuildMemberTo !== null) {
            queryParameters = queryParameters.set('dateAssignGuildMemberTo', <any>dateAssignGuildMemberTo.toISOString());
        }
        if (assignedGuild !== undefined && assignedGuild !== null) {
            queryParameters = queryParameters.set('assignedGuild', <any>assignedGuild);
        }
        if (assignedGuildMember !== undefined && assignedGuildMember !== null) {
            queryParameters = queryParameters.set('assignedGuildMember', <any>assignedGuildMember);
        }
		if (guildCardStatusId !== undefined && guildCardStatusId !== null) {
            queryParameters = queryParameters.set('guildCardStatusId', <any>guildCardStatusId);
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (DUM Token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<GuildCard>>(`${this.basePath}/guild-cards`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Remove Assign
     * Remove Assign
     * @param id 
     * @param authorization 
     * @param memberId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public guildCardsIdAssignDelete(id: number, authorization: string, memberId?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public guildCardsIdAssignDelete(id: number, authorization: string, memberId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public guildCardsIdAssignDelete(id: number, authorization: string, memberId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public guildCardsIdAssignDelete(id: number, authorization: string, memberId?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling guildCardsIdAssignDelete.');
        }

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling guildCardsIdAssignDelete.');
        }


        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (memberId !== undefined && memberId !== null) {
            queryParameters = queryParameters.set('memberId', <any>memberId);
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (DUM Token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/guild-cards/${encodeURIComponent(String(id))}/assign`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Assign Card
     * 
     * @param id 
     * @param authorization 
     * @param memberId 
     * @param guildId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public guildCardsIdAssignPut(id: number, authorization: string, memberId?: number, guildId?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public guildCardsIdAssignPut(id: number, authorization: string, memberId?: number, guildId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public guildCardsIdAssignPut(id: number, authorization: string, memberId?: number, guildId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public guildCardsIdAssignPut(id: number, authorization: string, memberId?: number, guildId?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling guildCardsIdAssignPut.');
        }

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling guildCardsIdAssignPut.');
        }



        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (memberId !== undefined && memberId !== null) {
            queryParameters = queryParameters.set('memberId', <any>memberId);
        }
        if (guildId !== undefined && guildId !== null) {
            queryParameters = queryParameters.set('guildId', <any>guildId);
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (DUM Token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.put<any>(`${this.basePath}/guild-cards/${encodeURIComponent(String(id))}/assign`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }


 /**
     * Assign Card
     * 
     * @param id 
     * @param authorization 
     * @param memberId 
     * @param guildId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public guildCardsMassEditPut(id: number, authorization: string, memberId?: number, guildId?: number, statusId?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public guildCardsMassEditPut(id: number, authorization: string, memberId?: number, guildId?: number, statusId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public guildCardsMassEditPut(id: number, authorization: string, memberId?: number, guildId?: number, statusId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public guildCardsMassEditPut(id: number, authorization: string, memberId?: number, guildId?: number, statusId?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling guildCardsIdAssignPut.');
        }

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling guildCardsIdAssignPut.');
        }



        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (memberId !== undefined && memberId !== null) {
            queryParameters = queryParameters.set('memberId', <any>memberId);
        }
        if (guildId !== undefined && guildId !== null) {
            queryParameters = queryParameters.set('guildId', <any>guildId);
        }
		if (statusId !== undefined && statusId !== null) {
            queryParameters = queryParameters.set('statusId', <any>statusId);
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (DUM Token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.put<any>(`${this.basePath}/guild-cards/${encodeURIComponent(String(id))}/massEdit`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }


    /**
     * Delete card
     * 
     * @param id 
     * @param authorization 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public guildCardsIdDelete(id: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public guildCardsIdDelete(id: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public guildCardsIdDelete(id: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public guildCardsIdDelete(id: number, authorization: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling guildCardsIdDelete.');
        }

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling guildCardsIdDelete.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (DUM Token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/guild-cards/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Detailed card
     * 
     * @param id 
     * @param authorization 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public guildCardsIdDetailedGet(id: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<GuildCard>;
    public guildCardsIdDetailedGet(id: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GuildCard>>;
    public guildCardsIdDetailedGet(id: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GuildCard>>;
    public guildCardsIdDetailedGet(id: number, authorization: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling guildCardsIdDetailedGet.');
        }

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling guildCardsIdDetailedGet.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (DUM Token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<GuildCard>(`${this.basePath}/guild-cards/${encodeURIComponent(String(id))}/detailed`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update card
     * 
     * @param id 
     * @param authorization 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public guildCardsIdPut(id: number, authorization: string, body: GuildCardUpdate, observe?: 'body', reportProgress?: boolean): Observable<GuildCard>;
    public guildCardsIdPut(id: number, authorization: string, body: GuildCardUpdate, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GuildCard>>;
    public guildCardsIdPut(id: number, authorization: string, body: GuildCardUpdate, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GuildCard>>;
    public guildCardsIdPut(id: number, authorization: string, body: GuildCardUpdate, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling guildCardsIdPut.');
        }

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling guildCardsIdPut.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling guildCardsIdPut.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (DUM Token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<GuildCard>(`${this.basePath}/guild-cards/${encodeURIComponent(String(id))}`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create card
     * 
     * @param authorization 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public guildCardsPost(authorization: string, body: GuildCardCreate, observe?: 'body', reportProgress?: boolean): Observable<Array<GuildCard>>;
    public guildCardsPost(authorization: string, body: GuildCardCreate, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<GuildCard>>>;
    public guildCardsPost(authorization: string, body: GuildCardCreate, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<GuildCard>>>;
    public guildCardsPost(authorization: string, body: GuildCardCreate, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling guildCardsPost.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling guildCardsPost.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (DUM Token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Array<GuildCard>>(`${this.basePath}/guild-cards`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
    * Get All cards
    * Get excel cards. Accessible only from BO and ZU. 
    * @param authorization 
    * @param guildId 
    * @param cardNumber 
    * @param cardNumberFrom 
    * @param cardNumberTo 
    * @param guildMember Name of the guild member
    * @param dniGuildMember 
    * @param dateCreatedFrom 
    * @param dateCreatedTo 
    * @param dateAssignGuildFrom 
    * @param dateAssignGuildTo 
    * @param dateAssignGuildMemberFrom 
    * @param dateAssignGuildMemberTo 
    * @param assignedGuild Pot haver-hi 3 opcions: Si (true), No (false), Tots (null)
    * @param assignedMember Pot haver-hi 3 opcions: Si (true), No (false), Tots (null)
    * @param locale Locale used to translate headers and i18n data
    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
    * @param reportProgress flag to report request and response progress.
	* @param guildCardStatus
    */
    public guildCardsXlsGet(authorization: string, guildId?: number, cardNumber?: number, cardNumberFrom?: number, cardNumberTo?: number, guildMember?: string, dniGuildMember?: string, dateCreatedFrom?: Date, dateCreatedTo?: Date, dateAssignGuildFrom?: Date, dateAssignGuildTo?: Date, dateAssignGuildMemberFrom?: Date, dateAssignGuildMemberTo?: Date, assignedGuild?: boolean, assignedMember?: boolean, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
    public guildCardsXlsGet(authorization: string, guildId?: number, cardNumber?: number, cardNumberFrom?: number, cardNumberTo?: number, guildMember?: string, dniGuildMember?: string, dateCreatedFrom?: Date, dateCreatedTo?: Date, dateAssignGuildFrom?: Date, dateAssignGuildTo?: Date, dateAssignGuildMemberFrom?: Date, dateAssignGuildMemberTo?: Date, assignedGuild?: boolean, assignedMember?: boolean, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
    public guildCardsXlsGet(authorization: string, guildId?: number, cardNumber?: number, cardNumberFrom?: number, cardNumberTo?: number, guildMember?: string, dniGuildMember?: string, dateCreatedFrom?: Date, dateCreatedTo?: Date, dateAssignGuildFrom?: Date, dateAssignGuildTo?: Date, dateAssignGuildMemberFrom?: Date, dateAssignGuildMemberTo?: Date, assignedGuild?: boolean, assignedMember?: boolean, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
    public guildCardsXlsGet(authorization: string, guildId?: number, cardNumber?: number, cardNumberFrom?: number, cardNumberTo?: number, guildMember?: string, dniGuildMember?: string, dateCreatedFrom?: Date, dateCreatedTo?: Date, dateAssignGuildFrom?: Date, dateAssignGuildTo?: Date, dateAssignGuildMemberFrom?: Date, dateAssignGuildMemberTo?: Date, assignedGuild?: boolean, assignedMember?: boolean, locale?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling guildCardsXlsGet.');
        }

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (guildId !== undefined && guildId !== null) {
            queryParameters = queryParameters.set('guildId', <any>guildId);
        }
        if (cardNumber !== undefined && cardNumber !== null) {
            queryParameters = queryParameters.set('cardNumber', <any>cardNumber);
        }
        if (cardNumberFrom !== undefined && cardNumberFrom !== null) {
            queryParameters = queryParameters.set('cardNumberFrom', <any>cardNumberFrom);
        }
        if (cardNumberTo !== undefined && cardNumberTo !== null) {
            queryParameters = queryParameters.set('cardNumberTo', <any>cardNumberTo);
        }
        if (guildMember !== undefined && guildMember !== null) {
            queryParameters = queryParameters.set('guildMember', <any>guildMember);
        }
        if (dniGuildMember !== undefined && dniGuildMember !== null) {
            queryParameters = queryParameters.set('dniGuildMember', <any>dniGuildMember);
        }
        if (dateCreatedFrom !== undefined && dateCreatedFrom !== null) {
            queryParameters = queryParameters.set('dateCreatedFrom', <any>dateCreatedFrom.toISOString());
        }
        if (dateCreatedTo !== undefined && dateCreatedTo !== null) {
            queryParameters = queryParameters.set('dateCreatedTo', <any>dateCreatedTo.toISOString());
        }
        if (dateAssignGuildFrom !== undefined && dateAssignGuildFrom !== null) {
            queryParameters = queryParameters.set('dateAssignGuildFrom', <any>dateAssignGuildFrom.toISOString());
        }
        if (dateAssignGuildTo !== undefined && dateAssignGuildTo !== null) {
            queryParameters = queryParameters.set('dateAssignGuildTo', <any>dateAssignGuildTo.toISOString());
        }
        if (dateAssignGuildMemberFrom !== undefined && dateAssignGuildMemberFrom !== null) {
            queryParameters = queryParameters.set('dateAssignGuildMemberFrom', <any>dateAssignGuildMemberFrom.toISOString());
        }
        if (dateAssignGuildMemberTo !== undefined && dateAssignGuildMemberTo !== null) {
            queryParameters = queryParameters.set('dateAssignGuildMemberTo', <any>dateAssignGuildMemberTo.toISOString());
        }
        if (assignedGuild !== undefined && assignedGuild !== null) {
            queryParameters = queryParameters.set('assignedGuild', <any>assignedGuild);
        }
        if (assignedMember !== undefined && assignedMember !== null) {
            queryParameters = queryParameters.set('assignedMember', <any>assignedMember);
        }
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

		
        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (DUM Token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        return this.httpClient.get<Array<GuildCard>>(`${this.basePath}/guild-cards/xls`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress,
                responseType: 'blob' as 'json'
            }
        );
    }

	public guildCardStatusGet(authorization: string, locale: string, observe?: 'body', reportProgress?: boolean): Observable<Array<GuildCardStatus>>;
    public guildCardStatusGet(authorization: string, locale: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<GuildCardStatus>>>;
    public guildCardStatusGet(authorization: string, locale: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<GuildCardStatus>>>;
    public guildCardStatusGet(authorization: string, locale: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling guildCardStatus.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<GuildCardStatus>>(`${this.basePath}/guild-cards/status`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }


/**
     * guildCardUpdate
     * update d&#39;una GuildCard
     * @param authorization 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public guildCardUpdate(authorization: string, id: number, status: number, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public guildCardUpdate(authorization: string, id: number, status: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public guildCardUpdate(authorization: string, id: number, status: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public guildCardUpdate(authorization: string, id: number, status: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling guildCardUpdate.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling guildCardUpdate.');
        }

		if (status === null || status === undefined) {
            throw new Error('Required parameter status was null or undefined when calling guildCardUpdate.');
        }	

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('id', <any>id);
        }
		if (status !== undefined && id!== null) {
			queryParameters = queryParameters.set('status',<any>status);
		}

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.put<boolean>(`${this.basePath}/guild-cards/update`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );

	}
	
	
	 /**
     * operationsList
     * 
     * @param locale 
     * @param authorization 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public operationsList(authorization: string, guildId?: number, cardId?: number, cardNumber?: number, dateCreated?: Date, type?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<GuildCardOperation>>;
    public operationsList(authorization: string, guildId?: number, cardId?: number, cardNumber?: number, dateCreated?: Date, type?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<GuildCardOperation>>>;
    public operationsList(authorization: string, guildId?: number, cardId?: number, cardNumber?: number, dateCreated?: Date, type?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<GuildCardOperation>>>;
    public operationsList(authorization: string, guildId?: number, cardId?: number, cardNumber?: number, dateCreated?: Date, type?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

       /* if (locale === null || locale === undefined) {
            throw new Error('Required parameter locale was null or undefined when calling operationsList.');
        }*/

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling operationsList.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
		if (guildId !== undefined && guildId !== null) {
            queryParameters = queryParameters.set('guildId', <any>guildId);
        }
		if (cardId !== undefined && cardId !== null) {
            queryParameters = queryParameters.set('cardId', <any>cardId);
        }
        if (cardNumber !== undefined && cardNumber !== null) {
            queryParameters = queryParameters.set('cardNumber', <any>cardNumber);
        }
        if (dateCreated !== undefined && dateCreated !== null) {
            queryParameters = queryParameters.set('dateCreated', <any>dateCreated);
        }
        if (type !== undefined && type !== null) {
            queryParameters = queryParameters.set('type', <any>type);
		}
		
        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<GuildCardOperation>>(`${this.basePath}/guild-cards/list-operations`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }


/**
    * Get All cards
    * Get excel cards. Accessible only from BO and ZU. 
    * @param authorization 
    * @param guildId 
	* @param cardId
    * @param cardNumber 
    * @param dateCreated
    * @param parkingCode
    * @param locale Locale used to translate headers and i18n data
    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
    * @param reportProgress flag to report request and response progress.
	* @param guildCardStatus
    */
    public guildCardsOperationsXlsGet(authorization: string, guildId?: number, cardId?: number, cardNumber?: number, dateCreated?: Date, type?: string, locale?: string, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
    public guildCardsOperationsXlsGet(authorization: string, guildId?: number, cardId?: number, cardNumber?: number, dateCreated?: Date, type?: string, locale?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
    public guildCardsOperationsXlsGet(authorization: string, guildId?: number, cardId?: number, cardNumber?: number, dateCreated?: Date, type?: string, locale?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
    public guildCardsOperationsXlsGet(authorization: string, guildId?: number, cardId?: number, cardNumber?: number, dateCreated?: Date, type?: string, locale?: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling guildCardsXlsGet.');
        }

        let queryParameters = new HttpParams({ encoder: new CustomHttpUrlEncodingCodec() });
        if (guildId !== undefined && guildId !== null) {
            queryParameters = queryParameters.set('guildId', <any>guildId);
        }
        if (cardNumber !== undefined && cardNumber !== null) {
            queryParameters = queryParameters.set('cardNumber', <any>cardNumber);
        }
        if (cardId !== undefined && cardId !== null) {
            queryParameters = queryParameters.set('cardId', <any>cardId);
        }
  
        if (dateCreated !== undefined && dateCreated !== null) {
            queryParameters = queryParameters.set('dateCreated', <any>dateCreated.toISOString());
        }
        
        if (type !== undefined && type !== null) {
            queryParameters = queryParameters.set('type', <any>type);
        }
        if (locale !== undefined && locale !== null) {
            queryParameters = queryParameters.set('locale', <any>locale);
        }

		
        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (DUM Token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        return this.httpClient.get<Array<GuildCard>>(`${this.basePath}/guild-cards/operationsXls`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress,
                responseType: 'blob' as 'json'
            }
        );
    }
	
}
