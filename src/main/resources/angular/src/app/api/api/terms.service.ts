/**
 * MAAS API
 * This is the Mobility as a Service API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: avalls@nexusgeographics.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { PrivacyPolicy } from '../model/privacyPolicy';
import { ServiceCondition } from '../model/serviceCondition';
import { Terms } from '../model/terms';
import { TermsRequest } from '../model/termsRequest';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class TermsService {

    protected basePath = 'http://maas.nexusgeografics.com/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * User accepts a privacy policy
     * 
     * @param userId 
     * @param privatePolicyId 
     * @param authorization 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public acceptPrivacyPolicy(userId: number, privatePolicyId: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public acceptPrivacyPolicy(userId: number, privatePolicyId: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public acceptPrivacyPolicy(userId: number, privatePolicyId: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public acceptPrivacyPolicy(userId: number, privatePolicyId: number, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling acceptPrivacyPolicy.');
        }
        if (privatePolicyId === null || privatePolicyId === undefined) {
            throw new Error('Required parameter privatePolicyId was null or undefined when calling acceptPrivacyPolicy.');
        }
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling acceptPrivacyPolicy.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (MaaS Token) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<any>(`${this.basePath}/users/${encodeURIComponent(String(userId))}/privacyPolicies/${encodeURIComponent(String(privatePolicyId))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * User accepts service conditions
     * 
     * @param userId 
     * @param serviceConditionId 
     * @param authorization 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public acceptServiceCondition(userId: number, serviceConditionId: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public acceptServiceCondition(userId: number, serviceConditionId: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public acceptServiceCondition(userId: number, serviceConditionId: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public acceptServiceCondition(userId: number, serviceConditionId: number, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling acceptServiceCondition.');
        }
        if (serviceConditionId === null || serviceConditionId === undefined) {
            throw new Error('Required parameter serviceConditionId was null or undefined when calling acceptServiceCondition.');
        }
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling acceptServiceCondition.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (MaaS Token) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<any>(`${this.basePath}/users/${encodeURIComponent(String(userId))}/serviceConditions/${encodeURIComponent(String(serviceConditionId))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create a new privacy policy
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createPrivacyPolicy(body: any, observe?: 'body', reportProgress?: boolean): Observable<PrivacyPolicy>;
    public createPrivacyPolicy(body: any, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PrivacyPolicy>>;
    public createPrivacyPolicy(body: any, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PrivacyPolicy>>;
    public createPrivacyPolicy(body: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createPrivacyPolicy.');
        }

        let headers = this.defaultHeaders;

        // authentication (MaaS Token) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<PrivacyPolicy>(`${this.basePath}/privacyPolicies`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create a new service condition
     * 
     * @param authorization 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createServiceCondition(authorization: string, body: any, observe?: 'body', reportProgress?: boolean): Observable<ServiceCondition>;
    public createServiceCondition(authorization: string, body: any, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ServiceCondition>>;
    public createServiceCondition(authorization: string, body: any, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ServiceCondition>>;
    public createServiceCondition(authorization: string, body: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling createServiceCondition.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createServiceCondition.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (MaaS Token) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<ServiceCondition>(`${this.basePath}/serviceConditions`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * User declines a privacy policy
     * 
     * @param userId 
     * @param privatePolicyId 
     * @param authorization 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public declinePrivacyPolicy(userId: number, privatePolicyId: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public declinePrivacyPolicy(userId: number, privatePolicyId: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public declinePrivacyPolicy(userId: number, privatePolicyId: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public declinePrivacyPolicy(userId: number, privatePolicyId: number, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling declinePrivacyPolicy.');
        }
        if (privatePolicyId === null || privatePolicyId === undefined) {
            throw new Error('Required parameter privatePolicyId was null or undefined when calling declinePrivacyPolicy.');
        }
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling declinePrivacyPolicy.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (MaaS Token) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/users/${encodeURIComponent(String(userId))}/privacyPolicies/${encodeURIComponent(String(privatePolicyId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * User declines service conditions
     * 
     * @param userId 
     * @param serviceConditionId 
     * @param authorization 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public declineServiceCondition(userId: number, serviceConditionId: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public declineServiceCondition(userId: number, serviceConditionId: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public declineServiceCondition(userId: number, serviceConditionId: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public declineServiceCondition(userId: number, serviceConditionId: number, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling declineServiceCondition.');
        }
        if (serviceConditionId === null || serviceConditionId === undefined) {
            throw new Error('Required parameter serviceConditionId was null or undefined when calling declineServiceCondition.');
        }
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling declineServiceCondition.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (MaaS Token) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/users/${encodeURIComponent(String(userId))}/serviceConditions/${encodeURIComponent(String(serviceConditionId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete privacy policy
     * 
     * @param privacyPolicyId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deletePrivacyPolicy(privacyPolicyId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deletePrivacyPolicy(privacyPolicyId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deletePrivacyPolicy(privacyPolicyId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deletePrivacyPolicy(privacyPolicyId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (privacyPolicyId === null || privacyPolicyId === undefined) {
            throw new Error('Required parameter privacyPolicyId was null or undefined when calling deletePrivacyPolicy.');
        }

        let headers = this.defaultHeaders;

        // authentication (MaaS Token) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/privacyPolicies/${encodeURIComponent(String(privacyPolicyId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete service condition
     * 
     * @param serviceConditionId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteServiceCondition(serviceConditionId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteServiceCondition(serviceConditionId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteServiceCondition(serviceConditionId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteServiceCondition(serviceConditionId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (serviceConditionId === null || serviceConditionId === undefined) {
            throw new Error('Required parameter serviceConditionId was null or undefined when calling deleteServiceCondition.');
        }

        let headers = this.defaultHeaders;

        // authentication (MaaS Token) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/serviceConditions/${encodeURIComponent(String(serviceConditionId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Edit privacy policy
     * 
     * @param privacyPolicyId 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public editPrivacyPolicy(privacyPolicyId: number, body: any, observe?: 'body', reportProgress?: boolean): Observable<PrivacyPolicy>;
    public editPrivacyPolicy(privacyPolicyId: number, body: any, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PrivacyPolicy>>;
    public editPrivacyPolicy(privacyPolicyId: number, body: any, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PrivacyPolicy>>;
    public editPrivacyPolicy(privacyPolicyId: number, body: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (privacyPolicyId === null || privacyPolicyId === undefined) {
            throw new Error('Required parameter privacyPolicyId was null or undefined when calling editPrivacyPolicy.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling editPrivacyPolicy.');
        }

        let headers = this.defaultHeaders;

        // authentication (MaaS Token) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<PrivacyPolicy>(`${this.basePath}/privacyPolicies/${encodeURIComponent(String(privacyPolicyId))}`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Edit service condition
     * 
     * @param serviceConditionId 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public editServiceCondition(serviceConditionId: number, body: any, observe?: 'body', reportProgress?: boolean): Observable<ServiceCondition>;
    public editServiceCondition(serviceConditionId: number, body: any, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ServiceCondition>>;
    public editServiceCondition(serviceConditionId: number, body: any, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ServiceCondition>>;
    public editServiceCondition(serviceConditionId: number, body: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (serviceConditionId === null || serviceConditionId === undefined) {
            throw new Error('Required parameter serviceConditionId was null or undefined when calling editServiceCondition.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling editServiceCondition.');
        }

        let headers = this.defaultHeaders;

        // authentication (MaaS Token) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<ServiceCondition>(`${this.basePath}/serviceConditions/${encodeURIComponent(String(serviceConditionId))}`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get all list
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllPrivacyPolices(observe?: 'body', reportProgress?: boolean): Observable<Array<PrivacyPolicy>>;
    public getAllPrivacyPolices(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<PrivacyPolicy>>>;
    public getAllPrivacyPolices(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<PrivacyPolicy>>>;
    public getAllPrivacyPolices(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<PrivacyPolicy>>(`${this.basePath}/privacyPolicies`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get all list
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllServiceConditions(observe?: 'body', reportProgress?: boolean): Observable<Array<ServiceCondition>>;
    public getAllServiceConditions(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ServiceCondition>>>;
    public getAllServiceConditions(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ServiceCondition>>>;
    public getAllServiceConditions(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<ServiceCondition>>(`${this.basePath}/serviceConditions`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get a privacy policy
     * 
     * @param privacyPolicyId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPrivacyPolicyById(privacyPolicyId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getPrivacyPolicyById(privacyPolicyId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getPrivacyPolicyById(privacyPolicyId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getPrivacyPolicyById(privacyPolicyId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (privacyPolicyId === null || privacyPolicyId === undefined) {
            throw new Error('Required parameter privacyPolicyId was null or undefined when calling getPrivacyPolicyById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<PrivacyPolicy>(`${this.basePath}/privacyPolicies/${encodeURIComponent(String(privacyPolicyId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get a service condition
     * 
     * @param serviceConditionId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getServiceConditionById(serviceConditionId: number, observe?: 'body', reportProgress?: boolean): Observable<ServiceCondition>;
    public getServiceConditionById(serviceConditionId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ServiceCondition>>;
    public getServiceConditionById(serviceConditionId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ServiceCondition>>;
    public getServiceConditionById(serviceConditionId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (serviceConditionId === null || serviceConditionId === undefined) {
            throw new Error('Required parameter serviceConditionId was null or undefined when calling getServiceConditionById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<ServiceCondition>(`${this.basePath}/serviceConditions/${encodeURIComponent(String(serviceConditionId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get the current user accepted terms and conditions
     * 
     * @param userId 
     * @param authorization 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTerms(userId: number, authorization: string, type?: string, observe?: 'body', reportProgress?: boolean): Observable<Terms>;
    public getTerms(userId: number, authorization: string, type?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Terms>>;
    public getTerms(userId: number, authorization: string, type?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Terms>>;
    public getTerms(userId: number, authorization: string, type?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling getTerms.');
        }
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling getTerms.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (type !== undefined && type !== null) {
            queryParameters = queryParameters.set('type', <any>type);
        }

        // authentication (MaaS Token) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Terms>(`${this.basePath}/users/${encodeURIComponent(String(userId))}/terms`,
            {
                params : queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Save the terms
     * 
     * @param userId 
     * @param authorization 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public saveTerms(userId: number, authorization: string, body: TermsRequest, observe?: 'body', reportProgress?: boolean): Observable<Terms>;
    public saveTerms(userId: number, authorization: string, body: TermsRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Terms>>;
    public saveTerms(userId: number, authorization: string, body: TermsRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Terms>>;
    public saveTerms(userId: number, authorization: string, body: TermsRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling saveTerms.');
        }
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling saveTerms.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling saveTerms.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (MaaS Token) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<Terms>(`${this.basePath}/users/${encodeURIComponent(String(userId))}/terms`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
