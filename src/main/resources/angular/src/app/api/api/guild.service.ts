/**
 * Dum API
 * This is the DUM API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: rbarbado@nexusgeographics.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { ApiError } from '../model/apiError';
import { Guild } from '../model/guild';
import { OAuthError } from '../model/oAuthError';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class GuildService {

    protected basePath = 'http://dum.nexusgeografics.com/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


     /**
     * Get gremis
     * 
     * @param authorization 
     * @param dni 
     * @param cadConveni 
     * @param email 
     * @param nameContacte 
     * @param nameGremi 
     * @param permisDum 
     * @param permisParking 
     * @param telContact 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public guildGet(authorization: string, dni?: string, cadConveni?: string, email?: string, nameContacte?: string, idGremi?: number, permisDum?: boolean, permisParking?: boolean, telContact?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Guild>>;
    public guildGet(authorization: string, dni?: string, cadConveni?: string, email?: string, nameContacte?: string, idGremi?: number, permisDum?: boolean, permisParking?: boolean, telContact?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Guild>>>;
    public guildGet(authorization: string, dni?: string, cadConveni?: string, email?: string, nameContacte?: string, idGremi?: number, permisDum?: boolean, permisParking?: boolean, telContact?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Guild>>>;
    public guildGet(authorization: string, dni?: string, cadConveni?: string, email?: string, nameContacte?: string, idGremi?: number, permisDum?: boolean, permisParking?: boolean, telContact?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling guildGet.');
        }
        
        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (dni !== undefined && dni !== null) {
            queryParameters = queryParameters.set('dni', <any>dni);
        }
        if (cadConveni !== undefined && cadConveni !== null) {
            queryParameters = queryParameters.set('cadConveni', <any>cadConveni);
        }
        if (email !== undefined && email !== null) {
            queryParameters = queryParameters.set('email', <any>email);
        }
        if (nameContacte !== undefined && nameContacte !== null) {
            queryParameters = queryParameters.set('nameContacte', <any>nameContacte);
        }
        if (idGremi !== undefined && idGremi !== null) {
            queryParameters = queryParameters.set('idGremi', <any>idGremi);
        }
        if (permisDum !== undefined && permisDum !== null) {
            queryParameters = queryParameters.set('permisDum', <any>permisDum);
        }
        if (permisParking !== undefined && permisParking !== null) {
            queryParameters = queryParameters.set('permisParking', <any>permisParking);
        }
        if (telContact !== undefined && telContact !== null) {
            queryParameters = queryParameters.set('telContact', <any>telContact);
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (DUM Token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<Guild>>(`${this.basePath}/guild`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete Guild
     * Delete Guild
     * @param guildId 
     * @param authorization Token of authentication
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public guildGuildIdDelete(guildId: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public guildGuildIdDelete(guildId: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public guildGuildIdDelete(guildId: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public guildGuildIdDelete(guildId: number, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (guildId === null || guildId === undefined) {
            throw new Error('Required parameter guildId was null or undefined when calling guildGuildIdDelete.');
        }

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling guildGuildIdDelete.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (DUM Token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/guild/${encodeURIComponent(String(guildId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Detailed Guild
     * 
     * @param guildId 
     * @param authorization 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public guildGuildIdDetailedGet(guildId: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<Guild>;
    public guildGuildIdDetailedGet(guildId: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Guild>>;
    public guildGuildIdDetailedGet(guildId: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Guild>>;
    public guildGuildIdDetailedGet(guildId: number, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (guildId === null || guildId === undefined) {
            throw new Error('Required parameter guildId was null or undefined when calling guildGuildIdDetailedGet.');
        }

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling guildGuildIdDetailedGet.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (DUM Token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Guild>(`${this.basePath}/guild/${encodeURIComponent(String(guildId))}/detailed`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update Guild
     * Update Guild
     * @param guildId 
     * @param authorization Token of authentication
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public guildGuildIdPut(guildId: number, authorization: string, body: Guild, observe?: 'body', reportProgress?: boolean): Observable<Guild>;
    public guildGuildIdPut(guildId: number, authorization: string, body: Guild, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Guild>>;
    public guildGuildIdPut(guildId: number, authorization: string, body: Guild, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Guild>>;
    public guildGuildIdPut(guildId: number, authorization: string, body: Guild, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (guildId === null || guildId === undefined) {
            throw new Error('Required parameter guildId was null or undefined when calling guildGuildIdPut.');
        }

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling guildGuildIdPut.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling guildGuildIdPut.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (DUM Token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<Guild>(`${this.basePath}/guild/${encodeURIComponent(String(guildId))}`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create Guild
     * 
     * @param authorization 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public guildPost(authorization: string, body: Guild, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public guildPost(authorization: string, body: Guild, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public guildPost(authorization: string, body: Guild, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public guildPost(authorization: string, body: Guild, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling guildPost.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling guildPost.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (DUM Token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/guild`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get gremis excel
     * 
     * @param authorization 
     * @param dni NIF GREMI
     * @param cadConveni Caducitat de conveni
     * @param email Email gremi
     * @param nameContacte Nom persona contacte
     * @param nameGremi Nom gremi
     * @param permisDUM 
     * @param permisParking 
     * @param telContact Telèfon persona contacte
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public guildXlsGet(authorization: string, dni?: string, cadConveni?: string, email?: string, nameContacte?: string, idGremi?: number, permisDUM?: boolean, permisParking?: boolean, telContact?: number, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
    public guildXlsGet(authorization: string, dni?: string, cadConveni?: string, email?: string, nameContacte?: string, idGremi?: number, permisDUM?: boolean, permisParking?: boolean, telContact?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
    public guildXlsGet(authorization: string, dni?: string, cadConveni?: string, email?: string, nameContacte?: string, idGremi?: number, permisDUM?: boolean, permisParking?: boolean, telContact?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
    public guildXlsGet(authorization: string, dni?: string, cadConveni?: string, email?: string, nameContacte?: string, idGremi?: number, permisDUM?: boolean, permisParking?: boolean, telContact?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling guildXlsGet.');
        }









        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (dni !== undefined && dni !== null) {
            queryParameters = queryParameters.set('dni', <any>dni);
        }
        if (cadConveni !== undefined && cadConveni !== null) {
            queryParameters = queryParameters.set('cadConveni', <any>cadConveni);
        }
        if (email !== undefined && email !== null) {
            queryParameters = queryParameters.set('email', <any>email);
        }
        if (nameContacte !== undefined && nameContacte !== null) {
            queryParameters = queryParameters.set('nameContacte', <any>nameContacte);
        }
        if (idGremi !== undefined && idGremi !== null) {
            queryParameters = queryParameters.set('idGremi', <any>idGremi);
        }
        if (permisDUM !== undefined && permisDUM !== null) {
            queryParameters = queryParameters.set('permisDUM', <any>permisDUM);
        }
        if (permisParking !== undefined && permisParking !== null) {
            queryParameters = queryParameters.set('permisParking', <any>permisParking);
        }
        if (telContact !== undefined && telContact !== null) {
            queryParameters = queryParameters.set('telContact', <any>telContact);
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // authentication (DUM Token) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<string>(`${this.basePath}/guild/xls`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress,
                responseType : 'blob' as 'json'
            }
        );
    }

}
